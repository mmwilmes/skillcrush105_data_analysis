

STUDY RESEARCH 
				

			There is a lot to be learned and definitely lots of information out there. Take the time to study. When the going gets tough, keep tough yourself. Always make it a point to learn not just one thing a day but more things a day.
				
 GIANT STEPS
				

			Once you start learning, grasping concepts just dont stop grasping more concepts. Keep leaping into this programming. Taking baby or giant steps into Ruby means you are moving further into this Ruby World. Hello! 
PUSH PULL COMMIT.

			I can assure you its not manual labor, I hope. It is however labor. Laboring till you get it. Gems and commits, we are not speaking of relationships here.... are they?? Find out! 



It's okay to feel lost and confused!
I was once told not to use the word “hard”. Hard should be reserved for people battling cancer, losing a loved one, or giving birth.  Coding isn’t hard, but it is challenging, especially if you’ve never done it before.
But every day it will get just a little bit easier with practice.  Just like learning to ride a bike, the first few times you crashed, then you felt wobbly for a while and then you hit the sidewalk and eventually the street.  Consider this to be your path to coding…it is a process – a very confusing process, but a process.  
However, unlike riding a bicycle – in this journey you aren’t alone.  Sure you will still fall, a lot, but you have  a lot of resources to fall back on.  This class, Skillcrush, but then there are also a ton of resources for you that will help your mind slowly untangle the coding knot that is forming inside of you.  
Just keep practicing and never stop peddling and eventually you will be riding on your own.  Again – coding isn’t hard but is confusing, but you can do it.  



Make time to refresh your new skills
You will learn many new skills HTML, CSS, JavaScript, jQuery, Ruby at different levels of fluency.  It is imperative to make time each week to go back through your notes or make projects to refresh your mind and learn new tricks.



It's Never Too Late!
It's never too late to learn something new. A lot people change jobs and aquire new skills after they've left their 20's behind them, and when you really think about it, people adjust to changes all the time even within the confines of a particular job or routine. Looking at history, think about how much has changed as we went from the 50's to the 60's, the 90's to 2010, and keep in mind that the average life span is about 78 years. Learning is, then, an inevitabilty for everyone at every age bracket. You aren't too old to learn a new skill!
It's Like Eating A Giant Sanmmich!
If you try to shove a large sandwich in your face, it falls apart, makes a mess, you end up looking silly and possibly embarassing yourself in front of others. However, if you cut the sandwich into smaller bites, adding a toothpick or two where needed, then it becomes much more managable and enjoyable. Learning to code is like being presented with a really big overwhelming sandwich. Breaking it into bites you can handle is the best way to go so you avoid being overwhelmed.
It Will Take Time From Other Things
You'll have to sacrifice some things time wise at some point. Choose wisely and remember to put yourself first.



Take your time!
I know you are eager to start programming, but don't rush through it.  Take your time to grasp each concept before moving on to the next.  Otherwise, you will spend the entire course feeling as though you are playing "catch up".
Don't be afraid to ask for help.  Sometimes that help may come in the form of another forum member, while at other times you may need to Google for answers.  The more specific the question you type into Google, the more likely you are to locate a helpful answer.
Believe in yourself.
You can accomplish anything that you desire if you believe in yourself and are willing to put in the work that it takes to be successful.  Programming is completely doable if you start at the beginning and master each concept step by step.
Get plenty of practice.  You will never master programming by just hearing it once.  You need to practice again and again until it becomes second nature to you.
Make it your own.  After learning a new concept and completing the practice questions or challenges, create your own challenges to make it your own.  Use the concepts you just learned to create your own software programs and applications.  This will make you a much better developer.



Believe you can do this
The worst thing you can do is doubt your abilities when it gets tough. You've made it this far and you've hit a wall.
Well, walls are objects. So are ropes and ladders and even helicopters. They just need to be created so you can get over that wall. So create that rope or ladder. And when in doubt find someone with a helicopter. So what if you used their code? You're filing away a treasure of knowledge for the next time. Or maybe, you're filing it away to help someone else one day.
You don't have to eat the whole elephant
Every great program started as a small bit of code. It turned into thousands and thousands of lines over months and years. It took many tries and many failures before it became Twitter or Facebook. And even now those polished products are shrunk, rewritten and expanded.
So don't try and build Facebook in a day. Start with just a user profile or a login protocol. Before you know it, you'll be giving Zuck a run for his money.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Most of all, don't give up.  Stick with it and good things will happen.



Plan your code before writing
Before beginning to code write a document with what are the requirements?  How you will implement them?  Writing code will become much more clear when you have a reference.
Read a lot of code
It will give you ideas and efficient ways to implement your code.
Write simple apps
It can be overwhelming to see complex projects but you can start writing very basic apps and build on that by adding more complex features.



Get frustrated, but don't let it consume you!
My frustration made working on my projects very challenging.  I didn't realize my confusion would end if I gave it time.  Some projects were put off until the very end, because I resented the work. Had I left that resentment hold me back from pushing forward, I would never have met Ruby, or realized my potential.
Sign up, get involved, connect, connect, connect
Find every news letter and group you can about the coding you love and sign up.  Right now.  You won't understand what these groups are talking about at the beginning, but having the exposure to their discussion will familiarize you with terms and common know-how.
I started a twitter account sort of late in the game.  I still don't update it enough.  Maybe I'm afraid my new tech connections will laugh at me? I don't know.  I DO KNOW that everyone has been newb status before.  Don't be shy!



Fellow coders are your best resource.
When you get caught up on something, don't be afraid to ask questions or look at the work of your peers. Looking at another person's working code can be a great way to solve a puzzle in your own work.
Practice a little bit every day.
Learning a programming language can be a lot like learning German or Spanish — you'll retain more if you speak your language a little bit every day, rather than cramming a month's worth of practice into one night.
Share the love.
Contributing to projects and teaching others new skills are perfect ways to keep practicing AND be an awesome human!
 

Confusion is your friend
When I started learning Ruby with Skillcrush, I was in a hurry to learn fast and become a professional developer, thus I was
			always annoyed when I made mistakes or something was not clear to me. I found myself wondering whether that was a suitable career path for me. 
			BUT... This is NOT an efficient way to learn! I found myself learning
			and retaining code much more effectively just trying to solve errors step by step and focus on what I have to do in that very moment, without worrying
			too much and overthinking. 
			When you learn to fix an error, you gain a better understanding of the coding logics and remember things much better.
I bet you don't like feeling confused and lost... Well, same here! But you will learn to love it as a part of your job and...
			you can  still google for help : D !
			It can take time though... Just try, even in this case, to stay on what you are working on, don't get into endless research trying to 
			learn everything related to that topic. 
			It will be easier and more useful.
Would you like to keep in touch?
Come connect with me on LinkedIn at Alessandra Viero!



Don't be shy about posting on the google group.
I was really nervous to post anything on the group at first but it got easier when I realized how much seeing other people's solutions helped me find and correct the bugs in my own work and I wanted my work to do the same.
It got a bit more challenging when I had to post that I was stuck.  I felt a little embarrased to post the code that wasn't working.  Looking through the lessons, though, it seems that lots of other students run into soemthing like that at some point and the instructors are incredibly helpful to give you a point in the right direction but they can only do that if they can see where you are running into problems.
Trust that it will make sense down the road.
For the most part, Skillcrush lessons are great about walking you step by step through each lesson.  So much so that sometimes I worried that I was typing what I was supposed to but didn't really master the concepts; like I was just going through the motions.  I learned not to worry about that until I had completed the entire challenge and ususly by that time it all made sense.  If it still doesn't make sense at the end of the challenge that is a great time to ask qustions on the group.



Errors, errors is what you want!
When I started with ruby with Skillcrush, I was always so keen on not making mistakes and always looking ahead to lessons so I can learn and do the exercises without making mistakes. This is NOT the most effective way to learn! I found myself learning and retaining code much more effectively after I solve errors. When you learn to fix an error, you gain a better understanding on what you missed out on.
Confusion, on the other hand is what I dislike most in this learning process..I don't like feeling lost. The good thing is googling for resources is so helpful. Just don't fall into the trap of endless research of certain commands or topics when you're googling. I feel it really takes you off track. Find out what you needed to know, glimpse through some things you find interesting and make a note somewhere so you can come back to it when you come across it again. Learning about something you can use right away is more functional in my opinion.
Learning to be a Developer?
Any thoughts? I am blogging about my learning to become a developer. Come join me at Code With Tuna!



Learn the basics: HTML, CSS and JavaScript/JQuery. And perhaps, later on, PHP, too. Don't try to learn hundreds of things at once.
Remember to do something else every once in a while, preferably something relaxing, too, besides sitting in front of your computer.
Be patient.


JavaScript is confusing, and that's okay.
When you go through the JavaScript class with Skillcrush, there will be lots of questions and frustrating points. Take good notes while you go through the lessons and challenges, so you're climbing up to success rather than  riding on the struggle bus.

Always be sure to ask questions, and investigate! There are thousands and thousands of resources online that cover exactly what you're confused about, or very close to your problem. 
 Read the errors that you're recieving. 
 Copy the error you're getting, and search on Google. 
 Ask TA or classmates on Mightybell for help 
 Post on your question on Stack Overflow, Reddit, or a similar kind of website to help with programming questions. 
Above all, take a break, and come back to your problems with a fresh head! You'll have a eureka moment!







Confusion is your friend! 
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. Embrace it! It's a signal that you have engaged in the problem solving and that you should just keep going.
Suspended disbelief plays an important role.
Nothing good has ever come from quitting. When you are learning a new technology, whether you are learning to write your first programming language, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's an important part of the process.



Don't give up
When you start out, you'll be convinced that you known nothing. That might be true, but remember every other programmer felt the same way at some point!



When You Have a J.O.B.
Time at your J.O.B. is, of course, a must. For now at least, it pays the bills. While you get the training and education you need to pursue a different course for yourself, remember to give 100% to your J.O.B..  Dedication is rewarded and those rewards show up in all areas of your life! When you leave for the day, leave it behind! Don't let stray thoughts about work sabotage the rest of your time in the day, focus on one thing at a time!
Focus on Learning!
When you're not at your J.O.B., it's all about the process that gets you from where you are now to where you want to be...learning! It won't be easy, but it WILL produce results far greater than you imagine. Let go of the unproductive time-suckers, and use that 'found' time to devote to learning. Yes, watching tv was my first cut! Well, okay, I do still watch The Walking Dead with my son...we all have our 'quality of life' thresholds! ;D 
Some areas of your learning process will be much easier than others. Some topics you will breeze through, and others, not so much. Keep pushing thru, and remember that the only way you can fail is to give up! 
You Can Do This!
Finding balance is elusive, and at times you will think that you're not being successful in any area of your life! Give yourself a break! Take a walk and enojy a cool spring evening. Fix a special dinner with your family.  Taking even a short break can help you re-focus and make your time spent on learning much more productive.
I've learned that there's a difference between multi-tasking and compartmentalizing. Multi-tasking can be great, but it won't help you as much as putting all of your focus on one thing at a time. When you leave your J.O.B., shut that door and turn all of your attention to your next task. Family time- dinner, kids ready for bed, cleaning up the kitchen, whatever your home life looks like. All areas of your life are important and deserve to be a priorty. Section off your time and it will really reduce the guilty feeling that comes with doing 'this' but thinking you really should be doing 'that'.
What About 'Me' Time?
That's easy....investing in yourself by learning with Skillcrush, of course! ;D



What you are doing is IMPORTANT
You hear it a lot now, "Everyone should know how to code.  It's totatlly true!  Even if you just learn a bit, it will help you every single day.  Everything we do depends on some kind of technology and understanding what it takes to tell a computer what to do will be a huge benefit to you.
Try HARD to find the answer yourself
You hear a lot about not being afraid to ask questions and that is great advice - BUT it is also important to be able to find your own answers.  When you have spent time researching and taking notes, diagraming out your own solutions, you will understand and remember your solutions so much better than if you asked someone and they gave you the answer.
That being said, it is also important to recognize when you have banged your head against the wall one too many times and you need some help.
Write simple test scripts
By taking 5 to 10 minutes to write out a few lines about what you expect your user to do and what you expect to happen, it really helps you plan your code.  Once you have written down - User provides birthday - you know you have to create a way to prompt them to provide their birthday, in the format you need.



Do not procrastinate!
There will be unforeseen situations that can stall your progress along the way. Make the time to address them.



Double Check Your Work
It's something you've heard from the very beginning of English class back in elementary school but maybe you feel you've surpassed that point. You're not in school anymore so why should you need to edit or revise?
Don't get cocky. Editing and revising your work is not a concept that only applies to a specific age group. The idea is not a personal affront to your style or your smarts. Return to your work so you can make it the best it can be.
Do not brush over it with glazed eyes. Take a break if you need one but don't sacrifice the ultimate quailty of your work by rushing through this potential last step. Ease through it with a fine-tooth comb until each semicolon is standing in its correct place and each indent is aligned with its sisters.





Be not afraid!
If you are like me and you have NO background in tech, be not afraid! Take a deep, deep breath - it's fine. It's a language or a skill that you haven't learned yet; no one would expect you to speak French if you had never taken French before. And no one will expect you to code if you haven't coded before.
Replay replay - hey hey hey!
And use and abuse that pause button, baby! The beauty of Skillcrush or other web-based learning is the ability to leverage videos and tutorials at your own time and at your own pace. Don't rush; use it.



My name is Evelin and I've been learning to code for quite some time now.
				Here's some friendly advice to myself. To be read any now and then.

Be kind to yourself. Look how far you've already come! CSS does no longer hold too many secrets to you. You communicate with your computer via Terminal.
					You're using version control. Be a little proud of yourself!
Sometimes you will want to give up. Don't!
Show off your skills any now and then. It's a great feeling to share your joy with others.
If nothing seems to be working and you feel the urge to throw your computer out of the window. Fire up Terminal and type in the following command: 

Big effort = big reward. You may have heard people complain that learning to code is hard. Well, it can, be. But, if you put in the work and I mean genuinely put in the work, even when it sucks and you're tired and confused, keep at it. In the end, you won't regret it.



Focus on what delivers most value.
Overpreparation has an opportunity cost. Better to identify a project that you want to work on and learn on an as-needed basis while working on it than to run through endless exercises.
Come for the code, stay for the community.
Learn at your own pace, sure, but you don’t have to do everything on your own! There are plenty of opportunities to do meaningful work (and find co-conspirators) as a newbie, including OpenHatch and the Civic Tech Issue Finder.
Always be coding.
“A small daily task, if it be really daily, will beat the labours of a spasmodic Hercules.” —Anthony Trollope
Put differently: stay sharp.
Check out the Government Digital Service’s Design Principles.
Really. They just might save you a lot of time and heartache.



It's all about Patience and Practice!

It's all about Patience and Practice!
An apple a day helps keep the doctor away!
So, true!  A little prevention...nutrition...feeding of the mind...adds up over time!"
Also, on the other hand, neglect and negativism builds up over time, too!
Focus on doing a little each day...and in time you will be so much further than you ever imagined!




Nothing much to change... I'm lazy to come up with some text :) I'll just use SK's words.
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!
When you get that painful feeling in your stomach every time you look at a solution and can't figure out where in the hell the instructor got the code. Just chill. Let it wash over you and know that you're picking up bits and pieces of info that will be more helpful later.
Confusion, therefore, is a good thing. It makes you eat less, sleep less, and consider throwing in the towel occasionally. But it also makes the reward that much better.
Suspended disbelief plays an important role.
Imagine that you could be a developer. Laugh at yourself if you must. But just pretend and go along with it. Imposter syndrome is real. Even the gurus feel it.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing. In other words. Just keep staring and shaking your head. And then go with it. It's like memorizing English grammar. Most of it doesn't make sense anyway.



Dive In!
When first getting into tech or learning something new, don't waste time thinking about if you should do it or not. Just dive right it!!
 There's no better time to begin than right now!!! 



Confusion is your friend!
I wish I had gotten the advice to only do this if you have a lot of free time and are not working full-time on multiple projects aside from learning to code.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!
When you startcoding your first web pages you are doing something that you have never done before. It's a new challenge, a new opportunity.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
One more thing....Google is your best friend!!



Google is your friend!
When you get stuck, chances are someone else has gone through something similar. Visit forums, use google, the answer is out there somewhere. Don't give up.



Keep learning!
Coding is a skill that takes time, energy, and most of all, practice. Therefore, while you're learning, it's best to continue to practice on a daily basis. The concepts are difficult, but the best way to commit them to memory is through consistent practice every day.
Don't get too worried if you're struggling, or feel frustrated. We've all been there. Yes, even us professionals. Remember that your Skillcrush buddies are always here to help, and best of all -- there's Google. Don't be afraid to ask questions from your coding friends or Google.
Never give up!
This is a new language after all. Frustration, impatience and disbelief are your friends on this coding journey.
Don't be afraid to try. You may fail, but that's why we're working in branches and not on the master code. Have fun, play around and most of all, don't ever give up!



Attend a tech conference online!
I was quite overwhelmed by all the new concepts I was learning - HTML, CSS, Javascript and not, Git! I've always enjoyed attending conferences and jumping on Twitter conversation, so I thought - maybe I can attend a conference to get excited! That's when I found Nordic JS, a javascript conference in Stockholm Sweden!

			I learned about Vector Markup Language (VML)	,  truly fluid typography and much more! 
 You should check out  Dirty Tricks From The Dark  Corners Of Front-End by Vitaly Friedman, the co-founder of Smashing Magazine, one of the largest online magazines dedicated to Web design and development.  
			
Places to discover conferences


Lanyrd
Frontend list
Crowd-sourced list on Github


Jump on Twitter and engage with other developer-in-training, Skillcrush's Twitter is a great place to start ;)



Immerse yourself in code
At first, code is going to look really confusing, and it's not going to make much sense. Try to keep pushing through it and it will click for you - I promise! Don't just read it: use it, retype it, make the moving parts work (and not work) for you because that's how it will start to make sense.
If the learning tool you're using isn't working for you, try another one. There are lots of ways to learn and another teacher's voice might help you get unstuck so you can come back with fresh eyes.
Look under the hood
Sometimes we want to just use the thing without understanding how it works. But if you're on this journey, you're going to get really comfortable with the idea that you CAN understand it, even if you don't yet. Just know that the answer is out there waiting to be pulled down from google.
Once you have a basic grasp on one programming language, the next one is going to be quite a bit easier. Most languages are somewhat related.
Join the community
Go on the forums like stack overflow and participate.
Write a blog about your journey learning to code.
Find someone else who's on a coding journey, and sit together and pair code.




✓ It's A-OK to eff things up a bit.
I find that I learn best when I fail upward. I'm not scared to admit that I screwed up my fair share of code while learning the ins and outs of HTML and CSS. I immediately started applying my new skills to my email campaigns at the office, and while I have no MAJOR blunders to report, let's just say those first few emails are...questionable. Thankfully, I have a very understanding boss who is 1 billion supportive of the learning process.
P.S. We may or may not have had to roll back the master website code a couple of times. :D Had I not had the opporitunity to EPICALLY fail, I might not know which mistakes to NOT make.
✓ It's okay to say "SCREW THIS" and walk away for a day or week or month or two.
One thing that continues to amaze me is how my brain puts puzzle pieces together when I least expect it. I'll have days when I get soooo frustrated with code and give up on it. That's completely okay! I've discovered that when I come back to it, magic happens and the pieces fit together and I think I'm silly for spending so much time on a padding confusion or something.
This is a normal and will save you loads of actual time in the long run. If your stuck, maybe you should shut the laptop for a minute, okay? I know it's hard sometimes (like walking away from a damn cookie) but trust me, future self will thank you.





Intimidation is your friend!


Remember back in high school, when you studied hard before the exam but when you saw your question paper
						you were just so intimidated by the questions to even recollect a single word for which you burnt many a dozen midnight lamps?
						Yea right, programming aint that different sometimes!
						When you start programming you are excited and you learn the initial HTML+CSS with the enthusiasm of a kid in a candy store!
						But as you slowly progress to Responsive Web Development (which I like to call RWD) that's when the gameboard shifts
						to a parallel universe that you dreamt of travelling to, but never imagined you would ever get an opportunity.
						Now you're like the mouse in the maze experiment, the directions are there but you're just too muddled to think clear!
						In other wise words, you are intimidated but that intimidation is good my friend. It only makes you strive harder to understand
						the how everything works and the key to solving that is Simplicity!




 Simplicity as the Key!


Simplicity is a simple term but why is it the key to intimidating codes? The reason again is simple - ok I know
						I might sound confusing now just read on I promise things will be clear! When you keep your codes simple you will be able to
						understand how every line in that code responds to your changes, thereby you get a better understanding how everything works.
						Hey no one said the path to coding was easy!! 




Practice makes you better!


Yeah, the saying never gets old! Practice is what moulds you to be better at what you are learning, especially when you
							are dealing with intimidating lines of codes. I practiced my HTML and CSS codes a lot when I had the catch-up week but when it
							came to the RWD catch up week I hardly did anything! Talk about being intimidated by that popular kid in school but still
							playing it cool so you dont come across as an easy target. Yeah well, thats what I was trying to do in the RWD catch up week
							so much that by the time I entered the GIT 105 topic I dont think I can remember anything at all! If only I had practiced my RWD
							codes and done some coding I am sure would have entered 105 feeling a wee bit more confident.




For my parting words, all I would say is embrace that you are learning something that is intimidating, challenging and yet not
								as difficult as it seems to be, it is all in your head. Remember once upon a time even Everest seemed unconquerable! 
And with that (so called) inspiring advice I leave you to striving to learn. Happy Learning Folks!!!





Practice makes Permanent!
Work on your coding a little bit everyday. Write things down with a pen and paper. It has been shown that the physical act of writing helps us to remember things more so than tying on a computer.
This way your brain is more likely to retain the new information. 
Dream about your code.
According to new research new ideas can come when your mind is not focused. When your brain is in a diffuse mode it is working through the events of the day and actually helps to cement what you learned during the day.
Exercise
Exercise helps to create new neurons in the brain. These help with retaining information.



Stop Thinking and Start Doing!
Programming is exactly like learning a new language. It will take time for this new organization of letters and commands to make sense in your brain. That's ok! Stop thinking and just do it.
You are going to be making new neural pathways in your brain. You are supposed to feel disoriented and confused. Keep going.
Trust the Process
Start with HTML. Figure out how that works. Add CSS. Then figure out how that works. If you get stuck - google it. Literally, type your question into google. You will discover that you are not alone in your confusion. Use any and all online resources that you can click on! This is the embodiment of collaborative learning.
Small warning...chances are there will be more than one way to solve your problem. Find the one that makes sense to your brain. Keep moving. Don't try and analyze why the other way works too. Does it work? Does it look right? Keep moving.
No matter where a programmer is on the learning continuium of coding - there will ALWAYS be more to learn. This is NOT a static language and it is guaranteed to keep changing, so keep moving!



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits. Don't get frustrated, just relax into the growing pains.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Code every day!
Committing to code every day has made a huge difference and helped me push through any frustration and desire to give up.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
You are going to doubt your abilities and feel so overhwelmed. But I am here to tell you to keep pushing through it. Especially when you are stuck on the smallest thing for most of the day. Once, you figure it out, there is a great feeling of satisfaction...until it happens again on something else.
Stay focused and positive you will succeed if only you believe in yourself. If you need answers, Google is my best friend. There is someone that has gone through what you are going through so if you google it you will find an answer. Yes, you may have to dig a bit.
But it will be okay, just don't stop!



When you feel like you've hit a wall with your code, take a break!
You can bruteforce some coding problems by hunkering down and working on possible solutions for hours, but other times it's just best to step back and do something else, even if it's just for fifteen minutes. The more agitated you are in not finding something that works, the harder it will be for you to think straight. So, clear your mind for a bit, and come back with a fresh perspective.
Feeling demotivated? Open up your favorite music streaming service and get into the groove.
There will be days where you just don't want to code. When you need that extra push, bring up your favorite Spotify playlist, start that motivational Songza mood list, or use whatever other music service you prefer.



Fear is your best friend.
Don't fight it, just manipulate it so you have it on your back, pushing you to the forward thing to do. That was one of the best advices I got when I was studying for actor.
It's the title of a John Cale song by the way. And it's been a while I had that advice.
Yet it still stands.
Don't forget to change
I forget that always when things are going just right. Until I get kicked out of my welness little-thingy-dingy and I realize: ok, apparantly it's time for something new.
(And don't believe the hype, of course...)



Stick with it!
When you start learning how to program, there will be times when you feel in over your head – you'll feel like giving up because you'll never, ever, know all there is know well enough.
This is where perseverance is key: you will only learn and grow my jumping in and building upon the skills you learn today. Learn something, anything, today – and build upon it tomorrow.
You know enough now – and you'll learn more the longer you keep at it
You can't drink the ocean! Do what you can with what you know now – get out of your own way dammit, and turn off that part of your brain that tells you to stand still and stay safe - no one every grew as a person, personally or professionally, by avoiding discomfort. Uncomfortable> Good! It means you're getting somewhere.



Don't give up!
Learning new things can be tough.  I found that I breezed through HTML and CSS, but almost gave up my dream of web development when I got into JS.
I learned that it is okay to walk away or focus on something else for a little while.
Moving on to Ruby before I finished JS was very helpful for me.  I am now able to return to JS with a better understanding of OOP.



Don't worry! I have some advice for you...
Learning how to code can seem like a daunting task. There are so many languages and resources; it can be confusing to figure out where to begin. I know that I did a ton of Googling which lead me from site to site and blog to message board to article and back around again. Luckily, there are a lot of resources which makes it easier to figure out where to start.
I believe the first place to start is to understand your interest. Why do you want to learn to code? What do you want to code? Do you like design? Are you looking to make a career change or learn new skills to boost your current position? Do you want to work independently, freelance or be part of a team? Understanding the answers to these questions will help you figure out where to start. For example, if you love design and user experience, you should learn front-end web languages like HTML and CSS.
Know that your goals can evolve as you begin. You may find that your initial interest in programming may move to something else. I strongly suggest that you set some goals and ask for help to stay accountable. Coding can be hard. I will put off doing assignments unless I have timelines, etc.
You can do this! Learning to code is not easy but it's interesting and it's an in-demand skill.



Hi my name is Sara and I have some advice for you!


Confusion is your friend!
			When you start programming your first web app you are doing something that you have never done before.
Confusion, therefore, is a sign that you are heading in the right direction. You are on your way to enlightenment - just keep pushing ahead!


Suspended disbelief plays an important role.
			You know something is wrong with what you've created. But that's okay!
You'll learn as you work to figure out the problem, and that skill of finding the answer when you don't even know that actual question will come in handy MANY times in the future.


Have fun!
            Remember that you are changing your life. For the better! You are learning a lot of new tech skills, and it can feel hard, but think of everything you're capable of doing now!
Create a website for yourself devoted to your favorite things, be it puppies or rock n' roll. Just play and enjoy this education.


Back to Main Page

© Copyright Sara Miles 2016.



Google is your friend
When you are feeling stuck remember that Google is your friend. Other people have had the same issue, so search for an answer. It'll save you so much time and frustration.



Don't drink and code!
Just kidding. Coding is totally more productive when you are looped!
Actually, I'm only half kidding. Coding is easier when you just jump in and give it a go, even when you really don't have a solid idea of what you are doing. Approach your coding as if you are as uninhibited as being looped. Your code may not work, but at least you attempted to write something, which is much better than staring at your code editor's blank screen. In the famous words of Nike advertising, "Just do it!"



As with all adventures, there will be successes and misfire. But you can always count on learning and growing from it.
 If you remember a few things, learning to code will always be fresh and fun.

Practice, practice, practice - especially when it's the most difficult. Keep at it and don't quit. The epiphany is on its way!
Take a walk. Don't be afraid to just get up and go for a walk when nothing you are doing seems to work and you keep hitting the wall. Sometimes you just need to walk your way to the solution.
Reach out to your community - other Skillcrushers, online communities such as Stack Overflow, a mentor, your team, the Google braintrust, etc. They've been there and can help.
And finally... always check your code. Sometimes you make that wall yourself by something as simple as not closing a bracket. It happens to EVERYONE no matter what stage of career. We are a society in a hurry and these things happen. So validate your code!



Just Keep Swimming!
It takes a lot of time to really start to understand what you are doing.
The best way to get to understanding, is to just keep doing it. The more you do something, the more you begin to understand exactly what you're doing.
Go Easy On Yourself & the Word YET is Your Best Friend
It is easy to feel like you are stupid when you are struggling to understand something.
If you get down on yourself and let yourself think that you actually are stupid and can't learn this, then it will be a self-fulfilling prophecy.
So, instead of thinking "I'm stupid. I don't get this." Think, "I don't get this YET". That means you believe you WILL get it eventually. And if you believe that you will get it, then that will become your self-fulfilling prophecy.



Confusion is your friend!
You must keep going and code as often as you can! Don't get discouraged by problems, step away and tak a breath before you tackle them again. Never give up!



Think about your code before writing
Stop and think about what the end goal before starting to write your code.
			Break everything down into tiny, miniscule steps if you have to. It truly helps
			the mind to organize each step that needs to be taken. One instructor told me
			practice by taking a simple, everyday task and write out every single step that
				has to take place to get your body to complete the task.
			
Simply look at code
Just looking at code helped me think about all of the elements that go into
				a simple online document or web page. I found the more I looked at code while
				I was learning, the easier it became to recall which components of code are needed
				to accomplish a coding task.
Practice Practice Practice!
I definitely did not practice enough! Give yourself simple tasks/assignments to
				complete in addition to the class assignments. Don't let a lot of time go between
				times you sit down and write code. The more you use it the better you'll be at it!



attain
Attain new skills every day.  Educate yourself as much as you can on the skills you will use.  I love using Team Treehouse,  Skillcrush, and  Learn X in Y minutes.
cultivate
Work with others and cultivate those relationships.  You will learn so much more and more quickly in a community
translate
Basically, copy!  Take something you see that you like and translate it to your own work.  Type it in and see how it's supposed to work.
sharpen
Sharpen your skills by practicing them every day.




Have patience: bad things and stupid mistakes are made when you rush through your work
However, mistakes are important. They're how you learn.  Stupid mistakes are mistakes about stuff you should already know.
Organization is key! Properly organizing your Skillcrush downloads will help you with finding the answers to your questions 
Don't be afraid to ask for help; as lonely as it can be, none of can make it alone in this life
Don't forget self care, both physical and mental.  When you need a break, take a hot shower with you favorite shower gel, got for a walk, or talk to a friend.  After finishing an especially challenging project, treat yourself to an ice cream sundae!
You are beautiful and you are intelligent.  Never forget that.




Coding is easy, but there is a catch
You have probably heard that learning to code is easy.  Not only is this true, but it's also fun and addictive.  Your first couple of lessons will give you confidence and you will want know more. But here's the catch -- it doesn't stay easy.  You will reach a point where you are getting errors and feeling very frustrated.  Sometimes you will look at a project and think, "I don't even know where to start."  The hard part is making the decision to keep moving forward or to quit, and you will have to make it over and over.
Don't get caught up in decision.  If you push through the difficulties you will have learned valuable skills, not only in coding, but in all aspects of your life.
Find a community
You've probably heard about Code Academy and other online educational coding sites.  They are awesome.  There are also hundreds of books available through library systems.  And I bet there is even a meetup or two in your area.  There are many ways to learn to code for free and without ever having to leave your house, but you need a community.  You need a place to go when you have questions.  You need a place to brag when you figure it out.  You will want to help others when you see them struggling.
I think learning to code is really only about two things:  finding your community and always moving forward when you get stuck.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Google Everything 
Google is your best friend and is the greatest way to debug and learn new things. Google always and often. 



Face Into Your Fear

When I first started programming, I would get overwhelmed or scared. But I soon realized that that sense of fear could be translated into exhilaration if I just embraced it.
Basically, remember that whenever you are feeling afraid to take the next step, take a deep breath, remind yourself "Even if I fail, I'll give it a try." Just do your best - it's all you can do, and you will be surprised, that your best is pretty darn good.

Think or Do?

When first starting out, it feels like there is a constant battle between when to think and when to do. It can be tempting to spend a lot of time trying to grasp something conceptually, but remember that no amount of theoretical knowledge is a substitute for getting your hands dirty.
Mistakes are a part of the process and will help you learn and grow. You will always learn more from making a mistake and figuring out how to fix it than from reading a book about how to do it right the first time. Debugging is part of the coding process, and will improve your understanding.
That being said, a perfect time to spend some time thinking is right before you actually start to do! Before you start coding, try to figure out exactly what you're trying to do, and how you'll approach the coding task. That way, you have an idea of exactly what code you want to create. You can then try to code each piece of your code bit by bit. This will make it easier to get your code working.




Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
I have found that the more lost you get the more you learn.  I have noticed that when I make a mistake it may take me a long time to figure out how to fix it but it gives me a more in depth understanding of what it is that I'm doing.



Don't Give Up!
When you've come to a roadblock in learning certain concepts, confusion may drive you to doubt your capabilities in coding. But did you know that we all learn differently depending on how something is taught?
			
 Yep that's right! The good news is that the internet is full of resources created from coders who all explain coding concepts differently. So if you find something is not clear in a specific course, try to find other resources that make more sense to you. Clarity is just a few clicks away. 
Be Curious And Experiment
When learning code, practice everyday and experiment. You'd be surprised how much more of a learning experience you will have. You may just run into a new style or feature that will make employers swoon. 
Read, Read, Read
Newsletters, tutorials, code samples on github, stack overflow...the more you expose yourself to the code, the faster you go on the learning curve.
Invest Your Time
Advanced coding takes practice and time and that certainly is not achievable when you're constantly checking your facebook or twitter accounts. Instead, upload some mobile coding courses or books on your phone and check those every chance you get. 
Have Fun With Your Learning
If you think of your learning as work, it will make the experience all the more difficult. Have fun with it. Try making something you like. It may just turn out to be the highlight of your portfolio. 



Do Not Expect Perfection
Do not expect perfection: it rarely exists.  You are learning, and expecting perfection is just piling on extra stress on yourself that you do not need.  Right now, just enjoy learning and have fun with it.  Even if you don’t get something to work, you get to put on your detective hat and figure out what’s keeping it from working.  Once you get something to work, you’ll get that warm satisfied feeling!  Embrace it!

Now, look at your work again and try to make it better.  It’s like trying to beat your best score at a video game.  You still beat the game.  Never forget that.  You take pride in your work and want to make it better, like all the software and hardware updates in the technological field.  You want to beat your own best score.

Other random tips:

Practice!
Take breaks (or even a nap!) whenever your brain feels like mush.
Believe in yourself.
Ask questions, help out when you can, and look at other's work
Celebrate each step of the way.
There is always room for improvement, but that doesn't mean you shouldn't take pride in your work.
Who says you can't have fun when it doesn't go smoothly? Just enjoy the ride and keep going!





Feeling overwhelmed is okay!
You are being introduced to new ideas and a new way of thinking so feeling overwhelmed is a common trait.
Learn how to Google!
Being able to ask the right questions and to find out additional information online will help you out tremendously.
Perseverance is Key!
Learning to code is an exhausting but satisfying adventure.
Approach coding with an open mind and accept the challenges because you are not alone in this learning process.



Your brain is pretty freakin' awesome. And guess what...you can learn programming no matter how old you are! It's just hanging out up there waiting for you to fill it with all sorts of incredible, computery goodness.
Not sure where to start? You really should check out the awesome ladies at Skillcrush. Sure there are other places you can learn how to code, but no one else gives you bite-sized easy-to-process daily check lists complete with comprehensive videos that REALLY make sense. Trust me, you'll love it.


5. Network, Network, NETWORK!!
Make friends. Connect with classmates. Talk to people who have the job you want/work in the field. Join Facebook groups, Tweet about your experiences, anything! Just put yourself out there!
4. Reviewing is your friend
It's not only good to review in order to keep the skills you've already learned fresh, it can also be a huge confidence booster!
If I get really really stuck on something, I will go back and review things I've already mastered, not only to give myself a break, but also to remind myself that the things I've mastered were once really tough too!
3. Learning can come from different places
Find many different sources for learning. Different sources explain things in different ways, and sometimes a concept won't make sense in a webinar, but it will make total sense in a book! Finding information is a huge part of being a web developer.
The sources that work for me come from all over the place: paid online classes, free online classes, books, websites, Youtube tutorials, apps, seminars, articles, documentation, friends, Facebook... It just comes down to finding sources that help you learn and understand.
2. Ask questions!
I'm not sure that it's possible to stress this enough. Even if you think the question you want to ask is dumb, ask anyway! If something doesn't make sense to you, chances are there are other people who also don't get it, and people who asked the same question in the past.
One of my favorite parts about learning to code is how helpful and welcoming the community is. There are so many people out there willing to help you learn, so ask away!
1. Have fun!
This sounds really silly and people say it all the time, but it's true: if you're not loving what you're doing, you're going to have a harder time with it.
Don't get me wrong, there is such a thing as a bad hour, day, week, topic, etc. Learning is frustrating at times, and you may second-guess yourself, but just step away. Clear your head and come back later. Being excited about learning and all the cool things you can do is the best part, and you should enjoy it!



Don't Be Afraid to Try New Things
There are so many great resources, like Skillcrush, to help you learn how to program. When you feel like you have a good handle on a something like html or ruby don't be afraid to experiment and try new things.
			 Even if you mess up it is all part of the learning process and it can only help you improve your skills.
Clear Your Head
Sometimes certain concepts and skills will come easy to you, and sometimes they won't. If you are really stuck on a problem or issue, take a break or start working on something else to clear your head. Sometimes simply stepping away from the problem for a few minutes can give you some clarity when you come back to it.
			Just remember that everyone gets stuck at one point or another and there is always a solution out there.
Stackoverflow
Stackoverflow is an amazing website where you can find the answer to almost any problem. You should definitely use this resource.
More Resources
Skillcrush
GitHub
Try Ruby



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.


More AdviceS
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.


Have Compassion For Yourself
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.


Keep A Sense of Humor!
The best thing about a boolean is even if you are wrong, you are only off by a bit. (Anonymous)



Don't give up!
There are many, many times when you feel like your brain may explode and there is no where for all the new information to go, but you can find a way.
Perseverance is key and when what your were working on suddenly clicks, it is a fabulous (although at times, frustrating) feeling!
Be brave
Making changes, experimenting and seeing what things can do are all part of the process. Worse case scenario is you need to go back a few steps to make amendments, but that is ok. You won't break everything!
W3 schools is an excellent resource
I have found w3 schools so helpful in my coding. They have great tutorials and info in an easy to understand way and it has helped me out a lot! w3 schools rules! 
Go for it!
You can always do more than you think you can, so just believe!



Don't be afraid to make mistakes!

Don't Be Afraid to Dive In
When you start learning programming, it can be easy to feel overwhelmed by how all the syntax, logic, and best practices come together to create a web app. The best way to overcome this is simply to create something. It doesn't have to be perfect the first time, and your code will only improve the more you practice.
Don't let your fear of failure prevent you from trying something new.
Build Something You Don't Know How to Build
Remember when your dad taught you how to ride a bike by pushing you down a hill and yelling "Just pedal!"? That is how learning to program works. If you don't know how to make a basic to-do list app, but you want to learn, then go do it! Pushing your boundaries and discovering how to overcome obstacles will only make you a better developer.
Every web app was built by scratch by someone just like you. If they can do it, so can you!







Practice, Practice, Practice!
It's a common belief that practice makes perfect, and I totally agree! Though I'm a devout believer, it's often hard to muster up the motivation to keep at a new skill. It can also be discouraging to see others so much better (and so much younger!) than you pumping out amazing stuff.
The one thing to remember is that everyone has put their time in to achieve their level of greatness—natural talent or not! So find a project that interests you and use that as your motivation to practice your new skill. Get excited about the end result—and the journey getting there!
Sometimes A Break is Just What You Need
I often get frustrated or bored with what I'm working on if I spend too much time on it. Taking a break changes up my scene, gives my brain a reboot and allows me to think clearly again.
Sometimes it's the change of pace that reignites your love for your project. Don't feel guilty for taking breaks! They're a necessary part of the process.



Don't Give Up!
There will be countless times when you wonder if you are going to be able to do this. I'm here to tell you, you can! Don't worry about being frustrated. You are in great company. Use Mighty Bell to ask questions. If you poke around, you may find someone is stuck on the same lesson. 
Don't forget to pay it forward! Every time someone helps you out, find someone that you can help. Trust me, it will make both of you feel good.

You are a Coding Warrior!



Drinking from the Firehose
When you first start learning to code, and you begin reading about all of the awesome resources (bootcamps, classes, tutorials, podcasts, blogs, newsletters, people to follow on Twitter, and on and on) - it's easy to get overwhelmed.
What I recently heard on a podcast was about how it's most important to focus on the fundamentals. Are you solid on HTML and CSS? What about JavaScript? Don't chase the frameworks, or hot new JS libraries unless you understand the basics first.
Find Your Tribe
You can't do this alone. Well, I suppose you could - but learning to code can be lonely. Get some company. You may be struggling with something another person has before, and if you reach out you'll get to that A-HA moment more quickly.
If a group looks like it moves too fast for you, look for supportive beginner groups (hint, hint: Skillcrush).
Make Something Already!
Dedicate a little bit of time every day to learning to code. Jerry Seinfeld's famous Don't Break the Chain comes to mind. Even just 10-15 minutes a day where you actually open your code editor and practice is worthwhile. You could try for your own 100 Days of Code. Or try to make a certain number of websites in so many days, like Jennifer Dewalt's 180 Websites in 180 Days.


Don't hesitate to ask others!
...the Ruby community is here to help.


Go confidently in the direction of your dreams! Live the life you've imaged ~ Thoreau



Google will be your friend...
No matter how experienced a developer you are, you just can't know everything. As a result, you will have to resort to using Google to help you solve your problem from time to time...and more often than not you will find yourself on Stackoverflow reading a resolution to your problem...
Practice makes perfect!
When it comes to programming skills, it is very much a case of "use it, or lose it" - you need to practice as much as you can.....
This practice could take many forms, be it coding katas, personal projects, following tutorials, implementing code snippets from magazine articles or blog postings you just need to get on and do it in order to keep your skills sharp and up to date.



 Who took my Job? 
 If you've been watching season three of Silicon Valley, you'll know that the Pied Piper team outsourced part of their workload to coders from around the world. A neat concept, but they ultilately did it to cut costs. 
The point is that, if you can learn to code online, someone in a third world country has probably already learned to do it and taught their entire village for free.
Sure, learning to code might be great now, but in a decade (or less) you might be the one complaining about you job being outsourced to a foreign country. Just Sayin.



Grit is everything!
When it comes to coding, grit is everything! Learning coding can be confusing at first, especially if you don't know what you want to create. In the beginning that is a hard one because you don't even know all the possibilities that exist!
It all comes together at some point. You have been learning a bit from here and a bit from there and soon realize that you already know more than you thought was possible. You'll also realize the amount of stuff you don't know, which is fine too. Just keep going!
Getting over the impostor syndrome
Because you know painstakingly well how little you know about code, you sometimes feel like an impostor. How can you own your very own spot in tech if you are new to all things? There's no point in making comparisons to what other coders can or can't do - better way is to think yourself as a bridge to people who know nothing about code!



Practice Helps
The first time you come to a challenge, it can be extremely overwhelming. That's why practicing helps so much--the more times you do something, the more second-nature it becomes and the more confident you will feel!
Don't Stress
It will seem like it's all too much when you tackle something new, but just remember that everyone started out as a beginner like you. With patience and practice, you're sure to get it!



It's never too late to learn a new skill.
I had two degrees and seven years of work experience in an unrelated field when I began learning to code. I had this sort of mental block, like I had already put my time, and oh well, now I was stuck with that as my career for-ev-er. That was a big lie! It's never too late to learn something new.
You CAN do it.
My early attempts at learning to code were frustrating and led me to believe that I was incapable of learning because coding was so far over my head. That was another great big lie! I took a hard look at those around me who were living my dream and realized that they are not so different from me. If they can do it, I can do it, and so can you. So go do it!
Be kind to your mind.
Learning to code is like coding your brain, only your brain takes longer to process new information than your computer does! Be kind to your mind by not being hard on yourself when you do not initally understand something. Usually, once you sleep on it a night or two, it will begin to make sense. Be compassionate toward yourself, and support yourself in this process as you would do for your best friend. Allow yourself to fail, and then try again!



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before. Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening. This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process. You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
practice, Practice, PRACTICE!
The idea of coding your very first website is daunting, especially when you think about all the possible mistakes you can make along the way. Your very first website will not be perfect, neither will be your second, third one or even fifth one. You will make mistakes, be frustrated and spend hours figuring out how to make it beautifully responsive (why so many devices ???!!). But you will learn from every stage along the way and the key is to keep learning. Practice does not make perfect, it makes good developers. Keep coding with a smile Skillcrushers!



There are lots of resources for new coders!
There are tons and tons of resources online for new coders. My favorite is Code Newbies on Twitter.
You can become active with the group and people will respond to you and help you.
Also, there are lots of Slack channels that help new coders!

devolio-devchat
codecommunity
codenewbie
womenintech




"For the beginner, practice without effort is not practice."
			— Shunryu Suzuki
Confusion is not your enemy; it is your teacher. The more you struggle with confusion, the more painful it will be. When you let yourself walk away for a breath of fresh air, your mind will continue solving its problems in the background. When your mind is open it allows understanding to enter.
Keep reading. Keep practicing. Compare different ways of coding the same solution. And keep moving forward. When you feel overwhelmed look to experienced programmers for advice. Above all else, keep motivated. Your code, my code, all of our code is connecting the world in amazing ways. 



I've wanted to code for a couple of years.
I've worked at several different marketing and SEO agencies, but there was one common theme in all those jobs. I was working in social media and content management, but I wanted to be working with the developers!
But I've seen SO much age discrimination in the workforce, that I was afraid to even try learning to code. What was the point? I don't have a Computer Science background, and I'm in my late 40's. I was afraid it would be a major waste of time to even try.
That's "Rear Admiral Hopper" to you.
Then I started learning about all these code schools that opened programming up to everyone. And THEN I learned about an incredible woman. Rear Admiral Grace Hopper.
She was a non-traditional everything! And if she can break all the conventions in pursuit and furtherance of what she truly enjoyed and was so incredibly good at, then, my sisters, so can WE. 



Be Patient
When you start programming your first web app you are doing something that you have never done before. It's a new challenge and a new opportunity.
Be patient with yourself, this is exactly like learning a new language. YOu can't know everything all at once, it takes time to build up your learning... start with the baby steps. This may seem slow, but you will get better with practice.
Just like learning a new langauge, you have to learn the basics, understand how the language is structured, and then start adding in your basic words.



Confusion is your friend!
Make sure to take copious notes.
Save, save again. Rinse, repeat.
Suspended disbelief plays an important role.
Be sure you're focused on the task at hand and minimize any distractions.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
Eventually, the grashopper becomes Mr. Miyagi.




Practice, Practice, Practice
Reading books, articles and watching tutorials are great ways to learn more about a certain tech skill. However, if there's one thing I think everyone should spend more time doing its practicing. Getting in there and creating a project to show what you're learning not only helps all the information stick, but it also gives you experience. As an added bonus you'll even have some nice projects to show off. Lately I've been applying this in my own learning and it's showing great results. It makes me feel better about what I'm learning because I can actually complete small projects and feel a sense of accomplishment. It feels even better knowing I'm building my portfolio and improving my skills.


Don't Compare Yourself to Others
I think too many people compare themselves to others. This can have a negative affect on you. It can make you feel like you're not good enough or like you don't belong. So instead of falling into the trap of comparing yourself to others, I think you should compare yourself to yourself. Continue to focus on practicing your skills and only compare yourself to the former you and look at how far you've come. Look at everything you've learned and look at how close you are to achieving what it is that you actually want.





When you only have short times to work, have a clear goal of what you want to accomplish.
Always go back and comment your code, you can find errors or ways to improve your work.
If you don't understand something, google it. Someone before you didnt understand either.
Listen to podcast, read blogs, obsorb everything. It will all click someday.




Don't be timid!
Taking the first steps on the journey to learn how to code can be scary! But don't fret and, most importantly, don't be timid. Take the challenge by the horns and do your best.
Know your limits
Life will get in the way. Unless you are able to focus all of your energy on to this course, something will always get in the way. Getting sick, the kids/family, work, sleep, etc.
Don't push yourself to do the work just because you are supposed to. Unless you have a looming deadline, it is better to take a breather and work through the class at your own pace. Rushing will get you done with the class, but likely will leave your gained knowledge wanting.




Google will become your best friend.
When you come across an error and you can't figure out what it means, Google it. There's a good chance
			someone else has had the same issue and will have a solution. 
Try new Things
 If you see something cool on another site, look at the source code and try to duplicate and put your own spin on it
Get Involved
There are plenty of organizations out there, both local and online. If you can't find a local group in your area, take charge and start one.
Helpful Links

Code Newbies Check out their Podcast!
Ruby
Ruby Gems




Decide what you love and stop wasting time on what you don't!
I spent a lot of time trying to work with frameworks and languages I hated. Java is so clunky! I had resigned myself to a life of boaredom until I remembered how awesome and sexy Ruby was. Now that I am diving in head first to all things Ruby I've never been happier.
Hint, if you stay up until 4am to keep working on coding projects, you've found the language you LOVE!



Don't Panic!
When something doesn't work, don't panic. And, don't go crazy changing things, unless you are super confident you know where the problem resides. Take it slow and steady. Read the error logs. Repeat your steps. Most often, there is a mispelling, a missing character, or some other mis-type. 
Repeat. Redo. Recycle.
When you delve into an exercise or task. Read over the lesson or requirements. Really orient your brain on the subject. Perform the work. Cycle back through the lesson or requirements to ensure the expected outcome has been satisfied.



Just Give It A Go
You have nothing to loose so just jump on in and see where the rabbit hole takes you.
				And if all else fails just ask for help.
Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Check your Work
Computers are dumb and you are smart...but you will feel dumb if a teeny tiny mistake messes up your entire code!  Check, double check,
				and when all else fails, ask someone else to look over your code. They may catch what you missed...and even some things you didn't notice!
				Don't sweat it...typos happen!
Don't Expect Immediate Perfection
You're learning a new skill.  It may be totally different from anything you've ever done before.  You'll probably suck to start with.  So
				did most people who had no idea what they were doing.  But you know what?  Pretty soon it's going to click...you'll get it...and you'll know
				so much more than everyone else!
Mondays Suck for Coding
At least they do for me.
Don't Try to Force it
Coding after dinner is a slog.  Don't force it...that's how mistakes happen.



Don’t just copy/paste code from tutorial sites!
I learned more when I looked at the code of other developers and played around with it, trying to understand their approach. It takes longer, but it’s a much more effective learning experience.
Just build it!
Don’t worry about not having the complete skill set to finish the project. You’ll acquire it through the process and come across problems and solutions you didn’t even know existed. After a while, you’ll start looking back at your code and seeing how you can improve on it and introduce new and more advance technologies and frameworks.
Get used to writing clean, readable code!
This way, others can understand it, and when you come back to it 6 months later you won’t have to decipher it again. Clean code is also less prone to bugs and other issues.
Think, write, test, refactor, repeat!
Think before you start writing code – what are you trying to do? How will you know if it works? Test your code, and after optimizing – refactor. Many less experienced developers skip this critical step.
Keep it simple!
When starting out, don’t be afraid to choose a programming language that simplifies development at the expense of performance. While languages such as C/C++ will be an important part of your toolkit later on, your first programming language should be one that offers suitable abstraction, such as Python or Ruby, so you can learn faster and focus on understanding fundamental concepts.



Seek out the answers
There have been many occasions during my coding journey when I think of something I'd like to do as I work through a tutorial or add to a project, but don't quite remember how. Often, it's not something essential, so the easiest path would be to forget it and move on. Don't! That's the best learning opportunity you'll have. It's organic and meets an immediate need, so you're even more likely to remember the solution than if you'd encountered it in a generic tutorial. But only if you put in the time to seek out the answer, so get Googling!




Discipline
Learn time management
Spend time coding every day, but also balance it with other personal time.


Seek help when you need it
Google is your BFF.
Go to Meetups!
Ask friends for help :)




* Everyone Has to Start Start Somewhere *
You are going to be frustrated and want to throw your computer across the room. You are going to want to quit. You are going to feel like you will never understand what's happening.
We have all been there. Making mistakes, confusion, and broken code are how we learn. The truth is, you'll never stop learning as a programmer so I think it's best that you get comfortable with the experience of failing and trying over and over. And remember, we've all started somewhere. We've all had to practice the skills we've developed to get to where we are today, regardless of what they may be. And that applies to coding as well. Just imagine looking back on these experiences in two years. Who knows where you'll be?
* Immerse Yourself in Community Activities *
I have found the coding community to be immensely supportive. Most major cities have fantastic Meetup groups, workshops, hackathons and more, encouraging aspiring programmers and designers to come together. I have personally attended workshops for teaching women Ruby on Rails (RailsBridge & Rails Girls), and Meetups like Girl Develop It. Everyone who attends these meetings understands what it is like to be a newbie and they really want to help enthusiastic people learn. Plus, you might just make a friend or two.
* Search, Search, Search *
Stack Overflow the heck out of your questions. Google like a maniac. Read programming books and online resources like blogs. Informational interviews with interesting companies can also help you explore which skills you need to develop to be a viable candidate.
* Face the Tech Head-on *
Don't be afraid of technology or technologically-minded peeps. Sure you are going to come across those programmers or designers who seem crazy smart and amazing and you practically want to bow at their feet. But hey, don't compare yourself. You can get there too. Like I said before, this requires patience, diligence in the midst of failure, and curiosity.
* Take Time for Yourself *
This is an important tip that many people forget, especially when they start out. When you're first learning, it is easy to dive in headfirst and try to cram all the material you can into your mind for hours upon hours. But, as I personally know, this leads to boredom and lack of focus. Take things in chunks. Try to do a little bit of coding/design each day instead of several hours only once a week. The consistency and routine really pays off.
The other point of this blurb: know when to take breaks. Time away from the computer can work wonders, especially if you have hit that point where you are stumped and stuck. Like any other muscle, our brain needs rest and time to recuperate. Let yourself put the task away for the day and come back to it tomorrow. It is OK to not have it all figured out. A fresh perspective may be just what you need.


Hi my name is Chris and I have some advice for you!

Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion should be used as a motivator!
Most of us have not done much in this realm of programming. This is all new to us. So if you are not confused, maybe you should consider moving beyond this. Otherwise, remember that learning to code is a lot like a baby learning to walk.
Like a baby... You get yourself up and moving then all of a sudden you come crashing down. Confused and a little mad... you look around in desperation. Then you pull yourself together, after a little encouragement, you pull yourself up and try again! Then once you have the basics down, you realize there are so many new things that you still have to learn! No worries! Soon you and me will become totally capable of standing on our own two feet while doing all kinds of amazing things in the coding world!
Google it! That's what developers do!
Programming is such a fast-changing field. A senior developer may have a master's degree in computer science and has been working in his job for 20 years, but if he doesn't work with all the latest changes in coding, he will be lost. Even senior developers need help occassionally!
Don't be afraid to ask for help but google it first! Most likely, the question has been asked before!



Getting Started Is The Hardest Part
Learning Ruby (or any other programming language) is a skill that gets easier over time. At first, everything might seem foreign and confusing, but you should know that just by sticking with it, it will gradually start to make sense. Certain parts might be more challenging than others, but the only sure way to fail at understanding is to give up.
If you have a Mac, your installation will be easier!
I am primarily a Windows guy, but trying to install Ruby and Rails on my Windows box was a nightmare. I had a Macbook that I mostly used for DJ-ing, and after about two whole days of unsuccessfully trying to get Rails and Ruby running on Windows, I switched over to the Mac and all my problems were solved, I had it up and running in about 30 minutes.
This is not a religious Mac testimonial; I still consider myself a Windows guy.  I just wish I had started my Ruby / Rails tutorials on the Mac first, as it would have saved me several weeks (the 2 days of painful installation attempts, plus another few weeks of procrastination). 
Make some progress EVERY day.
Some days I barely have enough time and energy to do anything. But if I put it off, I fall behind easily. So I try to do a little coding every single day. On the days that I am not able to code, I try to at least read about coding.  I bought several Ruby books on Amazon so I can still feel like I am learning something on my breaks at work (where wi-fi is unavailable because I currently work outside the tech sector and they apparently dont want us hogging their bandwidth).




Do you remember elementary school?
Back then, you learned many different things everyday. Your teacher drilled multiplication tables, long division, and fractions at you nonstop. You read many works of fiction and had to report back on the author's purpose and theme, descriptions of main characters and plot details. You memorized state capitals and key history events. Then you practiced a musical interest, played sports after school. Whew! Your were just a kid, and you plowed through the daily learning like a champ.
Learning is your friend, then and now!
At times, you loved the learning process. "Now I can read!" "I can play this song on the recorder!" "I know how much money I need to buy the candy I want!" When you experienced learning success, you gained confidence and and felt like a bigger kid. You could do more in your world and you understood it better.
Yet there were times when the learning didn't come to you easily. You got stuck. Things didn't make sense. You were frustrated. You wanted to give up. Yet, there was a goal in sight, a desire to grow up and be able to be independent. So you hunkered down, asked for help, and were patient with yourself. And, eventually, you figured it out!
A little Patience, Yeah, Yeah!
When you learn to code, some things will seem to make sense and other things won't. You have to have a space here, but not there. You forget a tag, a semicolon, or parenthesis and the whole code won't work. You can't figure out your errors. It all looks unfamiliar. You move on two a new concept and you forget something you learned two weeks ago! Ahh! You can get totally overwhelmed, give up, and throw your computer our the window! Or you can take a few deep breaths, take a break outside, and resolve to become way more patient with yourself. 
Go back to the problem, the error message, or just the funny looking code with a renewed desire to solve the puzzle. Believe in the process, even if it takes you down roads of self doubt. Just a little more patience with yourself, and suddenly you may see how close you actually are to the finish line. 
Water your seeds for creativity.
Technology innovates itself constantly. You've got to turn on your inner innovator to keep up! Push yourself towards divergent thinking so that you can come up with many ideas and solutions to problems. Collaborate with others and bounce your ideas off of each other. Be inspired by what other people create.
Give yourself permission to nurture your creative side. Daydream. Look out the window every so often. Write in your journal. Let your mind continue to work when it's not officially "working". Your downtime may result in a huge breakthrough during your work time!



1. Get some sleep
It always makes more sense in the morning.
2. Be careful copying and pasting text.
Nothing is worse than a funky whitespace character.
			3. Check your punctuation
Oh, that was supposed to be a semicolon?
4. Someone has had this problem before.
Ask Google for help, and you shall receive.




#1 Use your resources!
The amazingly fantastic Skillcrush team has assembled a full stack of super helpful cheatsheets on all the essential topics. Think of them collectively as your recipe book for coding awesome sauce.
You will encounter errors at some point. Don't despair. Look first to the cheatsheets, because chances are really good the answer lies within those pages. If you do not find the solution there, get thee to the MightyBell and read (really read!) what your mates have asked and commented about the challenge. The law of averages says someone else has felt your pain - and overcome it!
#2 Use your noodle!
Usually the right solution requires a little mental elbow grease. You will need to think through the problem you're trying to solve. It's highly probably you may try a few scripts that fail to run before you hit the one that works. Be patient and persevere!
If coding were just all copy and paste, we'd have gymnasiums full of chimps pumping out gems like Harry Winston.
#3 Use the Force!
Aka, the Google. If you've thought and thought like an owl (because all owls think a lot), consulted your cheatsheets, and still come up with nil, crowdsource a solution with a simple search. Between Stack Overflow, and a google different blogs, you're bound to run smack bang into the answer which you seek.
Just remember, like a good Jedi, to "always pass on what you have learned."
 I don't want to 'string' it out, so there you have it, Rubkies. Your short and sweet daily affirmations to git you through the early assignments. Good luck and good speed.



Watch and Read all different kinds of tutorials!
Even if it's on a skill you think you have already conquered. Sometimes someone else can explain a topic that makes
			you think about it in a completely different way or allows you to understand it a little bit better. Use all of the resources you
			can get your hands on! 

Don't give up!
There have been plenty of times where I wanted to throw in the towel and pretend like I had never given this
			coding thing a shot. But just when I'm about to give up, I somehow manage to find the solution to whichever problem I was having.
		  You just have to keep trying, practicing, and learning. Your patience and persistence will
		 	pay off!



If you have decided you want to pursue something, do it.
Once you know what you want, commit!
You could spend all week, all year, or the rest of your life being wishy-washy if you never make that choice.
Some people are never blessed with a passion, something they really enjoy.
Once you find your passion, follow your dream!
Don't be afraid of hard work. And don't be afraid of failure.
If you are afraid, then don't let the fear make your decisions for you.
It doesn't help you to be on the right track if you never move forward!
Take the leap!



Confusion is your friend!
Ask questions and search for your own answers. Sometimes, it sticks better if you do the legwork yourself.
Always, always, always type the code out yourself.
There is something to be said about the way that the code becomes second nature. Even if you're not sure about it, your fingers will be.



It's okay that you know virtually nothing! 
You will constantly feel overwhelmed. You will feel you can't possibly ever 
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Don't take the easy way out
Often, when you're taking a class, you have an available hint, or answer available to you. It's important to try as hard as you can to figure out the answer on your own, unless you're absolutely stuck. Even if it takes significantly more time, you'll have helped solidify that knowledge in your head much better than if you looked for the answer
Don't be afraid to test buggy code
Sometimes, I've stumbled on the correct answer simply by applying a little bit of brute force. Try typing things differently and see what happens. Try paths that you don't think will work. See if you can get DIFFERENT errors to occur. Each failed step is closer to the ACTUAL answer



Shop around but stick with one language at the beginning
It is crazy out there! When starting to program things are going to become overwhelming fast. Languages, libraries, frameworks, apps, etc... Which one is which, and which should your care about?
This is where time and a course or codecamp comes in. THey help your make sense and focus on what it is out there.
Especially when it comes to JavaScript! There is so much emphasis behind this language that it is overwhelming to understand what is what.
Do yourself a favor and don't start learning coding with JavaScript. Choose a friendlier and better teaching language like Ruby or Python.



Some days you just aren't feeling it.
Take today, for instance.

			I really don't have anything useful to suggest at the moment.
			
This is a fairly horrible set of styles
But I really can't be bothered to fix it right now.
It's definitely different... Git will notice, and that's really the point.



Coding Takes Patience!
Learning to code takes a lot of time and patience.
So celebrate the small accomplishments.




Read everything, everywhere!
When you first start, you're not going to understand the majority of what you see. But getting used to the "tech speak" terms, and the general way poeople interact is what you're hoping for.  The code understanding will come and pretty soon you'll be contributing to stackoverflow, not just reading!
Practice, practice, practice
Think of 15 ideas for cool things you'd like to do, and just practice them. Once you get one working, tweak it until it's pretty, then tweak it again until the code is concise. Then try something new. Pretty soon you'll have a cool little bundle of small projects that really show your development over time.
Ask the dumb questions
Eventually you'll run into a project that no matter what you do, drives you into the hair-tearing-out, throwing things stage. So ask for help! It's not like you failed, it's like you're working on a real development team and you're having an outsider review your code. Sometimes being too close is the problem. And don't hold onto your supposed "failure". Fix the code and move on.




Search for Alternate Explanations!
If you're new to coding, expect broken code frequently. Oftentimes, your code and process are perfect if not for a simple syntax error... a missing colon or quotation mark, for example.
However, just as often, your code or process are simply incorrect. You've misunderstood the instructions or added steps out of order and cannot spot what's wrong. With Google, and descriptive search terms, you'll likely find the solution at forums or blogs explained using language or examples that clarify the process.
Find and Save the BEST References!
When fixing code, you'll Google frequently to find solutions and occasionally find that "one source" that seems to explain your dilemma in just the right way. Some of the best resources are others who struggled at the start and now post their version of explaining code.
If the perfect solution is found on a site that appears to "speak your language", save that reference! Bookmark it. Create a spreadsheet. Whatever works for you.
Most likely, that random source you stumbled onto will offer future solutions to other code dilemmas written in a way (or using examples) that will be similarly easy for YOU to understand. Save yourself time and check out that site first nest time.



Take it one step at a time
When you begin anything new and are excited about it you tend to want to rush ahead. The problem with this is that you often skip important steps that you need to follow in order to get things right.
This is not always a bad thing as you will learn along the way but when you are starting out it is can be a big deal. Take it easy and get your bearings straight before taking any major leaps.
Don't get upset if it doesn't work the first time
I believe that this is very much a trial and error area of expertise. You will sometimes get things right the first time, but don't sweat it if you missed something. Just go back and keep trying until you can work it out. This is part of the fun.
You get to become a code sleuth, hunting down the cuplrit of your frustration.
What ever you do, just don't give up. This is a great experience and wonderful knowledge to have. It will hopefull take you to great new levels in your life.



Ask for help
When you get stuck and can't move on, your Skillcrush instructors are there to help you. Your questions get answered in no time.  Ask questions in the MightyBell circles. Your fellow students may be struggling with the same problem.  Maybe someone else has already solved it, and can give you a hand. You'll never know unless you ask.  Or just 
Be patient and compassionate with yourself!
When learning to code as well as programming, I had no idea of what it all entails, what it all meant! Everything was brand new to me.  Sometimes, I would become so frustrated with myself because I felt like it wasn't clicking and just wanted to give up. But I managed to keep pushing through.
In order to survive, you have to learn how to be patience with yourself.  Learning to relax, laugh at yourself, and not getting overly excited can get you through stressful times.  So just be compassionate with yourself because at the end of the day you need you will understand what you are doing. So, take your time, learn the concepts, and ask plenty of questions.
 Before you realize it everything will not be a blur and things will finally come together.
			Use on-line resources
Use online resources like w3schools.com and stackoverflow.com.  They cover just about every aspect of HTML and CSS, and they provide a practice area where you can try things yourself and see immediate results.  You can search for a term and find the reference page for it quickly and easily.
Don't give up!
Never, never, never give up even though learning to code is challenging.  It's like learning a new language.  Just stick to it, and you'll find it gets easier with time.
Practice, practice, Practice!!!
When you are learning a new technology or programming language there is never enough practice.  Practice when you are learning, practice for understanding, and practice to see if things could be done more efficiently.  The more you practice, it aids in your knowledge of understanding exactly what is happening and why its happening.
Finally, always take  mini breaks, and come back refreshed and energized! You'll be feeling great all day!  
Be Good to Yourself!



You can do it!
It's okay to feel overwhelmed sometimes--learning to code is really difficult!
But there's a whole wide internet out there and the SkillCrush community is super great so don't be afraid to ask for help!
Make sure you take the time to work through the exercises so that you enforce the concepts, but if you're really stuck on something, take a break! Sometimes what you really need is to walk away from a difficult problem for a while and do something else--take a walk, do the dishes, watch a movie, whatever. When you come back, your brain will have had time to relax. I find that if I'm stuck and I take a break for a while and do something completely unrelated, usually the answer comes to me as soon as I've had enough time off from thinking about the problem.
You can learn to code. I believe in you!
Just because you're not "naturally talented" at something doesn't mean you can't become talented. Here's a secret: "natural talent" is kind of a myth. The reason people seem naturally talented at something is because they work hard at it. Why don't they look like it's hard work, you ask? Simple: they find a way to make it interesting and fun. If you're struggling to care about a particular project, maybe it's time to let it go and try something else. Sometimes taking a break can renew your interest.



Don't take my word for it.
Don't just copy the assignments you're given in class. Think of ways you can tweak the code you encounter, and then, most importantly, try them out.
Seriously, the best way to learn to program is to write programs. Then write some more programs. And then more programs. I think you see where this is going.
Let's talk about debugging.
Inevitably you will write code that doesn't do what you expect it to do. Very early on, problems can usually be explained by simple syntax errors, but what about when that's not the case?
The good news is that you've probably progressed from syntax errors to logic errors. The bad news is that logic errors are harder to detect and fix.
Usually the best thing to do is to start sprinkling output statements throughout your code. Often certain pieces of code hinge on variables having certain values. Chances are that if you're having problems, those values aren't what you think they are. Print them out so you can find this out for yourself.
It turns out this is a recognized technique with a name. It's called debugging by printf. Although printf is a C term and not a Ruby term, I hear developers in a wide variety of languages call it that.
Sometimes you will hear people sneer at this technique. Don't listen to them. Literally every person I know who writes code for a living does this at least occasionally. Sure, eventually you'll want to be comfortable with more sophisticated debuggers, but don't worry about it for now. I literally used this technique with a student earlier today, and it helped him narrow the scope of his problem.
When describing debugging to someone without a technical background, he replied, "Oh, kind of like a detective." That's a great comparison. Like detectives, we often have to solve problems of unknown origin based on what's in front of us. Enjoy the ride!



Making mistakes is how you learn!
It's easy to copy and paste example code and get your new script to run first time; but have you really learnt anything? Always have a go at completing a challenge from scratch first of all.  Run and re-run and welcome any error messages that you encounter along the way
Error messages are you friend, don't think of them as marks of failure but as guidance on where and how to improve your code.  The more you see the quicker you'll recognise similar issues in the future and eventually learn how to do things right first time!
How do you eat an elephant?  Well, one bite at a time of course!
Learning anything new can seem daunting, especially something as complex as a new programming language.
However, in the same way that a baby learns to talk (or walk), start one step at a time.  Break your coding challenge down into small tasks, get one bit working, then the next, then the next...
Before you know it you'll be doing the coding equivalent of that baby reading a story aloud or running around a track and the process of getting there will be worth it



Code every day!
Even if you don't know what you're coding. Just find a tutorial and
      follow it. After about ten of them you'll begin to recognize patterns and
      remember them. You'll eventually realize that everytime you create a new
      view you have to update the routes. Or Adding basic logic to your
      models.
I wrote an article about this called "Gaining Context: Hack Your
       Learning" on my blog, Rempel on Rails



You'll be granddddd
HTML & CSS seem pretty straightforward to begin with, once you've studied them a bit... JavaScript ramps things up a notch - a big notch - you won't have a clue what's going on for a while.
Just keep at it - you'll get it, I promise.
Believe me.
Honestly, it might seem overwhelming, but the satisfaction you get when you write your FizzBuzz and get it to work is class.
You can do it lads - enjoy it.



Don't let the imposter syndrome take over!
When you start learning programming, you will feel like a super human. Suddenly you have access to all this information not viasble to most human beings. However, rememeber that even though the first project might be overwhelming, you've learned a lot. 
Don't compare yourself to other develpers. You might not have the same experience but you do have knowledge to crack the probelms. You will find your way around sooner or later...Just don't give up when things get hard.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Don't get hung up on which language to learn.
No matter which programming language you choose, in an introductory or beginner course, you're going to learn the basic concepts of programming. Those are the essential things, the concepts that you'll use in any and every language.
The rest is details. Once you understand things like looping, conditionals, arrays, functions, etc., picking up a new language is largely a matter of learning the particular syntax of it and how these concepts are implemented.
Practice consistently.
Work on a schedule that suits you and that works with the rest of you activities - maybe every day isn't feasible, but a few times a week, or longer study sessions once a week on a day off from work. Leaving several weeks or even months between study sessions will make it hard to get back into it if what you've already learned is fading from your memory. Keep it fresh, and you can call it up more easily when working on a project.
There are tons of resources out there to learn programming, many of them free, so if you get stuck with one, or just want a little bit of extra practice or a different approach, give another one a try.



Mistakes are the best teacher!
Attempting to learn something new, after being considered an "expert" in a different field is an uncomfortable position to be in to say the least. I had to repeat the advice I would give to new employees to myself:

It's going to take several months before this will begin to click for you.
Don't be afraid to mess up. You'll learn the most from those experiences.
And...there are no stupid questions. Usually those with inquiring minds will learn and gain confidence the fastest.
				
So...do not be afraid. You can do this!
Skillcrush will not make you an expert, but it does open the door to a new skillset. You'll have to determine how to best utilize it.
Will you dive deeper and find (or create) some small projects to gain confidence and make your way to a freelance extrordinaire? Will you utilize this base knowledge to better interact with your technical collegues...impress your boss and get a raise? 
There's no "right answer" to how you allow this to change your life. You've already took the hardest step by getting started.



The Best Advice My Dad Ever Gave Me
My father, now in his 78th year, is an early adopter. When I was in college in the mid-80s, 
			he begged me to try using a personal computer. I clung to my electric Smith-Corona with a death grip. 
			But by the time I was working on my Master's thesis in the late 80s, I agreed to give it a whirl.
			This was the age of DOS.
My father was my own personal tech support... and he still is! And here is his excellent advice: 
			When the problem seems insurmountable, and you know you have tried everything, but it just isn't working, do the following:

Shut down the computer.
Make a martini.
Drink the martini and get a good night's sleep.
Restart your computer in the morning.
This works almost every time!!!

What I Learned From Skillcrush
Of course I can do it! I'm Rosie the Riveter! I'm Wonder Woman! 
			(Actually, I'm a short Jewish girl from New Jersey, but Terminal doesn't know that.)
What You Should Know About Me
I could not for the life of me figure out how to change the font in the header or footer of this page.



Practice Practice Practice

When learning to code you will have to plan to spend lots of time practicing. The programming skill gets better with lots of practice. As a matter of fact it requires more time to practice than actually solving difficult problems. 
If you are starting out then I recommend identifying some time to spend to practice coding each day for a few months before you will actually feel comfortable programming.

Challenge Self

You will have plenty of opportunities to challeng yourself when you are learning to program.  Don't just do the exercises to complete them Only, challenge yourself.
It is when we challene ourselves that we really learn.  Stretch yourself towards the personal gpals you may have every day.




Coding is for everyone!
Honestly, this is the best thing I've ever heard. Whether you are a mother, a doctor, a retired teacher, whoever you are and no matter what your background is, know one thing, YOU can code.
The only two things you need to start to code are motivation and perseverance. You don't need to have aced your maths in school or have a degree in computer science. Just believe in yourself and practice.



Always listen to your 3-year old
When your 3-year tells you to stop working because you've been working too long then stop. When he tells you to pick him up, pick him up. 
If he wants to stay home from daycare because he doesn't want to miss you all day, let him.
There are many more where that came from.



College is for the Non-Thinker!
If you are looking for a career in technology, more specifically in programming/coding, the internet is the #1 learning resource. College has become a status symbol, a right of passage, rather than an institution of learning.
Coding/Programming is a skill or trade that is better understood in practice than in theory. Theory should be taught after getting your hands dirty.
Problem solving is the key to success!
I think of programming as solving small problems which lead to an even bigger solution, to an even bigger problem.
My point is that coding can be thought of solving a bunch of small problems to solve the greater picture.
There is a light entry barrier and limitless pinacles to be reached in the world of programming. Passion for learning new technologies is the key to succes.



Test in al browsers!
When you are writing you html code make sure you open all browsers and check that the look and feel is the same in all of them. The first time I created my first web site I was entirely focused on one browser thinking that it would look the same for the others.
When I send the link to a friend to see my awesome work he came back to me saying....What the hell? He asked if it was a joke, that everything was all over the place. I thought he was joking because it looked great in the browser I was using. Then he told me he was using a different one. When I opened the page in that browser...I passed out.
Looping around
When using loops make sure that it is going to exit at some point. CHeck the boolean condition, or the the index that increases or decreseas to make sure that at some point reaches the condition. Otherwise you might find your self having to force quitting the program you are using to code since it goes complete unresponsive



Advice I wish I'd gotten!
Some things will make sense while you are learning them but get all out of whack when you actually try to implement them.  You may think you are logical but you will quickly begin to question this belief!  I think that's normal.
Some things will go more smoothly, but then just when you think you are getting somewhere you hit a roadblock.  Don't give in to the frustration!
Keep reminding yourself to suspend disbelief.
There is nothing quite like the feeling when things come together and work as they should.  This should keep you going, since it is usually some small, minor thing keeping you from success. 
Get up and walk around, take a break and then come back to your computer.  It will give you fresh perspective.
Remember, if this was easy, everyone would know how to do it.  Don't get discouraged! 



Don't be afraid to make mistakes!
When you first start out, and probably from then on, coding is hard. The smallest things can make you break your code. But the good news is that you get used to this and you start to look for the small things. You start to tune in to the code and realize why that space mattered or why that tiny typo made that huge difference. So don't be afraid to make a mistake. It's how you learn.
Because when you make a mistake in code, eventually you will have to find it, or else your code won't work.
Give yourself a breather when it's all going to hell
When you are really stuck and you just can't find out what you are doing wrong, or maybe you know the exact problem but just can't figure out how to get it to do what you want, take a break. Very often, if you are in something for a long time and you can't figure it out, you stop thinking rationally about it and fail to see the solution. Move onto something else for a while. Give your brain a bit of time to relax, and then get back to it. A fresh perspective is always more effective.
Question everything, even if you think you sound dumb
When you are starting to learn you might have the tendency to copy the code or just follow the instructions, without thinking or asking questions. You should never be ashamed to ask a question, whether that is to other developers or to Google. Think about it, if you start out your coding journey by questioning every piece of code you learn, you will end up with a much better understanding of what that code does. And that will help you in the long run.



Learn your BASH keyboard shortcuts
You only need to memorize a few to make a noticeable difference. Ctrl-A, Ctrl-W, and Alt-. are a good start.
Read blogs
There is a ton of great material out there, and reading about why people prefer X vs Y will give you a greater understanding of what X and Y are in the first place.

Step away if you need to
Sometimes you'll be working on the same problem for hours and you just can't figure out what the issue is. Take a breather and come back, often the distance will be enough to clear your head and see the problem in a new way!


Learning is supposed to be a bit uncomfortable.
If you are comfortable doing it, you already know how. 
Just keep moving forward.  Things will make more sense in time.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



You can learn this—I promise
If you don't have a traditional technical background, you may feel like hard tech is Beyond Your Understanding. It's not. If you could learn math in high school, you can learn the basic bits and bobs of Python or Ruby or HTML or whatever now. The key is to find someone who actually wants to teach you, and won't make you feel dumb when you're learning.
The image came from here.	
 
Mistakes, backtracking, and stalling out are good signs
Redefine these words for yourself right now: failure and progress. 
			Movement of all kinds is progress: forward, back, 
			up, down, in and out of understanding. Every maneuver is a chance
			to learn so don't get stuck in a self pitying rut when things
			aren't going your way - just keep moving! 
						
		Be stubborn, but don't be a masochist
It's important to mobilize some grit because you will run
			into a concept or a bug in your code that will send you through
			the wringer. An adamant refusal to admit defeat will push you to 
			untangling your problem, but don't force yourself to work through
			this all in one sitting.
Change your scenery, get a cup of tea, focus your mind on another 
			task or thought completely. A fresh perspective often helps us 
			to see what was hiding in front of us all along.
Drop the stopwatch, this isn't a race
Whether you've been learning and writing code for years or minutes,
			don't take the joy out of it by putting a timestamp on it. Watching
			the clock is an unnecessary pressure, especially when you're 
			first learning. Take your time! Speed and efficiency will be a product 
			of patience and diligence; you might as well enjoy the journey.
 
© Copyright Skillcrush 2014.  

Pick a Language
After you pick a language, learn everything you can about that language. By the end of your self-taught learning you should be close to an expert in that language. Things may seem extremley confusing at first but you cant let that deter you.
Build, Build, Build
This is probably the most important tip that I can give you. Building small projects will not only help you with mastering the language, but it will also give you projects that you can showcase to futurue employers.
Enjoy the "Journey"
Learning how to code is going to be one of the most challenging and and enjoyable experiences that you will go through in your life. You can learn a lot of valuable life lessons from learning how to cdoe.



Be in the here and now!
If your here embrace the moment. You are a learner, thinker, a do'er!  The world is at your finger tips and Google is your closest friend!
The lure of distance and the difficult is deceptive. The great oppurtunity is where you are. ~ John Burroughs 
Find opportunity where you are.
Some concepts may come easy to you and others will be harder to grasp.  While learning to program try thinking "outside of the box". Embrace every challenge and you will rise above. We create our own opportunities!
The reward of learning to code is that you can change the world. You can shape the future with the skills you are learning. Share your path and your story!
Wishing you the best of luck in this journey! The best has yet to come!



Don't get discouraged!
When you start programming, you might get frustrated when your code does not work. Don't get discouraged! Look at your error messages and go from there.
Take a break!
Sometimes you will feel like you are not getting anywhere with your code. That means it's time to take a break. Come back to it with fresh eyes and you'll have more energy to solve the challenge.



Don't give up.
You might have to start over. You might have to take a break. You might have to indulge in some therapeautic brick-hurling. That's OK. Just don't give up.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Getting over your Imposter Syndrome
The first rule of Imposter Syndrome Club is that you're not good enough to be in it. Imposter Syndrome, or Fraud Syndrome, is a psychological phenomenon in which people are unable to internalize their accomplishments. Many new programmers tend to fall into the Imposter Syndrome state of mind when they first start out. They may say to themselves, “What are you doing here? What do you think you’re doing? You’re going to be found out!"
Overcoming Imposter Syndrome requires self-acceptance:  you're code is never going to be perfet when you're first starting out. You don’t have to attain perfection or mastery to be worthy of the success you’ve achieved or any milestones you've hit along the way.
It’s not about lowering the bar, it’s about resetting it to a realistic level that doesn’t leave you forever striving and feeling inadequate. You don’t have to be Linus Torvalds to be a valuable asset to your team and to those around you.  Nor do you have to attain perfection to share your code with the world.



Get real projects to practice on!
Even if you feel you don't know enough to create something real, go for it! That would be the only way you will really process all the new amount of information you are learning.
While doing this, be also preper to have lots of questions and be very very slow, and this is ok. There will always be the next project that will show how much you have improved from the previous one.



Coffee is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Coffee, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is technology and that it's time for you to dig deeper and keep going because victory awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Keep your brain young by learning new skills!
Learning new skills at any age creates new brain synapses, your brain grows and you get smarter! The older you are the harder it gets, but constantly learning new skills keeps your brain sharp...and it gets easier with practice.
Any new language is difficult at first.
I've "learned" a few other programming languages, but never really used them. Ruby is by far the easist language! It has real words that make sense: push, pull, clone.
We also have the amazing benefit of lots of code, already stressed over, that is available to anyone...for free! How sweet is that? Someone else did the hard work and I get to incorporate it into my code.
Learning anything new takes time, practice and perserverance. If you can't figure something out, don't keep circling; walk away and do something entirely different. Our brains are amazing. They keep working on a problem even when we aren't consciously thinking about it. You'll be surprised how much clearer your thinking is when you return to the problem.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Probably the most important piece of advice I can give you to start out is this: START WITH MAC! It's just so much easier and more efficient than Windows, primarily because programming is geared for Mac.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits. I promise, you will get there. Don't give up, when something doesn't work look at it again, there is a way to get it to work and keep an open mind because sometimes you may have to do something in a different way or integrate different operations to accomplish what you are trying to do.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!

According to Skillcrush, "Confusion is your friend." If this is true, confusion and I are BFFs! So here's my advice - don't let confusion stop you. Keep forging ahead, Google what you don't understand, practice and practice some more, look for programs that fit your needs and inspire you on your learning journey, share with others and don't be afraid to ask those "stupid" questions.


And slowly (or at least for me it was slow) confusion will start to morph into those "aha" moments where little bits and pieces of knowledge come together, making you feel like you have the power to rule the world!!...Okay, that escalated quickly...maybe not rule the world but the power that is knowledge can rock your world! 



Going back to Skillcrush advice...
"Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits."


Remember, my friend...

We are all human, none of us is perfect. We all learn at different speeds and in different ways. Some days of learning are awesome and you are on the top of the world, while other days...well, you feel pretty good knowing how to turn the computer on.

When you have one of those days...Remember:


You're learning a new language,and mastering that language probably won't happen in one day or even one week...so give yourself a break.
Breathe...you will figure out the padding and margins on the stupid box model!
Get up, get away and take a walk...before you throw that computer out the window




 You're not alone in this learning journey, so seek out others for advice... or an empathetic ear to whine into.
Some days are going to be like this...remember tomorrow is a new day.
Be thankful for the opportunity to learn... many people aren't given that opportunity to broaden their horizons.




 Remember..."Confusion is your friend!"



When I first started coding, I was excited about learning a new language and all the happenings behind computer programs and applications. At the same time, I felt somewhat nervous about making mistakes that totally mess up programs.
There were times I was frustrated with coding. I learned that I should not be afraid to ask if I am do not understand the methods or how to code a program with Ruby.
I should also be consistent about learning to code, even if I think I cannot make time. I resolve to learn coding regularly and not be sporadic about when to learn. I will make a point to learn every day, even if it just a little.
Remember, practice, practice, practice! If it becomes difficult, keep trying until the code works. It never hurts to go back and review the methods. In fact, I encourage it because if you don't use it, you lose it.
After all your hard work into making your code work, celebrate. You deserve a cookie (or more or any other favorite treat), hence my site Cookies and Coding!




"



Don't panic if you don't immediately 'get' something, we comprehend ideas and concepts only when we're ready to


"
                        



Have you ever tried to learn anything before? Then chances are you have beat yourself up about not being able to learn something as fast as your peers do, or as fast as you feel you should. I urge you, the next time you don't immediately 'get' something, don't waste any time or energy on self-doubt, and instead work on filling the knowledge gaps in your  foundation. Your brain is capable of learning almost anything; you just have to nurture it in the right way!




"



Take advantage of every learning opportunity


"
                        



Sometimes you just want to get the work done, sign off, and head to the pub. I get it. But on occasions where you find yourself with a bit of time up your sleave I encourage you to break and unbreak your code, research best practices or alternative ways of doing things, heck do anything! You'll never find a better opportunity to learn something than whilst working on a real project. You'll thank yourself later.




"



Code every day


"
                        



This is the most common piece of advice I hear from web developers. After 1.5 months of intensively learning/practicing code, I can confirm that there's something to be said for immersion! You don't have to spend so much time picking up where you left off, things that you've learnt tend to be more fresh in your mind, and most importantly you build up momentum in your coding endeavours so before long you feel unstoppable!




Think like a programmer!
Easier said than done, right? The thing is that programming languages are languages just like any other (i.e. Spanish, English, bad-English, bad-Spanish, grammatically-incorrect-Russian, pig-latin, etc.).  You have to practice it everyday in order to get the hang of it.
Try to learn some math, if you're not already math inclined.  I am not what you would call terrifyingly mathmatical, but a couple of classes at the community college may not hurt as bad as you might think.
Changing the way you think is hard
When you are learning a new technology, you've got to do this.  Fortunately, the solution is a simple one, and that's practice.
Read books, too.  Learning someone else's method for doing what they do can only help.  You'll start to incorporate little tid-bits of advice and eventually you'll be programming in your sleep, actually have dreams about programming in your sleep.
It's can be a long process, but I think you can do it.



Learning How to Code is Hard!
Seriously, it's damn hard.
The Imposter Syndrome is Real.
I'm not kidding.
Get over it.




Deciding How to Learn
Try not to spend too much time trying to pick which courses or classes or videos or whatever you're going to do. Just start! You'll figure out what works best for you with time.
There are a million coding tutorials, schools and courses out there. I got stuck trying to find the "best" one until I realized it was hindering my actual learning. As in, I was spending all my time trying researching and not actually making a the career change I wanted. Make an educated guess and dive in! Coding is awesome and the sooner you get started the better.


Choosing What Language to Learn
I also spent a lot of time trying to figure out what was the "best" language to learn. Or thinking I could learn all of them. Or trying to pick the one that could make me the most money. I would tell past me to "take a bite" of all of them and see which one tastes the best, then focus on that one and get really good at that one. There's so much coding to be done that you really can make it with the thing that speaks to you.
That being said, I'd also recommend starting with a strong knowledge of HTML and CSS. They are the foundation of the web. I know people who glossed over them thinking they were not advanced enough. I've been told in interviews that knowing the CSS "box model" (not a complex concept) has put me ahead of other who didn't spend the time on it.


You'll Never Know Everything and Neither Will Anyone Else!
This is actually awesome! If you love learning, then this is the field for you. Never be intimiated just because you don't know something. Everyone is learning constantly. Things are evolving so quickly that it doesn't matter if you don't know it. Google is everybody's friend, from novice to seasoned "expert".
In fact, I had to use the browser Inspect tool while making this advice column! Don't let not knowing everything get in your way! You can do this!




Stay organized
Sloppy code is harder to debug and harder for other people to read. Use line spaces and indentations in a uniform way.
You might not get it the first time.
Just like in learning a spoken language, sometimes we have to hear or see things multiple times for them to sink in. Give it time, and eventually you'll have that A-ha! momement.



Keep a notebook!
This can be an electronic document or an actual notebook. I like to have my little book close to write
				little notes to myself. Maybe its a reminder to look something up later or simply a line of code you want
				 to remember. You don't have to write everything down. just what you think you will want later.
Just keep coming back to it!
Sometimes your code just is not right. You will want to walk away and never look at it again. Often if
				you take a break and come back you can figure it out, or the computer will let go of past data and it
				will all just work.
Most important
Don't give up!



Never, Never Give Up
The folks who make it look easy? It was once hard for them, too. In other words, those who are wildy successful never gave up when things seemed ridiculously confusing or terribly challenging. Those who succeed are not necessarily the smartest (although those people exist, too!), but they are the ones who never wavered from their goals, even when they felt like quitting.
Trust the experienced ones.
I cannot tell you how many times I have heard that programming doesn't make any sense at first, to practice, practice, practice, or to find a community. Don't brush off advice from experienced programmers! They've been in our shoes before, it'd be a shame to ignore their advice. 
Be Patient
Be patient with yourself and be patient with the process. If you want to be a computer programmer, you will. (You have to want it, though!) If you don't udnerstand something right away, that's okay. Leave it alone for a bit, take a walk, then come back to it. Repeat this process until you do understand it. And be proud of yourself when you understand something new, even the small things.
Stop comparing!
Don't compare yourself to anyone else. It doesn't matter if you are not as advanced as your classmate, your friend, or your coworker. What matters is that you are constantly improving, learning, and putting in the effort. 
Find Balance, Get Excited, Create things
Okay, so that was three pieces of advice rolled into one! But, to keep it short and sweet: Don't code ALL day; balance is important for our sanity. When you're feeling defeated (etc.), do something to excite you! Remind yourself why you started this journey. Lastly, create things. Sure, read books, do assginments, and undestand concepts...But create something! Many things! This is what makes it fun. A webiste, a game, a weather app...whatever, just do it. This builds your confidence and makes programming even more fun. 



How to learn coding

				1. Practice - Coding is like math. If you do not pratice, you will forget things soon.
			

				2. Change view - Did this ever happen to you, when a person explains something to you in a certain way, you do not understand anything and later when someone else explains it to you in a diiferent way, you understand it. Coding is like that. When you do not understand something, try to understand it from someone / somewhere else.
				

					while (coding == 'do not get it') {	
						    look_for_a_different_answer();	
					}
				


				3. Try things - Try to learn different tools or technology. Knowing how to cook food with different delicious ingredients can make your food more tastier.
			

				4. Keep looping - Repeat step from 1 to 3. 
			






Confusion is the wind for your sails!
When you start learning programming here in Skillcrush, at first maybe it feels a bit confusing and overwhelming, that you don't get all the right answers for the questions you have to solve and everyday you get more new problems to play with. But at some time you start to notice, that with every day you get something new, what in the beginning is confusing but at the same time you notice that you have learned and solved something new, what was confusing at first few days ago.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
No matter what, how confusing and how much it time to time looks like this thing here is not meant for You, You keep going forward!
So lets move on, things can only get better from here on!



I am not great with words, so this will be short. My advice for new coders is the same as my advice for life or for parents or whatever. Sleep often, Google often, and there is always wine.
For everything else, there is Procatinator.



Confusion can be your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Mistakes will expand your coding skills!
 Mistakes are the gateway to problem solving efficiently and effectively.
 Mistakes bring on confusion, but that is a sign that you are heading in the right direction. It's like being in the forest and wondering why or how to not get lost. The trick is to embrace that programming is better done with curiousity and checking out unknown and walked paths. In the process you get to know what works for all and what you can do that is unique. 
When you get tired, pause and come back.
 Making mistakes will feel tiresome and frustrating but this will make you stronger and more eager to code.
 The cloudy understanding will become clearer, and you will see that you may be overlooking the simple answer.
 Don't go solo...pair, collaborate and borrow!
 When you feel blocked by mistakes or confusion, check out other codes to see what you are missing or how to simplify.
Let your mistakes inspire you and your intuition guide you. 
 You will find that as your eyes and mind train to understand and apply code, you become better and quicker.



Finish What You Start!
This may seem obvious to some, but I have made this 
			mistake so many times.  I've started a tutorial or online 
			class just to get frustrated, bored, or busy and quit.  This 
			horrible for learning.  You find yourself relearning things 
			you already know and it ends up taking you so much longer to 
			progress than it would have if you just finish what you start.
It's going to take A LOT of your time!
Learning a new set of skills as comlicated as coding is 
			going to take a long time.  If you don't want it to take you 
			years and years and years, you're going to have to put a lot 
			of your free time into learning and practicing.  I take about 
			an hour a day at work (we're allotted an hour a day for 
			professional development) first thing in the morning and my 
			lunch hour to learn and practice.  On the weekends, I have 
			been using almost my entire days to learn and practice.
Get the support you need.
My wife has been great!  She's really been picking up my 
			slack around the house with house work and the kids so I 
			can have time to work on learning.  Of course, she's hoping 
			it will pay off in the form of a high-paying job for me
			so that she can be a stay at home mom....I'm hoping for that 
			too.
So long and thanks for all the fish!

The advice I wish I was given !
You sure going to enjoy coding after reading this advice
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



© Copyright jazziebaran-advice 2016.



Confusion is your friend! I WISH!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits. Or so you hope!
Suspended disbelief becomes your middle name.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING - WHATEVER THAT IS - but you don't understand HOW exactly it's happening and you probably never will.
This is what they call the normal part of the process of learning a new technology, and in fact, it's a critical part of the process. Yah, RIGHT!
You see when you encounter a new programming language part of your learning process includes learning to train your eye. It's a hell of alot more then your eye or eyes. The way to train your whatever it is, is to read a good deal of code even when you don't totally understand what it's doing. Da, THAT MAKES SENSE - NOT!
Let me tell you straight it never makes SENSE! And those are the facts of starting in Tech! Really. Believe me!
Most important
Give up!



Know git!
I wish I had had this Skillcrush git class long ago. Knowing git (and GitHub) can make tracking changes a breeze, and sharing your code so much simpler. GitHub is quickly becoming my best friend!



Find a network of coders!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, but you are going to get stuck. You need to have people to go to when you need help.
Check out facebook pages, stack overflow questions, quora, etc.
Practice, Practice, Practice
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
In order to keep your new skills fresh and commit them to your long-term memory, you need to make sure you are using them everyday.  Set aside some time for coding every day, even if it is only a few minutes!




You are here.
At some point, everyone was a beginner... Everyone. You have to start somewhere. You are here.


Google is now your best friend. (As if it wasn't already.)
Ask it things.


Sometimes you need to take a break.
When you find yourself at an impasse and nothing is working... take a break. Walk away. Breathe. Do some yoga. Take a nap. Walk the dog. DO SOMETHING ELSE. Come back to it later, it will help. I promise.


It's ok.
It really is ok... or it will be... so you might as well act like everything is already ok. Because it is.



Google is your friend!
How did anyone ever learn anything before the days of the internet and Google? I can't tell you how many times someone has asked me how to do something and I Googled the answer for them. I look super duper smart, but really I'm just lazy! 99 out of 100 times, Google has the answer for you. Sometimes you may have to do a little more digging than other times, but you'll always find the answer -- and learn something! -- in the end.
Keep On Keeping On
Learning is harder the older we get. It doesn't come as naturally and if we don't pick something up immediately we sometimes have a tendency to give up because it seems like it's too hard and will be too much effort. But nothing worth having is ever easy! Try to focus more on the journey and less on the destination. You may find your destination changes the further along in your journey you get. Maybe you wanted to design WordPress themes but along the way discovered you were much more interested in Responsive Web Design. Life is full of surprises. Don't miss out because something didn't show up in the way you originally expected.
Always Have Fun!
I wish someone had told me this sooner. Not the part about having fun, but HOW to have fun. The answer is fillmurray.com.
Always, always fill murray.



Confusion is your friend!
When coding, make sure to have a plan. It is better to spend the time mapping out project, then trying to figure it out as you go. 
When something works, save a copy and then create new copies as you add new features. If it is a small thing just saving a new file will work. Now that I have learned about github.com, you could push up the working code, then keeping going with you new changes locally. That way you know what is on the github respository is the working code version!



Anyone can learn to code!
Coding can seem really overwhelming to those who aren't familiar with it, and many people have said to me "Oh, it's so cool that you know how to code. I could never do that!"
But they can, and so can you! It may seem scary, or complicated, or even impossible, but it isn't! I promise.
When I first expressed this sentiment, that learning to code is easier than it looks, my friend (and fellow developer) vehemently disagreed. "That's just not true!" Said he, "Coding is really hard and not everyone can do it. So there."
Please, I beg of you, don't listen to that guy! You can learn to code. Sure, some aspects of computer programming are more difficult than others, that much is true. And you can get into some very complex and highly challenging subjects like Artificial Intelligence. But you know what? You don't START there! No one does.
You start at the beginning, just like everyone else. Just like the above mentioned developer friend. You CAN do it. You just have to start! Maybe you pick up a little HTML or CSS here, some JavaScript there. And before you know it, you are coding like a champ!
TL;DR Don't listen to the haters. Anyone can learn to code. Start with the basics and go from there. Maybe you love working with HTML and CSS and you decided to stay there and become a boss web developer (Go, you!) or maybe you decide you want to explore programming more and you try your hand at back-end development or making mobile apps. Either way, you did it! You learned how to code.



Patience and Perseverence are Key!
When you start programming, everything is going to be very unfamiliar. Do you remember learning a new language in middle school? Frustrating, right? Well, this is the same exact thing!
Luckily, its even easier. Checking your work along the way is a BREEZE. You can check whenever you like, its not cheating here. Too stuck to find your own way out? Google it! Guarantee the answer is out there. And last, there are no final exams. You don't need to memorize everything up front, resources are out there for your use everywhere. You'll remember the key stuff along the way!
Practice often, and don't give up!
The best way to improve, in anything in life, is to practice often and this could not be more key in coding. There are a lot of small things that just maintaining a strong practice will engrain in your DNA, and you'll get very proficient in no time!
Most importantly, do NOT give up on learning more and pushing yourself. First of all, you're never done learning. There are always new programs out there for you to explore, and they're all forever changing! Also, it will take time to find your first job or client, and that's ok! Just keep pushing though, and you will get there in no time.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Know your learning style
Not all people learn just by reading, not all learn by watching videos, not all learn just by doing.
I did a 3 month apprenticeship where all the learning was done by reading then doing exercises. This was not helpful at all. I learn more by watching videos.
Don't copy. Type out the code even if you are only copying.
Muscle memory is often helpful both as repetition and visualization. You will learn more by doing than copy and pasting.



 Feel free to cheat! (Consider this an open-book, open-web, open-buddy exam)!
 Use Google, use Stack Overflow, use your classmates and go ahead, look at the solution Skillcrush provides.  
 You will learn more studying, understanding, and synthesizing someone else's working 
			code into your own than you will banging your head against a wall. 

 Find your flow 
 Maximize the time you have to work. If you get stuck it's okay to work ahead a little if you can. Sometimes the next lesson will illuminate your problem or question.  
 Flow is a creative state where you feel "in the zone". It is usually both pleasant and rewarding. You should feel proud of yourself for all you are accomplishing! Don't mope.  
 Take breaks for you eyes, brain, and body. Sedentary work kills, so get up and take at least a
			tiny break every fifteen minutes, or whenever you feel stuck.  Getting up and moving around stimulates your mind, body, and soul! 



"Never give up, never surrender!" - Galaxy Quest
When something seems too hard, don't take that as a sign to quit. Though it might be tempting, never ever give up! Take a break and come back to it the next day if you need to; coding can be tricky and fresh eyes are often all you need! Don't worry, sometimes success just looks like repetitious failure.. Trust me, I've given up on many ventures and it is oddly satisfying. But not as satisfying as solving puzzles and knowing that you are building new skills!
When in doubt, Google it.
Sounds easy right? It is! Not only can you find answers to coding questions, but you can learn tips along the way without even realizing it. Reading posts from other confused coders and watching video tutorials is ridiculously helpful. But, it's most helpful when you're in the thick of it and actually NEED to find certain information. It's like learning to swim while you're drowning. But less scary. And not life-threatening.
Find a buddy.
If you're better at learning things in a group or with a partner, find another newbie to chat with! Or convince one of your friends to learn to code with you. Or just tie someone up and give them a laptop. But loosely so they can type.



Don't be tempted to copy and paste!
When I first started I thought it would be smart to save time and copy and past sample code. This took away from my ability to actually write and debug the code. Once I started resisting to copy and paste things got easier. Because I was typing it in by hand I paid more attention to the syntax.



The most important piece of advice I could give to anyone who is starting out where I was at the beginning of this year is to stick with it. As with anything from working out to eating right to learning to play an instrument to learning to code, consistency is key. It's OK if you get home from work and are too exhausted to code one day, but the more days you skip, the harder you have to work to catch up and the more likely you are to give up. Plus, for me, I've found that doing small chunks on a daily basis is more effective than having a marathon coding session one day out of the week. This is why Skillcrush has been so effective for me.



Don't be afraid to fail
Because you will fail. A lot. You can't expect perfection the first
				time out of the gate. Not gonna happen. Just remember that the failure
				is only temporary. It's a learning opportunity. Every time your code fails
				to work, you get to learn how to fix it. Once you know how to fix it,
			 	you probably won't make the same mistake again.
Take a walk
This goes right along with not being afraid to fail.
Things go wrong. You might find yourself literally banging your head
				on your desk out of frustration simply because you can't figure out where
				the problem is. Then you'll start questioning your decision to learn to
				code. You'll feel like an imposter.
Go take a walk.
No. Seriously. Go take a walk.
Sometimes walking away for a few minutes and doing something else is the
				best thing you can do. It allows you to think about other things for a while.
				Inevitably, your mind will go back to the problem waiting for you on your
				computer screen. That's when you can start thinking the problem through rationally.
				Consider your past projects. Think about how you accomplished similar tasks before.
				The answers are there. You just have to allow yourself to find them.
Remember, you are not alone
Developers are a helpful bunch. And you are taking this course with a whole
				bunch of them. Make use of the google group. Scan through the other topics, and find out
				if anyone else has had a similar problem. If so, maybe the answers they received will
				help you. If not, just ask!



Google is your friend!
When you start programming, you will run into problems. It is very likely that people coding before you have also had the same problem, or something similar. Just Google your problem. You'll find hints or new ideas. Always check what version of the language they are using, too!
If you get really stuck, take a walk or sleep on it. 
There will be times that you get really stuck. If you can't phone a friend or find anything on Google, then take a break! Let your mind work on the problem behind the scenes while you take a nap, take a walk, or work on something else completely different. You'll be surprised what a change of scenery or pace can do for you. 



You are going to feel lost
When you start programming you are constantly going to feel lost. This is OK. You will learn as you go, and eventually you will understand.
Bring your patience
Which brings us to our next point, which is that you will have to be patient and accept the difficult learning process. It's not impossible. But it will challenge you - likely well outside of your comfort zone. Just hang in there and keep moving forward.
Keep moving forward
Yes, just as I already stated, the most important thing is that you keep moving forward and hang in there. No one starts out with all the answers. And guess what, they all had to go through their own process to acquire them as well.
We are not born programmers. We work really hard. Code a lot. Read even more. And just keep striving and moving forward in this learning process.



Confusion is your friend!
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



It takes longer than you think, but don't give up!
I first started on my programming journey over a decade ago.  I have always wanted to build web sites and I tried to start when CSS was new.  (Do you remember HTML Goodies?  I do.
I'm now 43 years old and finally getting to a point where I believe that I can do this for a living and pick up the skills I need to do this.  For a variety of reasons I've had fits and starts, PHP, ASPX, ColdFusion.  You name it I looked into it.  Various issues and frustrations would cause me to give up, sometimes for a week, sometimes for a year, but I kept coming back, because deep down I knew it's what I wanted. 
If you believe you can do it - you can - never forget that



Consistency is important!
We all know that. If you're an aspiring pianist, you practice every day, even if it's just for a few minutes. The same goes for learning to code.
I was pretty consistent when I started learning HTML and CSS, but then life got in the way and I wasn't able to practice every day. Now I'm having to go back and re-learn some things, which takes time away from new things I could be learning. 
Go figure it out!
There will be times when you won't get all the information you need to be successful from whatever class or curriculum you are following. You'll need to forage through the internet wilderness for help, ideas, and solutions.
Don't get too caught up looking for the perfect answer though. If you find something you think might work, try it out! Try things even if you're not sure what will happen. All the failures just help you get more comfortable with the code, and when you finally get it, you will definitely be proud of yourself knowing you were the one who made it work.



Confusion is your friend!
Be prepared to be frustrated and confused. Your mind is beign streched and expanded, you are learning. If it's easy then your not pushing yourself.

Practice
Practice everything, typing things out yourself. Do not copy and paste, the action of typing each line out yourself will engrain the syntax and commands in your brain.


People can only tell you what worked for themselves
They can't necessarily tell you what will work for you because they are not you. I'm not saying to ignore other people's advice. I'm saying that I've found the most helpful advice to be that which comes with an understanding of its underlying assumptions and reasoning.
People often have a hard time understanding when you don't take their advice literally. A recent study found that people who feel expert at something tend to be less open to new ideas than people who feel naive. So be prepared for people to challenge you when you decide to take the road less traveled.
Robots might take all of our jobs
Then again, they might not. But if the robots run on Ruby, then you are in good shape.
According to Ted Koppel, a cyberattack on the United States' electrical grid is very probable within the next several years. This is not just some brownouts, we're talking huges areas without power for months. He advises storing several months of food and water.
In this scenario, robots may not be helpful.



Utilize Free Resources
If you are just beginning, there are a number of free online resources to get your feet wet. Code Academy, W3Schools, Kahn Academy Ruby Monk, the list goes on and one. Try a lesson out on any of these resources to see which format works best for you
Project Based Learning
Make something. Give yourself a simple project to complete, such as a single web page. Doing one thing from start to finish will help you to see how the pieces come together. 
Don't Learn It All, Learn Where To Find It All
Don't expect yourself to remember everything. Have faith in knowing that the answer to everything is at your fingertips. Utilize sites like stack overflow to help yourself find the answers you're looking for.



Patience is everything!
I don't consider myself a patient person. I cook on super high heat, blurt things out in conversations etc. If you're anything like me then, programming is an opportunity to learn patience, simply because you're forced to! You can't know what you don't know, you can't control everything, and you're often collaborating.
When the task you've set out to do is already taking three times as long as what you have alotted for, you need to analyze. Assess where your current project fits in with your overall programming goal, where that goal fits in with your life, and if you have time to finish the task at present or if you need to postpone it.
Joy and communication are skills too.
After all that analyzing, if you decide that finishing this current project is the way you need to spend your time, why not do it with joy instead of axiety? Settle in, set a pomodoro timer, and try to relax and emjoy yourself!
If taking your time with a programming project is not an option because of other cherished priorities, it's an opportunity to hone your communication skills. First with yourself. Feel secure about the decision you made by explaining to yourself why you decided to stop for the day. If you need to explain it to others, do so.
Remember today's decisions are just a reflection of your current skill level. A year from now as your skill has grown, you'll have more options and a better sense of time management. But use patience, joy, and communication to pave the road to next year!



Google is your friend!
When you start programming, you easily get confused and caught up in little things. Google to the rescue! Or, most of the time, Stack Overflow to the rescue (it often pops up as the first and most helpful search result). Not only can you find most of your answers via Google, it also can be reassuring that many other people are struggling with the same things. Or that something that looked like a minor issue actually is quite major and you would never have been able to solve it from scratch, without the help of good old Google.



Everything is confusing
Everything is REALLY confusing. And, that's okay. I can read the same piece of text 10 times and still not understand it. I own a shelf full of programming books I don't understand. And, that's okay. I will get there someday. And so will you.
Because everything is so confusing, please do the following: Make a Backup. Backup all your projects. Even if something seems totally useless now, if you put more than 3 hours into it, save it. I had to reinstall WordPress many times, on many different sites, because I didn't make a proper backup of my databases or config files.
Cool Tools

normalize.css
Learn Code The Hard Way
CodePen




Do not be intimidated by what you do not know yet.
Remember this is a journey, and a life changing one at that. We have goals set and we are on the path to execution of these goals. The light at the end of the tunnel brightens everyday as we get one step closer to the end of this tunnel. But remember, this is a learning process and the learning will never be done. The only way to get through these times of uncertainty is to jump right in and CODE! All of the classes and all of the research is great but do not get so caught up in the information pool that you drown. YOU MUST CODE TO LEARN!
Patience, Patience, Patience......wait for it...........have Patience
You must settle down and take a breath. Everything does not come overnight, as much as you would like it to. You are not the only person in the world with a job they hate and a mission to leave. I know you have found this beautiful passion but all good things come with time. You must remember to know the path you are on and understand it is not a race to the finish but rather a long, glorious journey down a never-ending path. There will be times of storms and winds that try to blow you off track. And in these moments you will feel the need to run faster; DON"T! It is in these moments you will learn the most and this will teach you to truly treasure the moments of sunny days strolling along the beach with the salty, sea breeze against your face. Remember to take you time and learn all you can from every instance that you face.
Finally, Do not be afraid to go against the grain.
Remember that this technology is an art form. There are basic standards to follow but there is also the beauty that comes from within yourself you must let out. Do not be afraid to challenge the establishment and do things your own way. Build what you love and love what you build, if only for yourself. What we are doing is changing the world around us and we are of the handful of people making that happen. Being apart of a growing industry that is having major impacts in the world gives you the leverage to make change. Do not be afraid to make change and do not be afraid to fail. Take the chances with yourself, your art, and your passions. This is unique platform that offers everything to you that you need to make change. So go out, jump in the calm stream, and make a splash in the water of the world. You need nothing more than your ideas and your new-found skill to do it your way and your way alone!



Take things piece by piece
The idea of making an entire webpage/app can be pretty intimidating. Instead of trying to attack the whole
				thing at once, it's a great idea to break it up into smaller pieces. This way you're only having to 
				attack one bit by one bit. With each piece you conquer, you get closer to finishing the big picture, and 
				after a while, the whole thing is done.



No, you will never know everything but it will all make sense eventually!
When you start learning to program, the amount you don't know can feel overwhelming. The truth is, there are basics that you'll get the hang of with time, but developers are constantly learning. The real trick is learning how to solve problems that you have never solved before, and learning how to learn as you go. 
Don't give up when it gets hard. Take a break, get a snack, watch some tv, work on something else, reboot your brain, and come back and try again. There is nothing wrong with putting something down. What matters is whether you pick it back up again.



Try your best to stay on schedule!
When you start, you may fly through the challenges. This will lead you to think "If I miss a day, no big deal! I will just do double work tomorrow" This sounds all nice and dandy but trust me, the lessons get more difficult! Keep up as to not overwhelm yourself. Also, the more difficult lessons are the more fun so don't fret too much!  


Write along with the videos 
While watching the videos I have found it extremely helpful to have a text editor or my terminal open. I position my screen to be 75% video and 25% workspace then I write EVERYTHING as Adda or Emily writes it on the screen and it really helps it stick. See the example below. 




Its Hard!
Learning to code is hard, not in the sense that you cant figure it out, but it changes the way you think or atleast it should. Life starts to look like one big coding game. Always practice to strenghten your knowledge.
Imposter Syndrome is Real
A part of me thinks that even the most senior developers feel like imposters. Its definitely real when your starting out and then wanting someone to pay you for it.



Anything is Possible
When I started this journey last year I doubted myself a lot. I think in a way it held me back. Once I decided that its all possible, my attitude and perspective changed. My best advice is to just keep going even when you feel a bit defeated.
Dont worry! This is all apart of the process. Doubt and fear are normal and feeling like you dont know enough is to be expected.
So when you feel like you suck and arent sure you can code. I advise you to push through and take a partner or Google to help you find resources.
Because next year when you are coding like a beast and snapping those if statements into place you are going to be one badass coder!



Google is your friend!
Whenever you are stuck or need an idea gogle is your friend.  Don't be afraid to search for the solution to your problem or search for ideas.
Google is there to assist you whenver needed.  It is full of resources and ideas just waiting for you to look at.
Give it your all!
It is important to always give yourself 100% to a project or to learning a new skill.  That is when you learn the most because you are fully vested.
You'll never remember what you learned or get anything accomplisedh you only give half or youserlf.
When you fully give yourself to a task that is when you have the most ideas and motivation to get the task done.



Have something to hold you accountable
I've been trying to learn to code for over a year on my own, but I haven't lasted longer than a week or two consistently until I signed up for Skillcrush.  I hated paying for info I knew I could find for free, but if that's what it took to stay committed than I don't regret it.
Social Media is a huge motivator 
Sign up for e-mail newsletters. Follow DHH and Skillcrush and Flatiron School, etc on Twitter for interesting and useful updates.  And fun updates.
An old school one: Visualization
Have an image in your head of what you want to be/do.  Daydream up project outlines and company pitches.  Imagine your kids waking up every morning to find you already digging deep into some code so they'll think you're as cool as Mr. Robot (check that out on USA if you haven't. So cool)
Dude, just dream big and work hard. 
 Pro-tip: Don't do a factory reboot of your laptop mid-class. Merge nightmare  



Confusion is your friend!
It often feels like you're banging your head against a wall when you're learning to program. It's not fun. (It makes me want to eat a lot of snacks, personally. I go for walks, too, but snacks.)
But it does mean that you're learning. You are figuring things out. A little (or a lot) of persistence will really pay off.



You are not an idiot!
Despite the fact that you will feel completely flummoxed and overwhelmed on a regular basis while you're first learning to code, please do not despair. You are not dim because you don't immediately understand something the first time (or even the 100th time). The important thing is to keep your head up and continue slogging ahead. Ignore anyone who says otherwise.
Absorb as many different opinions as possible.
Everyone (and I do mean EVERYONE) who codes has (occasionally bizarrely) strong opinions on which languages are the best, how to do certain things, and what best practices should be in every aspect of programming. Always listen politely to potential teachers -- every new bit of information helps -- but pay the closest attention to the majorities and authorities.
Practice, practice, practice.
Just like learning a new human language, learning to code is a continual process that requires constant use and attention. If you don't keep coding, you'll lose vocabulary, syntax, and "flow." The more you manage to think in code -- from imagining cool ways to build things to help in your real life to just copying code you see until you figure out what it does -- the faster you'll be "fluent." 



There is no shame in googling!
You are going to be confused. You are going to be so confused you don't even know which questions to ask! The good news is that lots of other people have been there before. StackOverflow and Google have been so helpful for me!
Read your error messages!
I've been so used to not understanding much surrounding computers. It was actually a surprise when I read error messages in the command prompt and understood, if not why I had a problem, at least what the general issue was. I had to get used to thinking of error messages of helpful hints, rather than automatically assuming it was incomprehensible gibberish.



Don't psych yourself out!
Something called "imposter syndrome" is very real, and will happen to you. Don't let it get the best of you. You can totally do this, it doesn't take a special super human kind of person to master this. You are already well on your way.
Use that moment, that moment of doubt, to fuel yourself. Fight against it, prove to yourself that you can totally do this.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Embrace Your Own Style of Learning
Don't be afraid to stray from the path a little as you learn. You will pick up some concepts more quickly that others, and struggle in areas that they don't. Accept that. Don't be afraid to jump ahead or review old lessons.
Change the subject if you're stuck. Work on something else for a while. The only reason I'm writing this today is because I got frustrated with a lesson and decided to skip ahead to the next class for a bit. So far I've done almost a week's worth of lessons in 24 hours. I'm pretty sure that was the right choice.
But don't discount the way you are being taught just because it is not your way of learning. Sometimes you have to struggle through. The trick is figuring out what blend of their teaching style and your learning style will be the most effective. Experiment.
There Will Always Be Someone Better Than You at Something
It's easy to get discouraged when you see amazing work done by others and think, "I could never do that!" That is the wrong mindset. You can't do that now, but nothing is stopping you from learning how to do it later.
Coding is collaborative and ever changing. Everyone has their own strengths and weaknesses. And every project has its own balance of needs. So get competent at what you need and excellent at what you love.
Yes, there will pretty much always be someone better than you in every specific subset of coding expertise. But no one will have the unique mix of tech skills, soft skills, passion, and personality that you will bring to your clients or your company. So learn from others and be the best you that you can be!



If you can work out what your question is, you are already winning.



Don't be afraid!
What if I break something? What if I can't do something? What if I look stupid?? Coding is so scary!
      j/k it isn't scary. What's scary is never trying!
Overcome the blank page
So what if you don't know where to begin? No one ever does. Just put something down and go for it! Maybe it won't be genius, but the more you hack away at it, the better it'll get -- and you, too.

      Practice, Practice, Practice
How do you think Batman became the broody, justice-loving vigilante we all know and love?
    


Don't Be Afraid To Jump Around
Everyone learns at different rates and prefers different types of learning styles. If you are using a tutorial or course and you don't seem to be grapsing it. Look for another tutorial that will either help you figure it out or just move on to another. You can always go back and complete the first tutorial later.
I know it sounds like a recipe for disaster but this has worked well for me. There are lots of resources out there free and paid. Start with free ones and free trials to get a feel for what the tutorial is like. If you like it go for it. if you don't find another one..

			It's a journey. Keep it moving and make sure to have fun!
My List of Resources

Codecademy
Code School
Lynda
The Viking Code School
The Odin Project
Refactor U
Rails Girls
Thinkful
Saylor




Ask questions
 Ask a million questions! You will read about being confused later on, but ask all of the questions. All questions are stupid, so ask them any way! Think like a child. They ask a billion questions a day. They want to know everything even if there parent's don't know the answers. The moment you stop asking qustions, that is the moment you fail.
Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
This is where asking questions will come in handy!
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



It's going to be hard
Seriously, there will be times were you're going to want to hit your head against the wall. Just know that not only have we all been there, we occasionally are there as well.  
Seek out help
Attend meetups, get involved with people on reddit, seek out any mentors you can. Practice and ask questions like your life depended on it. The only stupid questions are the ones you don't ask.
Some thins you'll love, others you won't
Look, you're not going to like everyone 100% of the time. Take me for example. I'm not really interested in CSS/styling pages. I don't have the artistic eye for it. Instead I just make it fun. Take this page for example, yes, it looks like it was made in the "early 90s!" That made me smile so I created it.
Just Keep being yourself. Stay focused. It will all work itself out.



Don't pet the sweaty things'
Because, ewww.
You are not a beautiful, original snowflake
Nobody cares, love yourself.
Hmmm, I really should think of some better advice...



Don't be afraid to ask questions!
I have always been a question asker & when I'm learning something so completely new, like coding, the questions just keep coming.  You can't be afraid to raise your hand, post a message, or email your teacher.  Question asking is not a sign of ignorance, it's quite the opposite.  It shows you are not only engaged in the learning process, but you want to understand what you're doing, not just get the "right" answer.
I have also found, that often times when I'm confused about something, I'm not the only one...I just might be the only one willing to "look stupid."  But remember, none of us are experts, that's why we're taking a class...so ask away!
Don't let the frustration take you down!
When you are learning a new skill, you are often taking on something that is unfamilar and confusing at first.  The longer you work at it, the more you'll understand.  But there will be bumps along the way as you go through the learning process.  If you're like me, you don't like not being good at something or not understanding.  This can lead to great frustration when tackling new material.
It's normal to feel frustrated & confused, but you have to be able to work through those feelings.  Sometimes this requires stepping away from a lesson for a few hours (or days!) just to clear your mind & giver yourself a break.  As you learn to code, you'll quickly become aware that often times the smallest errors (typos, missing semi-colons, etc...) are your biggest enemies.
While no one likes to feel frustrated, it's a normal part of the learning process.  Even experts on a subject matter, at one time were new to that subject.  The difference is, they fought through the frustration & mastered their skill.



Find a coding group!
My advice would be to find a supportive community to get you past the feeling that you don't understand and therefore coding isn't for you. This is just a passing feeling, and it's not real! Coding is for you! One of the best things about it is that coders like to help each other.
If you have a coding group that meets regularly, this is the best. If you run into problems you can bring the issue to them and they can take a look.
In addition to solving the problems in your code, the best part of this is that you will sweep a way any doubts you had in your mind about your abilities, because you'll see that it's all about working together.



Persevere
Programming is amazing but it takes a lot of learning before it all comes together. Find some good tutorials and work through them. When you find you can't do something, google it and read what a few different people suggest. Remember the skillcrush motto of  good, better, best . You can achieve the same results in many different ways in coding. Just get it done first, then think about how to do it better next time. Eventually you will know enough to design your code well from the outset. but don't stress about that for now.    

			Work on real problems
At first you have to start on the toy problems, but as soon as you can, get to work on real problems. Make a website for a real customer, even if they aren't paying you. Write a program to automate a real annoying repetitive process. Have users who can test your solution and give input to guide your improvements. Don't keep it all in your own head.

    

Do your homework
Make sure to keep up with your assignments, because if you get behind on your homework all the lessons start to feel really overwhelming.
Make time for it
Schedule 1-2 hours for homework every weekday, and stick to it!
Give yourself a break
But also remember to take frequent breaks so you don't experience information overload.



Practice is your Friend!
When you first make the decision to learn to code, make up your mind that you WILL be able to do it!  I've always beliveved that we can do anything that we put our minds to.
From the very first day, commit yourself to daily practice.  Look at the classes and the challenge of learning as a practice. The same as an Olympic athlete, or a professional athlete, or a world famous musician. 
When injury interfers with Practice.
Sometimes your frustration will feel like an injury. Sometimes you will not be able to take the next step because the one you are currently on is still too painful. 
So, do what any athlete would do, take a few days off from your practice to heal. Clear your mind. Let your frustration marinate until it becomes edible. Until it transforms into determination.
After you heal, start over. Study every letter; study every symbol. Do not let a bunch of letters, and numbers and symbols steal your dream. 



Hi my name is Kim and I have some advice for you!
If at first you don't succeed, try try again. (And then try some more...)
My advice is to realize that when you start to code it will be both frustrating and gratifying.  One minute you will be pulling your hair out trying to understand a concept, and the next you will be doing a happy dance that your code worked (it actually worked!!!).
Embrace this see-saw of emotion.  Know that everytime you don't understand something, you eventually will.  It's like a jigsaw puzzle.  There are a ton of pieces haphazardly spread about.  The picture is unclear but if you take your time, one piece at a time, you can put it all together.   
Ask for help (often)
Utilize all the help that is available.  I hate to ask for help, but I have quickly gotten over that character flaw since I've begun coding.  So send the instructor an email or get to an online forum.  And remember: Google is your friend!
I have an index card with a mantra that sits on my desk.  It reads "If coding is difficult, code more".  It will get easier and you will get more awesome.



Keep Learning
When you start, it may all seem pretty easy. If you've learned some of this before, or are picking it up quickly, don't get complacent.
			There is a lot to learn. So remember, it won't all go smoothly. 
Investigate any Suggested Resources ... and ... Find Your Own
Additional resources can be interesting and helpful. Some have even helped get me out of self-created jams.
Approach Coding as an Adventure!
Look forward to each new piece you learn.
				Let learning to code take on a whole new meaning.
				Have fun!



When you get confused just work ahead!
All of this can seem like a foreign language. Just work ahead and something will eventually click. It's like traveling and finally you unbderstand when you have the proper context'
Be kind to yourself
Everyone has different strengths and weaknesses. Don't worry you will get something immediately that others will not and vice versa. That's why we are here to help each other!
Take frequent breaks
Don't worry you will not fall behind. It's amazing how productive you can be the next day when you give yourself time to rest. Things just all of a sudden make sense.



No one was born an expert.
It's easy to feel embarrassed when you're first starting out. Every question seems dumb, whether you're asking in an online forum or to a friend who is more seasoned. Wanting to be knowledgable, wanting to be the best is natural, but it takes hard work, practice, and a little bit of fumbling around.
Everyone started out like you once, asking questions, feeling confused. They didn't just master 8,000 programming languages overnight. Everyone starts out as a beginner, and that's not a bad thing.
Read the directions thoroughly.
I can't tell you how many Skillcrush challenges I thought weren't working right because I missed one little step (or misspelled a tiny word in a line of code)



Confusion is your friend!
You are learning a new skill.  Good for you!  .  Learning in smaller sessions is less overwhelming.  Take a break whenever you feel frustration taking over your brain.  The lesson will still be there while you go outside and get some fresh air.
If you get stuck on a particular concept, researching it online is a great option.  Another option is to ask for help, whether that be a fellow classmate or at a .  Someone else may have the same question.
Practice makes perfect!  Make the time to practice your coding skills everyday.  And soon that habit will kick off a !



Practice Make Perfect
Its an age old saying, but it is holds very true when learnign to code. The more you do something, the faster it becomes second nature and gets committed to muscle memory.
When I am learnign somethign new, oftern times I will go through the excersise once, make sure It is completed correctly, then delete everythgin and start again. I sometimes do it three or four times. Then when I really need to do whatever the excersise was about, I am very familiar with the steps needed to make it happen.
Wrap Your Head Around as Much as Possible
One of the things that is most important for me when learning something new is to not only understand how to do it, but also why you are doing it, how it works, etc. This helps me, especially when learnign a programing langiuage, to "think" in that language, which in turn helps me be able to use it as it was intended.
Don't Give Up!
Learnign a programing language is not easy. But if you keep at it, and strive for that "Ahh Ha" moment, it iwll come. Just stay focused, practice and keep your head up!



Build projects. Don't collect badges.
Look for courses – like Skillcrush – where you will be building real-world projects as you learn new skills. Some sites are great because they're free and can introduce you to new skills. Use these to help you evaluate whether or not you want to pursue that coding language. But, don't spend too much time collecting badges. 
Concepts and theory are important, but application proves understanding.
Look for courses where you will be building a project as your end-result so that you'll have professional pieces for your portfolio. Yes – even before you get clients. I didn't do this enough when I first got started. Now, whenever I take a course to learn a new skill or build upon an existing skillset, my goal is to end up with a project that can be added to my portfolio.
Teach others.
It's true what they say. Teaching a skill to others will help you to solidify your understanding and knowledge of a new skill. 
There will always be someone one step behind you, so teach it to that person. You can create YouTube videos or get involved in groups. Help out by answering questions whenever you can.



Don't Give Up!
This is so cliche, but you can't be quick to give up on your coding journey! There are going to be days when you pull your hair out trying to figure out some code. You'll want to run away screaming and believe that you can't do it. But you can! Walk away for a while if you must, but don't run away forever.
Walking away from your computer once in a while is actually quite helpful and healthy. Don't throw your MacBook across the room when you can't understand how to position that div. Just take a deep breath, walk away for a while and do some other activities, then come back with a fresh mind. You'll find new clarity and energy to fix and understand your problems!
Don't Get Stuck!
There are SO many things to learn when it comes to the world of programming. With so many languages, frameworks, and ideas to understand, you may feel overwhelmed (but also excited) about all the things you feel you need to learn.
Don't let this plethora of information paralyze you. Sometimes you will feel that there's so much to learn that you'll never learn it all. Well, you're right. And that's okay!!!
Repeat after me: NO ONE KNOWS EVERYTHING. Even the most seasoned developers will tell you that they are still constantly learning every single day. It's okay to want to know various languages and processes, and I encourage you to study anything and everything! But DON'T let the information overload paralyze you. STUDY and CREATE! Python or Ruby, SASS or LESS, whatever it is, just learn it and DO IT!



Do a little bit each day
 Don't fall behind!
			 Don't get discouraged.
			 Good luck!
		



Errors
The element of surprise is right when programming or just installing Ruby onto your computer.When you are in a jam with error codes, google is the best place to go for answers. I usually try to navigate to stackoverflow in the search results.




Take "Learning How to Learn" by Coursera
This class was recommended to me by a someone in the LA Coders Facebook group. It teaches valuable learning skills based on how the brain works in a very entertaining and light-hearted manner.
 Excercise 
Excercise is one of the most effective means of improving your physical, mental and emotional health. You need to do it every day just like eating and sleeping. Exercise relieves stress, improves mood, boosts memory among myriad other benefits. As you'll see from "Learning How to Learn," excercise lets your brain operate in the diffuse mode, which is essential to learning.
Meditate
Meditate for least 10 minutes every morning when you wake up. Meditation is also productive during the day. I recommend not meditating before bedtime because meditation puts your brain in a relaxed state and may make it hard for you to fall asleep because your brain thinks it already had sleep. Meditation increases Alpha brainwaves, essential for learning and memory.
Read
Read for at least one hour before bed but only in paper -- not digital versions. The light from digital devices will hinder good sleep because it makes your brain think its daytime. Reading before bed improves creativity, concentration, sleep and empathy and lowers stress.
Sleep Naked
Good sleep is paramount to mental health. "Lowering your skin temperature increases the depth of your sleep and reduces the number of times you wake up in the night. Stripping down to your birthday suit is a great way to lower your skin temperature without changing the temperature of the room."
It's OK to hate Git!
Git is about as fun as watching dogs eat their own shit -- especially the white kind from the 1970s. After Git mentally tortures you, you'll find an abundance of user-friendly alternatives to the command line such as GitKraken and Sourcetree.



Don't Be Afraid
Learning a new skill can be pretty scary. Most of us were terrified the first time we learned to code and that's okay. It will take time, but with lots of practice you'll be fine.
Get Support
Seek out communities of support such as other programmers, community groups, forums, and meet-ups. Attend developer conferences to stay informed of the latest trends. There's a ton of support out there.
Teach Others
You may be thinking,"How can I teach someone how to program and I am not an expert?" Teaching someone else the skills you've learned helps build your confidence and maintains your skills. You don't need to be a chef to cook for your family, do you? The same thing goes for programming.
Write Everything Down
Most of us Google just about everything which is great, except when it comes to solving issues that are super specific. Some solutions are a mashup of several sources. Two steps from this site, a few more from another site. 
Create your own documentation (in your own words) that outlines the exact steps you took to resolve an issue or something like how to align images on page using CSS.  Whatever you discover, write it down. I personally use Evernote, which serves as my personal knowledge base.
			





The internet is your friend!
If you have no idea what all those funny names mean, do not panic. The internet is here to help! You will find out that everything that you ever wanted to know (and more!) is available in the web.
 There are tons of free resources and nice people to help you. Just make sure you know how to search correctly based on the questions you have.
Most developers will tell you that they are constantly searching Google for issues that they run into. Ignorance is the norm, so do not feel stupid. Just go ahead and search, search, search.


Sometimes you just need a rest.
If you are stuck and it seems like you are not making progress at all at learning or solving something, just take a rest. We often get overwhelmed with all the new information we are acquiring, and we might feel lost and incapable. 
If you ever feel this way, do not think of yourself as a failure. Just take a rest. You will find that coming back to your process a couple of hours later, or even days later, will make you feel better and you are probably going to tackle that problem right away. 


Anything is possible.
Do you have wild ideas? Crazy solutions for everyday problems? Do not keep your thoughts to yourself. Try to build something out of them! That is what programming is for. 
Start an open-source project. If you ask nice, you will find lots of people willing to help you.
					I promise you are going to make great things now that you know how to code.
Think big! Good luck in your journey.





There are many ways to do the same thing!
This lovely discovery came to me while doing an assignment and realizing I didn't understand how the F I was supposed to do what I was supposed to do, the way I was being told to do it! Luckily, I eventually saw the light, but in the meantime, I noticed (thanks to lots and lots of Google searches) that, much like what all my math teachers always told me, it doesn't matter HOW you get the answer; rather, just that you arrive at the answer correctly! ... Some methods are easier than others, and being that I am lazy (I like to call it 'efficient,' though), I prefer those.
Let's get physical!
As it turns out, staring at a computer screen and typing for hours on end is actually quite bad for your eyes and wrists. And neck. And back. And shoulders. And posture. And... Okay, you get the point. But seriously, sometimes I have been sitting in the same position for hours and then at some point I will actually blink, and consequently notice that my vision is all blurry. I also have to wear a wrist brace at times while typing (hopefully that is not an early indication of arthritis, but my gut tells me it is).
Being that I think good health is very important (and that I value my eyesight), I would recommend getting up to take breaks often, and stretching as well, while working on code for long periods of time. Not only will your body thank you for it later, but it may help clear your head if you are stuck on something as well, and when you get back to it, maybe you will see exactly what you were missing all along. And that brings me to my final word of advice...
Quit.
... Just kidding! Quit, but only temporarily, and only if you are really super stuck on something and it's driving you insane and you are getting angry. I have called it quits at times, only to come back the next day with a fresh start and finding my issue immediately!



 Technology is Not What You Think	
 People who are crazy enough to think they can change the world are the the ones who do it. ~Steve Jobs
 Solving BIG problems is easier than solving LITTLE problems. ~Sergery Brin
Technology Can Drive you Crazy at Times.
 My Wifi went down for 5 minutes so I had to talk to my family. They seem like nice people. ~unknown
 There is a reason they call it hardware, it's hard ~Tony Fadell


Some things to remember:

Learning new things is hard for everyone!
Get help from the internet! Google is your friend. 
Also, forums are great. Join the free code camp slack group, stack overflow, or even head over to reddit.

Work on projects that you want to finish. Motivation is key!




Be Kind to yourself
It is going to take a while to master all the skills you need to become one of those coders you see in movie typing gibberish without having to keep checking how to write the code with your eyes closed.
Until you get to that stage. Google is your friend and will remind you how the code is written, with lots and lots of experience using the code it will come automatically to you. For now, just. be. kind. to yourself.
Step away from the computer
I know you're crazy excited with all these super things you are doing and learning. But remember to take a shower, go for a walk, pet an animal, talk to a human being or two, live a bit of your life and come back to do some more coding.
You will be a more balanced coder this way. Oh yes I forgot, do some yoga or some sort of excercise too!



Confusion is your friend!
Mindset is the key to everything If you decide to work through difficulty you can do anything.
Build a new skill one chunk at a time. No one discovered new territory all in one sitting.
Suspended disbelief plays an important role.
Coding is a process. So is learning. Treat it as such.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



We were all newbies
Learning something new makes you a newbie, a beginner but remember every expert had to learn this at one point. We were all noobs at one point in our careers
So just always remember that no question is silly and you are probably asking something that someone else wants to ask
Always keep learning
Never stop learning. You need to always be reading, following the leaders in the industry and challenging yourself



Keep going!
My advice is to keep going through the hard parts, the confusing parts, the frustrating parts, the very very lost parts.
It may like a good idea to stick with one problem until it's solved, but then nothing else will get done. 
If you can move forward and leave a problem to return to, then do that, and keep going! 
Sometimes a solution will become more apparent as you move through other challenges.



When in doubt, Google it!
The web developer community is generous.  Developers like to share their knowledge & help each other solve problems.  If you can't figure something out, Google it!  You're bound to find someone else who had a similar issue & another someone else who was generous enough to help them resolve it.
Be that helpful person.
It's easy to feel self-doubting when you're learning something new.  One of the best ways to reinforce what you know is by teaching someone else.  Get on forums and help fellow coders when you can.  Even though you can't answer everything it will be a good reminder that you do know  some things.



It's okay to ask for help!
When I first started learning how to code, I was self-taught.  I freelanced for a year doing web design and started teaching myself 
            how to do front end coding in HTML and CSS.  It was hard, and it took me forever to complete one website, let alone two at once.
            I realized that it's okay to ask for help, as everyone else out there has been in that same boat!
            I used various forums and wasn't afraid to email or Tweet someone with a question.
            The key thing to remember is to be specific with your questions, as people are very busy.  It helps to include a snippet of your code 
            with what you're trying to accomplish.



Don't Be Afraid!
You have already taken the first step toward learning. There is nowhere to go but up!.
Everyone Gets Stuck.
You are not the only one who is totally confused and stuck on a specific piece of code. Feel free to reach out and ask questions. Use Google and check out Stack Overflow.
Like Skillcrush says: this is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.



Pregnancy Brain is a Bitch
It's really not the right time to start any lesson when you're pregnant. Especially during your last semester. You forget everything you just learned and wrote down the day before. You get sick most days and end up using up your weekends and precious evenings after our todller has gone to bed to make up for the classes you've missed. And then you're so tired and exahusted, you just go through the motions of finishing up everything and end up forgetting more.
My only advice, if you want to still sign up in your present occupied condition, is to write profuse notes on everything and anything to help with the "ring a bell" thing in your mind as you go on. And also, don't expect much. You're alreay doing enough as it is. Learning code plus growing a baby definitely earns you a guaranteed spot in heaven despite your nasty foul mood all the time.



Believe in yourself!
Programming is hard. Even if all you have is a few skills. Try to make something. making a website is somthing you can do that you can look to as something YOU made. 
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Make something!
Make something that you can call yours!Improving your project will help reveal what skills you will need to make it EVEN BETTER. A resume page is a goo place to start  
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Hang In There
It only gets better!
I see coding and design as a way out of a not so happy life.
It's Hard Sometimes
With hard work and determination nothing in life is impossible.
When you finish the course, don't be afraid to take risks(moving to another state,city, or country for work).
Volunteering at a tech company counts as experience.
Self doubt is man's/woman's greatest weakness, believe in yourself, even if no one else does.



Be Kind to Yourself!
You're a beginner and there is nothing wrong with that! Even Steve Jobs was a beginner once and look what he did. So, be kind to your self. If you don't get a concept just keep exploring it until you do!
Google. Google, Google!
I can't stress this enough. When in doubt, google it! Don't go out and buy and expensive book that is just going to collect dust on your desk. Crack those knuckles and get your google on.
Never Stop Learning!
In the world of code, there will always be something new to learn. So don't limit yourself. Keep seeking new and inovative ways to solve problems. 
Enjoy the Journey!
You'll never be a beginner again so enjoy the adventure!/p>
			- Mal



Take your time and practice
Learning how to code is hard but you can do it. Take your time and read your lessons, watch the videos, and print the transcripts. Reread/rewatch everything as many times as you need to. 
Try to practice everyday but, don't go overboard. Make sure you take breaks to clear your mind. It helps to get up and walk away for a while and then come back with a fresh outlook on what you are doing. Even if you have to leave it overnight, walk away. Maybe something will come to you while you sleep. Or in my case while I'm trying to get to sleep, keep pen and paper next to your bed or use your memo app on your phone to write it down. Otherwise you will forget!
Ask for help
Ask your classmates for help when you get stuck. Go to StackExchange and ask for help. Use Google. Look at what other people have done. The more you read code the more you start to understand.
Use those errors too! Even if you have to copy the code solution you will make errors. Those errors can help you understand what the code is doing. 



Confusion is your friend! 
 This is often said throughout the lesson, but I want to enforce it here. I always have trouble admitting I don't know things or that I'm out of my depth, but it's really the only way you'll learn and improve.
 Admitting things are confusing and fixing it is much better than never learning new things! 
Take things one step at a time. 
 When working on big projects or tasks, it's best to break everything up into small tasks. Otherwise, such large tasks (and especially with things you're not necessarily familiar with) can become overwhelming.
Being behind is okay!
 Life is busy and hectic and sometimes you don't make all the goals you plan. Don't beat yourself up about this! Just keep going. You're doing your best and that's the most important thing.
Never give up!
Especially when you most want to!


Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Self Doubt
Learning to code is not an easy journey. You will be tested, your will will be tested, and you will for the most part convince yourself that you aren't smart enough to be a programmer, persevere anyhow- those moments are what will make or break you as a programmer!
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



 You might leave for a while  
 I enrolled in Skillcrush in the fall of 2014. I got stuck and procrastinated. In 2015, I moved to Vietnam to teach, and while I kept telling myself to keep working on this, it was way more exciting to ride my motorbike in the chaos.
So, a year went by. I travelled. I had fun. And then I tought, I should really learn to code.
You can always come back 
 So, instead of 28, I'm 30. Sometimes I get discouraged when I see people who started Skillcrush after me already have tech jobs. But I don't want to be 32 and think about how I should have learned to code when I was 30. 
 So, my advice to you is, don't stress out if you lose track. You can always come back. And don't worry too much about perfection. Just ride your motorcycle in the chaos. 
 That's my two cents. For the rest, of course, check out other people's advice. They've said it all. 



Find a Supportive Community

					When I first started coding, I could not find a supportive place where I could seek advice and find encouragement.  That experience deterred me from wanting to code, so I stopped. Within the past couple years, I have seen a rise in groups where women can come together for the advice, encouragement, and support that I was seeking years ago.  These groups are one of the reasons why I continue my coding journey.  Seeing people in the place where I would like to be gives me hope that I can soon be there.
				
Don't Give Up

					This is important.  Sometimes, you will be frustrated when your code breaks, and you can't find that missing closing tag or semicolon. I've almost given up, or took a break from coding, and I regret it.  I always come back to it.
				
Google is Your Friend

					Google is pretty much all-knowing, so when you get stuck, please use it. 99.9% of the questions you need to ask have probably already been asked and answered.
				



Confusion is your friend!
No matter how frustrated you get, stick with it; it will be worth it, if it is something that you truly enjoy and want to do

Resources are never ending
Google is the best, by far, for any question you may have. You aren't alone and you aren't the first to ask, so go out there and find it!



Never pick a windy day to start running for the first time.
Running can be hard enough without running into the wind
Always eat dessert if you really want it.
You only live once and what's the point of denying yourself a treat.
Never wear black with brown.
This rule has gotten looser, but I still hate the look.
Play hooky every once in a while.
Work will still be there when you get back.



Domain Purchase and Web Hosting
I wish I knew that I could set up a website on GitHub for free instead of paying for a domain name and web hosting :'D
This became clear two months into the Skillcrush course - about 15 days too late to get my money back from Host Gator.
I am a sad panda.



Prioritize
I bet you’ve wanted to learn programming forever but you’ve always put it off. 
				You keep thinking, “Tomorrow or this weekend I’ll definitely start learning,” but life keeps happening to you.
If you’re really serious about learning to program, treat it like a job. Even if it’s just 10 minutes a day, 
				carve out a set amount of time daily to sit down and learn one new thing about programming.
Allow Yourself to Fail (That’s How You Get Good!)
Do you think all those web apps came out perfectly the first time? No way! 
				The developers probably went through hundreds of versions before they got to the version you see today 
				and they're still looking for ways to improve.
There is no “final” perfect version. Failure is part of the learning process. Don’t beat yourself up over it and don’t let it discourage you. 
				Learn from your mistakes and create something even better.
Help Others
 I bet you already know to ask a lot of good questions, but once you have all of those awesome coding skills, 
				give back and help others get started on their coding journey.
All of us who have signed up for Skillcrush want more freedom and control over how we work. Skillcrush is just the tip of the iceberg.
 If we really want to change the way people think about careers, we need to help other like-minded people get hired 
				in the industries we want to work in. We can reject the idea that you have to be X, Y, Z in order to get hired. 
				Instead, we can look at other people and say, “I see the potential in you to be someone great.” and help them figure out 
				what they need to do to become those people. 



Mom gave me the best piece of advice
when I was pretty young. She said:

Keep
				on 
				keeping
				on.
			
And it applies here as well.
You get stuck on an issue? Keep pushing through it.
Absolutely stumped?
Fine, take a break, let it marinate in your subconcious. And then
Keep On.



Breathe, Learn ruby, and Love Google
Luckily for all of us ruby has a community that is as loyal as Apple customers and as a productive as Starbucks customers. The amount of information on the web about ruby is multiplying daily! So when you reach the inevitable impasse just google it and search 4 or 5 different ways to make it sure you've exhausted your research.
Don't be afraid to push yourself either, test out crazy things. Get Funky! Bust a move and code up a storm. Make rrors and fix them. Like that dude Journey once said 'Don't stop believing.'
Above All
Keep your head down and keep moving...a rolling stone gathers no moss.



Try not to get too competitive
I always hate it when I feel like I'm behind, and everyone already knows twenty different programming and development languages, while I'm still struggling to get understand two or three. There will always people that know more, and always peole that know less. Be a student and a teacher. 
Try not to get overwhelmed
There are so many frameworks, languages, trends, etc., always coming and going. You can't know them all. Try to pick a stack of a few and focus on those rather than trying to learn them all at once.



Practice, practice, practice
Practice writing code at every chance you get.
			Embrace the struggles to figure out solutions to the problems you encounter.
Don't be afraid to use the resources available to you.
			The harder a time you have coming up with a solution, the better you'll understand why it works.

Commit often and clearly
Many small commits are better than few, large commits.This will save you time in the long-run if something doesn't work or needs to be changed.
Additionally, accomplishing one task per commit helps avoid losing track of what you did or why you did it.



Don't feel like you have to know everything at once!
When I learn something new, I often struggle during the early stages because I do not feel like I know enough, which is silly because I am learning! When I learn new things, there is a phase where I start to really understand how much I don't know. This can be very overwhelming at first. Pushing through this is difficult but important.
Don't get overwhelmed!
Easier said than done, but I fight this feeling in a few ways:

Take small steps. I focus on what I am working on right now.
Track and celebrate progress. I try to track the progress I have made by marking milestones, and I also take time to appreciate how far I have come!
Admire others' work, but don't compare. They have probably been doing it longer than I have, and if not, so what? Everyone comes with different experiences and skillsets that he/she can offer.





Embrace learning like a child with excitement and joy
Explore and discover without fear
Understand the basic concepts well
Embrace the difficult problems
Celebrate the wins
Stay focused and don't give up
Read and understand all error messages
Find great resources - some of my favorites:

Learning Web Design by Jennifer Niederst Robbins
HTML & CSS by Jon Duckett
JavaScript & JQuery by Jon Duckett
The Well Grounded Rubyist by David A. Black
A List Apart
Google

Practice and continue to learn something new every day
Maintain a sense of humor, have fun, and enjoy the journey!




Don't try to learn everything!
When you first start programming you will not know where to start.  There are so many languages to choose from and so many resources for each of them.  And to top it all off new technologies are coming out everyday and everybody seems to have an opinion about where you should start.  It can be completely overwhelming.
You will have the urge to try and learn all of the things, but stop!  Take a breath and pick just one language, it really doesn't matter which one.  Just pick one and dive in!  Otherwise you will find yourself constantly on the verge of starting to learn.  But once you just start you will build momentum quickly.  Just go for it!
Embrace ambiguation.
To go along with not learning everything, know that you will not understand everything you encounter.  Don't let that stop you!
There are many ways to power through a road block. Find which way works for you and keep it in your back pocket, you will use it often.  Sometimes it is best just to move on and come back to the thing that you are stuck on later, often you will find that that thing that had stopped you in your tracks before makes perfect sense now.
Oh, and don't worry that you won't run into the same problem again and never learn that thing; you most definitely will!



Google is your friend!
When you start programming anything you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before. But in the beginning a lot of things have been done before and in many ways.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits. There is no point in reninventing the wheel but it is sometimes crucial to know how the wheel was designed and how it works.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing. I've learned that sometimes you just have to roll with it, be a little uncomfortable with not understanding exactly why or how something is working and know that eventually it will click and make sense.



Failure is AWESOME
Most people view failure as a negative experience. When you are learning something new, failure is your new best friend. When you are in the zone, and you suddenly break your whole code, you may have an instinct to panic or get angery. However, keep in mind that this is the fastest way you will really grasp the technical aspects of your new skills!! 
Each time you fail, you will learn invaluable skills which may have otherwise taken you years to learn the "traditional" way. In face, failure is the reason most of us are taking these Skillcrush Blueprints to begin with, right!? If we were all able to learn new skills immediately on the first try we would have no reason for classes like these or community or society!!
Learning any computer language teaches you how to think ... again.
I wish I would have known that there is a set of rules for coding, but there are also almost infinate ways to accomplish your goal using code. I was so ingrained to believe that there is a "right" way and a "wrong" way, that I often failed to really learn the "why" behind each of my actions. I was just following instructions. Just copying code. 
It wasn't until I realized that I had to re-learn how to think in a totally new languge that everything starting to fall into place for me.
When I would encounter a problem in my code, I looked for typos, but I wasn't always understanding "why" my code was breaking. My biggest piece of advice would be this ... Don't copy and paste any code you are learning until you totally understand what it's doing!! Once you have a solid understanding, then you can copy and paste your code around, but my advice is to type it all out first. It will help it get into your brain!



Draw it. On paper. With a real pen or pencil.
Jumping right in can be a super fun way to just get going and get messy! Sometimes, you want to avoid messes, however. Stepping back with a pen and paper to visualize relationships and interactions, write down your order of operations, and making sense of it in a way you already know how can be extremely helpful.
Not only does it force your brain thinking of how to organize whatever you're working on, but you can end up with a cool visual when your're done! It may not make sense to anyone else, but most importantly, it makes sense to you!


It's okay to mess up and start all over!
Sometimes, you realize you're doing something wrong.. And you need to start ALL OVER because you're so far down a chain reaction path that trying to go backwards and fix things will take even longer. While it's good to know that you CAN fix it. STOP. Leave the issue as is, and start clean and fresh. Keep your old work though. It's good to go back and figure out where you went wrong in the first place :)



Confusion is normal!
When you start programming, you will be exploring new territory. It's thrilling creating something out of nothing, but there will be plenty of hiccups and stumbling blocks along the way. It really is a lot like learning a new language...and trying to write a book in that language at the same time!
Confusion is obviously going to be part of the learning process. Don't beat yourself up if you don't get it the first time. Keep asking questions and searching for answers. Take breaks. Come back to the problem again the next day. Often, possible solutions occured to me first thing when I woke up! And remember, google is your friend!



Have a clear goal when selecting a blueprint
For a long time, I've wanted to be a web developer but I didn't know exactly what it entailed. I enrolled in the web developer blueprint because it sounded like the right class to take. But now I realize that I should've taken the front end developer class because it's more in line with what I want to do.

			Read and watch lessons multiple times
You may have to re-read or re-watch lessons for the information to fully sink in and the concepts to make sense.

			Google is your best friend
Google is an invaluable tool to research any question and troubleshoot any issue.



You need to relearn how to learn!
Learning how to learn to code is the most challenging part of learning how to code.
You will feel like you are doing something wrong constantly, until you figure out how to learn how to learn to code.
Get comfortable with being uncertain, and using trial and error as a learning tool.
You will feel that youa are doing something "wrong" or not "understanding" until you become comfortable with using trial and error as a learning tool. It is in fact your most powerful learning tool.
You must also learn to let go of the feeling that you are doing something "wrong". The important thing is to understand the concepts you are trying to make function, and then trying things until you find what works.
You also need to give yourself permission take breaks, if you continue pushing past a certain point you will only confuse yourself more. Learning the power of the strategic break will save you many headaches and ruined codes.



Get in there!
My best advice is stop thinking and start doing.  Get your hands dirty.  Reading concepts from a book is useful up to a certain point, if you don't apply what you've read in some way it won't stick.
Google it!
If you have a question, chances are someone's already asked it on the Internet and have gotten an answer if not many answers back from the programming community.  You'd be surprised at how many people have encountered the same roadblocks as you.



Imposter Syndrome
Yes, imposter syndrome is real and it's not confined to programmers.  You feel like you a fake, a fraud, a total newbie with your new found programming skills.  Who would ever believe that you are a "developer"?  YOU have to believe in yourself and your skills.  Be willing to share your code, take constructive criticism and learn from others.


			Dog Training and Learning to Code
I'm a new dog owner!  What does owning a dog and learning new programming languages have in common?  Commands, of course.  I took my dog to obedience 101 training.  She learned a whole bunch of commands: sit, stay, down, heel, off, no, etc.  I'm learning a whole bunch of "commands" in my journey to become a front end developer.  Now that we both have seen and heard these commands we have to practice them.  My dog forgets to heel sometimes and we practice the "heel" command.  I have to practice my coding skills every day.  Use it or lose it!



Don't give Up!
This is your new motto when learning to code.  Everything looks like a foreign language until you start recognizing the symbols.  When your sentences (code) speak some foul language, your computer will yell back.  Yet don't take it to heart.  You two will communicate eventually.
Just like dating, you'll slowly figure out what he or she likes and 'Does Not' like.  So aim to please but expect a little feedback.  It all gets easier as time goes by. You'll eventually read the signals and figure it out before it all goes the wrong way.
Exploration is your new activity!
Google will become your new best friend, as well as stackoverflow and stack exchange.  Try your own code first but listen to their advice, since improving yourself is the goal.
Your code will seem lame compared to these pros but eventually you improve step by step and will not rely on them so much. Read, read, read, I can't say this enough.  The more you read the more you know and then practice, practice, practice.
As a former Fortran programmer, symbols and attributes are familiar but all this Ruby is Greek to me!!



Coding - where curiosity never ends
I started coding when the frames, tables and webpages looks like the default sublime text window. I thought, "How do you do that?". Then I became a view page source fiend. I copied, pasted and was breaking code as much as I was fixing them, but that's how I learned!
It takes a lot of patience when you first start out and you will make your first big mistake at some point - EVERYONE has. Just ask why, learn from it, move on and keep going!
I'm a mechanic!
At least, that's what my test results in high school told me I would be suited to. But instead of fixing cars, I fixed code. Flash forward to today, curiousity may kill the cat, but in development, curiosity helps you learn code.



“You may encounter many defeats, but you must not be defeated.  In fact, it may be necessary to encounter the defeats, so you can know who you are, what you can rise from, how you can still come out of it.” 
― Maya Angelou
“The greatest glory in living lies not in never falling, but in rising every time we fall.”
― Nelson Mandela
"Sucking at something is the first step to becoming sorta good at something."
― Ryan North
“You have power over your mind, not outside events. Realize this, and you will find strength.” 
				― Marcus Aurelius
P.S. Read this every time, when you're struggling! Good Luck !!! 



Happiness doesn't come from material things.
History is proof that money and material things can't buy happiness. Happiness comes from submitting yourself to your Creator, and living your life in HIS obedience.
If success was in kingdom, then Pharoah would have been successful. But he was life ended in disgrace and eternal favour because he was rebellious to his Lord.
If success were in wealth, then Korah would have been successful. But he was punished by Lord Almighty for being rebellious against the Prophet of the time
If success were in office, then Haman would have been successful. But he died in disgrace too and will be burning in hell forever for his misuse of office
 A smart person is the one who prepares for the never-ending, eternal life hereafter, search for the ONE true Lord and then spend his/her lifetime to please his/her Lord. 
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Figure out what you want to build first
If learning how to code is hard enough, figuring out how to start is harder! There are so many different programming language out there that it gets extremely confusing. It may even dissuade you from even starting. I know I almost quit in this stage. I learned, however, there is a different approach. You need to start with a project in mind--something that you can call yours.
Start with figuring out what you want to build. By doing this from the start, you begin your coding journey with a purpose. Everytime you get confused on what your next step in the learning process should be, go back to thinking about what else you need to learn to make your project happen. Curiosity will naturally take form and will motivate you to keep going.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
 Try as much as possible to make mistakes and break code. The code doesn't mind. The more mistakes you make the easier it will be to acknowledge them and seek out the answer rather than wallow in defeat. 
 Above all else, just try to have fun. That's the only way you will make it through that 5-hour debugging session that is just around the corner.



Confusion is your friend!
I wish someone had told me this when I first started coding. I had hours of frustration looking at my errors or misplaced styling
			only to learn that 6-8 hours later I have to stop, walk away and do something else.
 When it comes down to it, confusion and frustration are actually good things. It means that your brain is adjusting to the concept
			and working hard to comprehend and output the right answers. 
 In fact, the concepts that I felt most frustrated by I have remembered the best. So hang in there! It will get better I promise.



Things may come to those who wait, but only the things left by those who hustle. - Abraham Lincoln
Hustle Hard!
Stop thinking about that great idea! Just do it. Action is what separates the Accomplished from the "Ahhh, Dreamt Its!"
Pursue your Passion!
What do you want to do? Sometimes you only get one chance! Life's a big gap . . .fill it with gnarly stuff!
Get Yours!
Programming will help you materialize that dream endeavor! Get the knowledge, build the apps, create a name for yourself, develop a following, then look back at your naysayers (probably only yourself) and tell them "I DID IT! I DID THAT!"



Confusion is not your friend!
Look for a program that works with your learning style so you can understand what you're learning.
Confusion, therefore, is a sign that you need some help.
Expensive programs are not better.
There are lots of programs out there to learn to code. Make sure to find what works for you and combine resources.
Blah blah blah...



HTML & CSS are your friend!
Don't be afraid to seek information all over the web! Skillcrush is a good starting point but there are so many good places to find information on the web 
Your code will break, and you'll hit bumps all the time. Keep pushing through it, ask for help!
You're going to be confused All. The. Time!
It's totally normal that you'll be writing code and seeing it on your screen, but not knowing how or why it's there.
			Duh, you're learning a whole new language! It take's time and patience to figure things out.
Finally, learning to code is not a 10 week process, it's a lifetime process. Keep up with the new technology, read read read everything you can, and have fun!



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
You are not going to instantly become a pro
And you never will be. Languages and software are forever changing and you will always have to be a student. ALWAYS!!
Patience is key
 Rome wasn't built in a day and you won't learn to code that fast either. It takes time, patience and a lot of practice.





Maintain Perspective
“There is nothing noble in being superior to your fellow man; true nobility is being superior to your former self.” Ernest Hemingway






Persistence
“Be persistent. When knowledge and ability aren’t enough, be persistent."







The advice I wish I was given !
You sure going to enjoy coding after reading this advice
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
 Put more hours than you are asked to practice what you learn.
 When you follow a guided learning process, just like in all Skillcrush courses, you tend to rely on the information provided in each class. After your first month into coding you may feel like you know all the basics and are progressing towards becoming a developer. 
 The more you learn, the higher your chances of forgeting what you learn. Practicing is the key to perfect your new learned skills and to be able to do that you need to put more hours into your craft. Give yourself extra two hours every week to go through what you have learned in the classes and to practice through creating challenges for yourself. After each month build something for your friends or your portfolio using your new coding skills. 
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.






What I learned in learning to code...
Really it's all just a learning experience and you're bond to meet a few bumps along the way; the important thing is not to give up and practice makes perfect (well not quite but you get the point).
 And if you feel flustered, clustered and confused, it's always a good idea to take a break at the beach....



Do It Anyway ...
In high school, HTML was my favorite class.  In fact, my freshman year of college, I was a CompSci major.  I enjoyed coding, but -- at the time -- it did seem applicable in the real-world and I moved into the social sciences.  I found my way back to tech several years after graduating college, as a project and later a product manager.  But I hadn't attempted to really learn more coding.
I have spent YEARS not learning to code ... with all the excuses in the book:

"It's hard."
"I don't have time."
"I don't know how to get started."
"I need a degree in CompSci to code."
"I work with developers, so I don't need to learn."
"Coding is boring." 

Now that I've started up learning, I'm realizing, what was I waiting for???  I love this!  It's already helping my career.  The community around me is so helpful and collaborative.  Why did I hold out for so long?
So, my advice to you is to let go of the excuses.  Let go of the limiting thoughts holding you back.  Let go and just put one foot in front of the other.  No excuses.  Just tell yourself, do it anyway.  You think you won't be any good?  Do it anyway.  You think it's too hard?  Show up and do it anyway.  You aren't sure you have the time?  I'm a mother of a toddler.  I work full-time.  And I'm helping my friend cod her app.  All while doing Skillcrush.  Do it anyway.  If learning code is something that you want to do, I promise you that you will get better and you'll thank yourself for showing up and doing it!



Invest in a good reference manual, it will be worth it, 100%
Sometimes the lessons will kind of trick you, but don't sweat it.
Don't stop with the lessons, going above and beyond the basic requirements is totally worth it.
Many programmers will be pendantic, and argumentative. Everyone else is rolling their eyes at them though.
Figuring out why something isn't working, and fixing it is the best feeling.



Google is Great!
The great thing about programming and the problems that you run into along the way? Many other people have run into the same issues as well! A quick google search and you're find forum posts and discussions with people talking about problems and solutions that they've come across.
Documentation is amazing!
We've seen how helpful documenting your own code can be, but reading through the official ruby documentation can also be very beneficial. There's a ton of great code examples and a lot of great info on important methods. 
Run checks and tests constantly!
It's really easy to use puts to see what the value of your variables are at all times. Adding a check to your code is really easy to do and can give you very valuable info on how your code is working if you're running into any issues.



Work Methodically
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Working methodically will help keep you from getting confused and will allow you to build upon your newly learned skills, line upon line and precept upon precept.   If you try to jump ahead into something that you don't understand too soon, you might find yourself frustrated and stuck.  Unless you have a good mentor who can step in and offer advice on where you went wrong, you may have to scrap your entire project and start over. 
Test Code Often
Checking your work often is an important part of methodical programming.  This means building your application one piece at a time.

First you might write a line of code to print. (test it)
Then you might add some i/o. (test it)
Then you might try adding some variables, (test it again).
Add a method (test)
				... you get the idea...
			
As you add each new piece of complexity to your program you need to continue to test to make sure that the entire program still works.  
By programming methodically, when your code ceases to work (and it WILL cease to work at some point), you can simply comment out the most recent change and test the code again.   If it works, then you know that the most recent line of code is the culprit.
			
On the other hand, if you make too many changes at once you can find yourself in the predicament on not knowing exactly which piece of code broke your program.  
Don't Re-Invent the Wheel
While writing your own original code can be fun and exciting, sometimes the method you need has already been written.  It's often quicker and easier to look online and find some good, working sample code, play with it and customize it, but when it's obvious your borrowing code, don't forget to acknowledge your source.  
Thanks Peter Wolf for your lovely style-sheet!  It was a great jumping off point!



Take a break, but never stop!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and it can be scary to face the unknown.
Pushing that fear aside and diving in is the best way to learn. That doesn't mean every concept will come easy, in fact, most of them you won't succeed at the first time. But don't let the fear of failure keep you from pushing forward until you make a break through.
Sometimes you need to step back.
Have you been staring at the same code for more than an hour? There's something wrong but you have no idea what it is? Step away from your computer. Grab a glass of water. Check instagram for a hot second. Maybe take a quick bike ride around the block. 
Clear your mind of the issue for just a brief period and then revisit it shortly after.
A fresh perspective might be exactly what you need to solve the problem. If you still don't get it right away, that's ok. Hard work and persistency are key to being a coder. But don't be afraid to take a break when you need to. 



Don't Doubt Your Abilities and Your Intelligence
For years I've wanted to learn how to program and I put it 
                    off, following a different career path. This was becasue I
                    was comvined I either wasn't smart enough or that I was 
                    'too far behind'. I though I didn't have the 
                    math/logic/science background I would need to keep up.
I have recently found out that all of the above is bull****.                    
                     You don't have to be a genius to code, but you do have to be 
                    willing to think about things differently than our used to. 
                    You need to trust yourself, and forgive yourself. Both things
                    that are hard for many. Ho, and about the math thing? Please 
                    read 
                    Programming is Not Math by the great Sara Mei
Go Out, Take Chances and Meet People
I'll admit that I am a perfectionist. I didn't want to tell anyone that I was interested in coding until I
                      knew enough to 'talk the talk'. I have a feeling many developers/devs in training feel this way.
                      While it can be a positive trait- we teach ourselves so much it is beyond enough- it can also be stifling. 
                      
Go meet people before you are ready. Tell them you want to learn more about coding. Apply for scholarships, go to meet-ups
            , go to hackathons, join Twitter. I went to RailsConf this year as a total n00b and was shocked at how supportive people
            were of people starting out. It made me regret a little not going to meet-ups sooner. Stick your neck out-someone will see it.



Don't Be Afraid!
Embarking on a new journey, trying something new, will always be a scary step. Don't let fear and doubt stop you. Instead, use your fear to fuel your motivation. Everyone who is learning to code out is freaking out, confused, and frustrated, but that all comes with the territory (regardless of skill level, lol). Have fun. If you don't, you'll get so wrapped up in negativity you won't get better.
Take A Step Back, and then Breathe!
You're going to get confused. You're going to break something and not know how to fix it. You're going to want to cry and throw your computer. When you get to any of these points, stop whatever you're doing, walk away from the computer, and breathe. It's going to be okay.
There have been so many times when I get so frustrated I just want to curl up into a ball in bed. When I go back to the issue a couple hours later, turns out I was missing a backslash or didn't properly close something. Once you learn more, breathe more, and are more used to programming, confusion will be a normal part of the process. These obstacles will no longer bother you.
Code, Code, Code, and then Code Some More!
Never stop coding. Even if you know only basic HTML/CSS; that is enough to create a static site. If you get stuck or want to implement something you've never done before, GOOGLE IT! The internet is your best friend forever and has most of the answers you need.
So no more excuses! Just get in there and code!



It will be hard- Power through!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
You will want to quit.Shut off your computer and walk away. That's ok- talk a walk, go to the gym, take a break.
Then come back and keep going!
You will feel like a rockstar when it works!
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



When you hit a dead end, take a break!
This is a piece of advice that I have been given time and time again, and yet it is so useful that I felt I needed to repeat it here.
On many occasions, I have struggled over a problem, reaching the proverbial “dead end”, but refusing to quit because I have felt as if “I almost had the answer.”  However, the longer I persisted in “hitting my head against the wall” the more my frustration grew, significantly reducing my ability to think clearly. 
Eventually, either because of exhaustion, or because my husband dragged me away from the computer, I would take a break. And after an hour or two (or maybe a short nap), I would come back to the problem, and nine times out of ten find the solution within a few minutes. So, I think this is one of the best pieces of advice - when you hit a dead end, take a break.



You are technical! And I love sherbet.
"Technical" is a mindset, not a character trait. All you need to do is flex your techy muscles. Before you know it, you'll be thinking like all the nerds.
That doesn't mean it's going to be easy! We all learn in different ways and at different rates. If you want it, you can do it. But we all take different roads.
GET TECH FRIENDS
Remember all the annoying theater geeks in high school? How they all wore eyeliner together and walked around in a jaded group? That's what you need. Techies. You'll recognize them by the hunch in their shoulders, the bags under their eyes, the empty coffee cups, and their periodic fist pumps.
You need these crazy pals to help you when you're stuck, encourage you when you're floopy, and to spread the word about your new skillset. Your goal is to get all the gold coins right?
Do a little each day instead of a lot one day. Brains aren't that great at cramming. We learned that AGES ago.



Embrace the Errors!
You'll make a lot of them... and that's ok. The trick is to recognize that this is a part of the learning process, and therefore a good thing. It's not failure.
			In fact, each mistake teaches you something new and valuable... rote memorization of facts does no such thing. If you aren't making mistakes, you aren't challenging yourself. If you aren't challenging yourself, you aren't learning.
Learn From More Than One Source.
Every now and then you'll hit a point where nothing seems to be sinking in. Things that should make perfect sense... don't. This happens, and it's a normal part of the learning process. What it means is that your brain needs time to sort through all of that information.
This doesn't mean you need take a long, unhappy, unproductive break. Quite the opposite! Your brain simply needs to move over to a temporarily different teching method. There are many ways to learn code out there, whether it be a practical, hands-on training site like Free Code Camp, a learning game site like CodeCombat, a full course, or even a book.
Use one of these tools to allow yourself to see the same subject from a different standpoint. Then go back to your primary learning method and watch how much more your brain is able to take in. You've given your mind a rest without sacrificing learning time!
Just. Have. Fun.
Learning to code means learning to solve new and unique puzzles. Everyone likes puzzles. They can be frustrating, sure, but the end result always brings a sense of fulfillment, one of confidence. The same holds true with coding. Reminding yourself of that will keep you going when things get tough.
...and admit it: sometimes the mistakes we make are pretty darned funny. Go ahead and laugh at your mistakes. You know that you'll eventually fix them, after all, and the act of laughing reduces stress levels, which in turn, reduces the amount of time you spend fretting over something that turns out to be nothing more than a mis-typed character or a missing div tag.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
 I wish somebody told me how aggravating it would be to code at first. It's literally like learning a new language. I can't believe how much i have learned in 3 months and i will never stop learning this because its still all very new to me.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Quite frankly, you have got to be ready to give up.
You know it's been years that you've been thinking about it. Setting your alarm every night, dreading that hour, as it so quickly approaches, when you have to get up and start the grind all over again. Same routine, same path to the office, maybe you stop for that gourmet coffee, maybe you don't, but it's the same every day. Day in. Day out. Makeing certain that you are available to the boss, the team, the job. Stressing about the kids, the husband... Your "other" job.
You've spent years dreading it, and now you're ready to give up. You can't stand the idea of answering to another under-appreciative executive who has really no idea what you contribute but freely takes credit for the success meanwhile seems to derail your efforts at advancement.
Count to 10 and start over again.
It's gonna suck. You will find yourself sitting there at 2 am, in the dark room lit only by the glare of your screen. You can't sleep. Your obsessed. When you do sleep, you dream in code. Something is is wrong with the code and you can't figure out why. You've inspected every line and have ran your debugger more taimes that you can remember.
All you can do is walk away. Go do something different. Read something that has nothing to do with code. Take a shower, play some solitair. Just stop thinking about it. Go pour yourself a fresh Dr Pepper, thumb through that magazine your daughter "accidently" stole from the check-out line, take a deep breath and count to 10.
Then, when you least expect it, while you're taking a shower, drinking that Dr Pepper, the solution will come to you. Out of nowhere, you will have clarity. An epiphany will descend on you like a bolt of lightening. You will be full of energy, motivated to conquer that line with the error. You will rewrite it and it will work perfectly.
Until the next line...



Stay humble!
You will never know everything, especially in the art of programming.  Once you have mastered one thing, there is another facet of the programming world that will interest you.  Expand your mind!  Never stop learning.  Never hesitate to ask questions.
Stay amazed!
Technology is yours to control.  Before you think you've hit the limit, there's a million other things possible with your knowledge, and knowledge to gain by attempting all of the possibilities of technology.
Stay crazy!
Don't limit your thoughts.  The barriers that you put up are the only ones that exist.  Don't ever let anyone tell you something can't be done.  If they say it will be really hard and complicated, well there's a worthy challenge for yourself.
Remember that Google is your friend.  The trick to finding anything you want on Google is just how to word your query.  When it comes to popular languages or technologies, there is a chance someone has run into the solution!  You can basically apply the Simpsons Already Did It mentality.



Hullo, I'm Rose Jermusyk, and I learned this the hard way.
When I first started in Skillcrush's Wordpress Developer Blueprint, I came to the game late, about a week before the first month of guided coursework ended. So I plowed through everything in that one week and - feeling pretty smug with myself - pulled out the Brady's Irish Cream to celebrate.
That was my first mistake. Not the drinking part. The not-making-sure-I-was-actually-done-with-all-the-coursework-before-I-started-drinking part.
Celebratory drinking is all well and good so long as it is actually time to celebrate because All The Things are done.
Such was not the case for me. I had numerous Irish Cocoas, got bored with waiting for the cocoa to be ready to get to the Irish part, and then it was just me and  the Brady's and the technology which I was continuously eyeing with pride. That was my second mistake.
When drinking, walk away from All The Technology. Don't keep clicking around all your hard work, don't e-mail your exes, and it probably wouldn't hurt to avoid Twitter (the obvious exception being during the Twilight Zone New Year's Marathon when everyone should have their phone set to tweet in one hand and a bottle of Prosecco set to open in the other). To recap, Mistake One was not making sure I was done with all the schoolwork before I started drinking; and, Mistake Two was continuing to be all up in the technology whilst the drinking was occurring.
You see, in my drunken state (let's call it Irish Rosie) I happened to notice that I had left one last lesson undone: Security and Back-Ups. Now, I'm a fairly confident person to begin with, but Irish Rosie is unstoppable. As soon as I the lesson video was completed I dived into the work of the lesson and - within a matter of minutes - had locked my root user self out of All The Things, made MAMP my mortal enemy, and totally killed my buzz crying "Oh, woe is me!"
So here's the trifecta of drinking lessons: (1) make use it's actually time to celebrate before pouring yourself a drink; (2) when the container is open, the laptop is shut; and, (3) if you notice something that needs doing and you happen to already be drinking/buzzed, write yourself a note for the sober light of day
After one week on catching up on a month's worth of work, it took one night to ruin it all and one very sober week to figure out a workaround (and that was before the from scratch rebuild). Learn from Irish Rosie's mistake and Don't Drink and Code.



Pick a language and keep at it
When I started to learn to code, I wanted to know everything right then and there. I keep jumping from HTML to CSS to JavaScript to Ruby to Ruby on Rails to Meteor and finally back to Ruby on Rails.  I wasted alot of time learning and forgeting and relearning.  Obviously HTML and CSS are very important as a foundation for Web Development but whichever route you chose to go after that stick with that all languages function the same way, just a diffrent syntax.
Find someone to do code reviews with.
At first I felt this was an impossible task as a newbie.  There are plenty of routes you can take.  Skillcrush is a great one.  As well as Code Newbies and joining one of their groups.  There are also sites like codewars and excersism.io that have you code and then talk about you code with others.
Write code
You have to constantly write code.  Just like learning anything else in life (a mucial instrument, or a new skill set at work) you have to practice what you are learning or your brain will not retain the new information.  Code ever chance you get.




Back to Skillcrush Home



Most important step
Thou art sad, get thee a mentor, get thee a mentor!!!~William Codespeare, Much Ado about Errors
My favorite book
Pragmatic Thinking by Andy Hunt
Race your racehorses, not your sheep!


Always consider the context.
Use rules for novices, intuition for experts.
Know what you don’t know.
Learn by watching and imitating.
Keep practicing in order to remain an expert.

				With apoligies to Allen Iverson
			

Avoid formal methods if you need creativity, intuition or inventiveness
Learn the skill of learning.


My top five favorites resources 


SkillCrush

Railsapp

Apprenticeship Patterns
Mastery, the keys to success

Set aside time for extra research!
The great thing about this program is it makes Ruby and Git fun.  There is a lot of information and some important things are just quickly mentioned. Set aside some time each night to do a little research on what you are studying.
A simple google search is very helpful and you will probably find yourself often at a place called Stack Overflow.  This is also a good place to ask questions.
This advice is from Skillcrush but I like it so much it needs to be said again:
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Sometimes it's the simple things
You can spend minutes or even hours staring at code, wracking your brain about what's wrong with your logic when all along it could be a simple syntax error!
Take a break!
Speaking of staring at code for hours, I'm sure we've had our moments. Stuck on a issue you can't seem to solve it no matter how many times you run through the logic. Sometimes it's best just to take a break! This could be applied to any project in life but it's best to take a step back, relax, go out get some coffee, and face problems feeling renewed.



Programming Is Fun!
When you start programming it's exciting! It's challenging and fun! And it's an opportunity to learn something new that a lot of people just don't understand.
It can also be a bit aggravating and frustrating at times. But if you persist and manage to figure out whatever the problem is, it is such a satisfying feeeling of accomplishment!
Practice! Practice! Practice!
When you are learning a new technology, like writing code, you need to just keep practicing! I am continually, (possibly, addictively) tweaking various new code-y things I have learned to see 'what happens if I do this?' or 'what happens if I do that?' 
Trial and error is a great way to learn how things work.
		


Be patient with yourself!
When learning to code as well as programming, I had no idea of what I got myself into.  You see...all this was brand NEW to me.  Sometimes, I would become so frustrated with myself because I felt like it wasn't clicking and just wanted to give up. But I managed to keep pushing through.
In order to survive, you have to learn patience with yourself.  Learning how to relax, laugh at yourself, and not get overly excited can be detrimental in any obstacle you pursue in life.  As Confusion stated "it is a sign that you are heading in the right direction."  So, take your time, learn the concepts, and ask plenty of questions.
 Before you realize it everything will not be a blur and things will finally come together.

			Most important part: Practice, Practice, Practice.
When you are learning a new technology or programming language there is never enough practice.  Practice when you are learning, practice for understanding, and practice to see if things could be done more efficiently.  The more you practice, it aids in your knowledge of understanding exactly what is happening and why its happening.
The most critical part is training your mind and eyes to think and see things differently (as a programmer, designer, etc.).  Additionally, make sure your math skills are up to par because math is involved when dealing with technology.
Most of all, please remember to  enjoy your learning experience and have FUN!  It lasts for only a short time frame and then you are on to something.



Not to sound like a cliche, but ...
If at first you don't succeed, try, try again! Odds are you won't understand everything right away. I know I definitely don't. It's extremely easy to get frustrated when you run into something you don't understand or can't get something to work properly. Keep trying. Ask questions. Google it. If you stick with it, when you figure it out or get it to work, you'll feel amazing.
It's never too late to learn new technology.
When I was younger, I loved building my own personal websites. I'd spend hours teaching myself HTML and Photoshop. I'd constantly change the layouts of my personal sites just because it was fun. It was fun to see what people did with their own personal sites. But somewhere along the line, I stopped playing with HTML. I'd thought of it as a hobby. Figured I probably should have majored in something related to computers to pursue it as a career. Years later, I realized I missed it. It's been fun to dive back into HTML and CSS, seeing what I remembered, and updating my skills. It's never too late to start learning.
Don't be afraid to take a break.
If you hit a roadblock and really can't figure something out, try stepping away from it for a little bit. Take a walk. Clear your head. Take a deep breath. It's easy to get really frustrated. Sometimes a little break is all you need to help conquer those roadblocks.



Embrace the error
Basically, read the whole error message and try to understand it. Straight up. Don't just sit there and feel like a failure when it doesn't work the first time, when you see the word "error" followed by a million sentences. Really try to understand what went wrong and use that message to solve your problem. You got this.

Take your own advice
I'm sure we're all writing beautiful pieces of advice for each other that we don't always follow. For example, in the above scenario, I dread error messages and I let them discourage me. I'm advising me, and you, to follow our own suggestions because we are often those that can pinpoint our weaknesses and can recognize how best to work on them.





Notice the details, but don't get lost in them
The fine details are super important when it comes to coding and avoiding future nightmares.

			However, precious learning time can be lost if you allow yourself to get hung up on details of relative unimportance.
			Focus on seeing the big picture and the details will come back to you or you can tap into resources you've saved along the way.


Repetition equals talent
You won't develop a talent or skill if you don't repeat it. You won't repeat something unless you are motivated to. You won't be motivated unless you have a natural desire or see an urgent necessity.
Find your motivation and discover your true skills and talent.





Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Keep Current
Read everything out there and stay current.  Skillcrush and Free Codecamp are your friends!



I've noticed a pattern every time I encounter a problem while programming:

			
Hit a wall/something breaks
Ugh, frustration!
(Whining) I don't see an obvious solution!
Wait...now a slight panic.
Do I know how to fix this? Oh no, I don't know how to fix this.
Snack/TV/reading/bathroom break
Google problem, find a couple answers on stackoverflow
Hack hack hack
Panic subsides
Problem eventually fixed or at least minimized
I feel awesome.
I realize I knew the answer all along.


Coding is problem solving. Every problem is an opportunity. Break the problem into pieces. Try to find the kernel of the issue, and Google the hell out of it until you find something that clicks.
And eventually you will. Every time.
I'd spend hours styling this, but I want to move on to Gems!



Just keep swimming!
 No matter how lost, confused, or stressed you get just keep going. JavaScript was probably the hardest thing for me to understand and it is still a concept out there. It will be fine and get better.
			Get the word out there!
The more people you know the more help and advice you get. Even if this is a scary thing for you.
Fake it until you make it!
If you fake it you will eventually understand what you are doing and eventually will become more knowledge than you could guess.



"Great people do things before they are ready."
Jump in with both feet, trust yourself, and try your best. You never know where an opportunity will lead you.
Don't ever stop learning
Say it with me: "Google is your very best friend." The answer is out there and everything is figure-outable.
Have a goal
Mine? Fund our entire Disneyland vacation (including a stay at the Disneyland Hotel!) next year solely from freelance jobs... I'm ¼ of the way there!



Confusion is your friend!
When you start programming, you are doing something you have never done before. This is a new challenge, new opportunity, and something that's most likely never been done before.
If you are confused while you are coding, don't get discouraged! It actually is a sign that you are heading in the right direction. When you are confused, it has started a problem solving pursuit that combines math and technology. This just means that you need to keep looking and keep working to make things clear.
When I got confused, I always read my code over to focus on what I was able to understand. Once I review my code, I use that information to fill in the pieces and figure out what I don't know. If I am still unable to understand what I'm learning, I will try searching for information about areas I don't understand.
Suspended disbelief plays an important role.
When you are learning anything new, you often go through an uncomfortable phase where you simply look at your code and don't understand what is happening with all the commands you are putting in. We have all been there. This is a normal part of the learning process and actually is one of the most important parts to the entire process.
As you work with a new programming language, you are training your eye to read and understand code. The way you train your eye to read code doesn't happen right away. You'll often feel silly for trying to read code when you don't understand what it's doing. However you will get better as you keep working with code and reading it.
The key to learning how to code is practice. Learning to code is exactly like learning to play an instrument or a sport. The more you practice, the better you will get at reading and understanding code. You can practice by building sites and apps for scratch. I like to open new files and rebuild projects I done from scratch to see what I can do as well as areas I need to review.
Get involved in your tech community now!
Learning how to code is a collaborative process. Developers want to help each other and make our lives easier. Let them do it! 
There is constantly new information and ideas happening throughout the tech community. Sign up for newsletter and follow tech blogs. Join a forum and chat with other developers. The best way to learn tech is from others already holding tech jobs!



Confusion is Your Friend!
The first time you write some new code, you're probably going to make a mistake, or two, or five. That's OK. In fact, don't even worry about getting it right the first time because the other side of making a mistake is learning to fix it.
In fact, you're more likely to remember what you've learned if you do have to go through and fix it, than if you got it 100% right the first time. And yes, it's annoying, and it's frustrating, and you'll probably get pissed off at not being able to fix it. That's still OK. Take a break, have a snack, listen to some music (my preference is The Division Bell) and, once you're calmer, go right back to it.
That's Impostor Syndrome You're Feeling
You're going to feel like you don't know what you're doing, that you'll never be as good as all the other coders out there, that you'll never know all of it.
You know what? This is still OK. You're just learning, so it's OK not to feel 100% comfortable with what you're doing. And all those other coders? They probably felt exactly the same way you do right now. And no, you may never know all of it, and that's fine because you don't need to, you can find out.
Finally, you're probably going to feel like this every time you start something new. Don't worry about it, it's normal. You'll get there.
You'll be OK.



It's not all numbers.
Most coding doesn't require high-level math skills. You probably already know all the math you need to know! Coding is much more about learning to think like a computer, not doing tons of calculations. In fact, your computer should do the math for you!



Patience and Perseverance!
When your head feels heaviest, you are making progress!  This moment, you can go and take a break, the important thing is that the next day you come back, and the next and the next.
I used to think that you had to keep at it, endlessly, but that is not how the brain absorbs new information.  You need to let it percolate for a bit, then push it a bit more.  Pretty much like exercise and weight lifting. 
Patience is the key, sometimes you feel like giving up, but let me tell you, its always TOO soon to do that.  Keep at it! :)
Cat Ipsum.
Cat ipsum dolor sit amet, run in circles for stretch. Run outside as soon as door open lick arm hair and scream at teh bath and nap all day pooping rainbow while flying in a toasted bread costume in space and kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. 
Sleep on keyboard meowwww or find empty spot in cupboard and sleep all day scratch at the door then walk away. Pelt around the house and up and down stairs chasing phantoms curl into a furry donut. Sweet beast burrow under covers stare at wall turn and meow stare at wall some more meow again continue staring for toy mouse squeak roll over, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Sun bathe sit on the laptop where is my slave? I'm getting hungry kitty loves pigs. 
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.




Celery pea sprouts sweet potato or kumara!
Spring Onion sweet potato or kumara endive tomato canna brinjal chicory good king henry ti, samphire swede salsify. Garlic swiss chard mooli prussian asparagus tigernut cucumber, american groundnut. 
Sea beet asparagus squash courgette ginger - orache pignut dandelion skirret dolichos bean. Kuka, parsnip garlic; beet greens. Soybean corn salad chickweed. Asparagus, mooli radish, good king henry, good king henry, golden samphire kurrat turnip rutabaga. 


Sweet pepper cabbage eggplant gobo lizard's tail potato gumbo.
Celery polk, jerusalem artichoke garlic radish welsh onion orache chickweed. Polk leaves, zucchini celery tomato pea. Yardlong bean celery, brinjal daikon wild leek zucchini tinda chinese cabbage? Wild leek florence fennel - squash. 
Soybean elephant garlic yardlong bean - zucchini pak choy tigernut. Lizard's tail moth bean, taro pak choy radish, tatsoi, sea beet sea beet. Pumpkin; cabbage paracress radicchio florence fennel onion pea sprouts. Florence fennel - napa cabbage brussels sprout sweet pepper soybean; fat hen yam kohlrabi? Prussian asparagus, lentil moth bean chrysanthemum leaves celery kale endive ulluco. Ricebean, chinese artichoke horseradish. 
Horse gram pea sprouts pignut fiddlehead brinjal tomatillo skirret, polk polk chickpea. Urad bean - cauliflower tomato bok choy napa cabbage, polk. Catsear; chickweed good king henry ricebean cardoon jerusalem artichoke, elephant foot yam. Peanut samphire turnip; plectranthus courgette swiss chard. Garden Rocket radicchio epazote onion tomato jerusalem artichoke prussian asparagus sweet corn aka corn; aka maize land cress pumpkin collard greens. 




Practice Isn't Perfect
Though I know that practice makes perfect, sometimes the idea of perfect keeps me from the point of practice: learning new skills.  Don't let the details keep you from moving forward.
Write code often and with abandon.
Bookmark Your Roadblocks
If you really hit a roadblock, bookmark it temporarily and move on to something else.  If it's a real doozy, drop some questions in a forum, and then step back.
Working on another part of your project can give you a sense of accomplishment and remind you that you have skills!
With some fresh eyes and boosted morale, return to see what more you can tackle.  Bit by bit, you'll get there.



Girls can code too!
♥ I know this may seem silly to say, but I'm going to say it anyways; girls can code too! Never in a million years did I ever think I'd be interested in programming. I never even thought I was smart enough or that I would enjoy it AT ALL. But boy was I wrong! I used to think that programmers were smelly dudes coding in their basements all hours of the night, with absolutely no social skills at all. Kind of harsh but I'm just being honest! Women may be outnumbered in the industry, but don't let that deter you from learning (assuming you are a female) because we can be programmers too! You ARE smart enough! ♥
Google is the shit.
♥ Seriously, part of being a good problem solver is being efficient at finding the answers, even if that means using Google as support! There are TONS of free resources available to you; USE IT! You don't have to know everything! And no, it is NOT considered cheating! ♥



Confusion is your friend!
Learning a new language can be exciting, scary, and challenging. Coding is no different. It's fun when you start to learn about the different tags and see everything come together. On the other hand, it can be very frustrating when you are trying to do one thing, and another happens. The main thing to remember is to keep at it! Don't give up!
Confusion is natural. We all have moments when we wonder what is happening and why we decided to embark on this journey. Try something new and hit refresh! Eventually, you'll get there and one of the best feelings in the world is to hit refresh and see on the page what you envisioned in your mind!
Impostor Syndrome is Natural
Think you stick out like a sore thumb? It's possible! The truth is, we all experience impostor syndrome at one point or another. The fix? Keep at it anyway! Maybe you don't "belong" in the tech world...yet! Practice may not make perfect but it will certainly help you become better! Find time to make coding a part of your daily schedule!
The most important thing you should know? You CAN do it! Don't give up, even when you think you should. It is possible for you to learn something new and you will be happy you did!



Practice Practice Practice
When you first start learning to code don't stick to the first tutorial or lesson guide you find. Try all the different ways to learn programming there are. Not only does it keep the learning process interesting, you might find one method of learning is better for you than another, it also serves as extra practice.
No matter how many times you come across a lesson that you've done before in another place, do it again, if you've got it down pat then it shouldn't take you long. And if you still need practice then it's another opportunity to get more practice.
My biggest piece of advice is to keep seeking out practice until you can do whatever it is you're interested in, in your sleep. There's no such thing as too much practice. 



It's all about Practice
Practice, practice, practice!  I need more practice than the daily activities provided. So I used Codecademy and Code School for extra instruction and practice exercises.
Read! Practice is great, but reference books will explain some concepts in more depth
Stick to a schedule. It's easy to get behind and rush through it. But doing everything once a week means you won't retain much. Set a schedule and stick to it!

Good Luck!!



#1 Read everything very carefully.
For newbies like me, learning to code takes a good deal of time and patience. But most importantly, it takes A LOT of focus! You can't just skim over your lesson resources. You HAVE to read them all very carefully, as you're going to encounter many new words and phrases.
#2 Google is your friend.
Having trouble understanding something in the lesson resources? Google it! There are so many great resources on the Internet that can help answer your questions and supplement your Skillcrush learning.
#3 Don't give up!
I can't stress this enough. Learning to code is EXACTLY like learning a new language. Practice as much as you can. Even if you're ready to pull you're hair out trying to figure out one of the lesson challenges, keep chugging along. You know what they say: practice makes perfect!



Think About It- No, Seriously
When you don't understand the concept being explained to you, think about it for a while. Step away, address it again. if you still do not get the concept, yes, you may ask but you can also Google. There are visual aids and less technical all about the internet and some people need that boost of understanding.
Talk to Developers
If you know a dev, get some chat time in. Discuss code, practices, etc. Don't necessarily turn it into a Q&A; as that's not the most fun for them (and that's what you have your wonderful Skillcrush instructors for!) but a real discussion. Gather that experienced logic and understanding. It will cue a spark that will re-enforce everything you're learning.
If you like it, great! But if not, that's fine too!
There's a lot of pressure being placed on jobs in tech and coding but if you don't feel it is right for you, that's okay. If you love it, keep at it. Stay with it. CODE FOREVER!! :)



Distractions
There is always a learning curve when you are trying something new.  Here is some advice to minimize this learning curve.


Work on your coding when you are mentally at your best
Dedicate at least an hour each day
Take a 5 minute break every 20 minutes
Ask for help sooner than later




Keep Going
It is inevitable that you will get stuck.  You’ll exhaust yourself researching a solution.  You’ll reach out to others for help and still be unclear. I found that if I just keep going in the lesson my understanding becomes clearer and eventually a light bulb turns on to the issue that I was facing.


Never Give Up
And finally, if you are like me transitioning from another career field, you may say to yourself after many days of frustration, “I might be better off just staying where I am”.  Don’t give in to this negative commentary.  Just remember if it is your passion it is worth it to never give up.



Don't Give Up!!
There are going to be times when you suddenly feel like you don't understand anything.
(This will most likely occur when you start trying to figure out JavaScript.)
DON'T GIVE UP!!!  You're not too stupid to do this, it's not beyond you, it's just a completely different way of thinking that you're not used to yet.  Keep at it, keep trying to figure out how to solve the challenges, and when you can't, look at the solutions and make sure you understand why they work and yours didn't.
If all else fails, know when and how to ask for help.  Mightybell is great, but GOOGLE IS YOUR LIFELONG BEST FRIEND.  If you can figure out how to ask the question, it %100 DEFINITELY has the answer.
Eventually things will start to click, and you'll feel like a total rockstar again.



Practice Presistence
 The act of trying, even a little bit of coding everday or on an unnegotiable schedule is really important. Like any muscle training such mental exercises strengthen your learning, interest and confidence in coding.Recognize that learning something new will make you feel uncomfortable, displaced and even discouraged at times. But facing coding regularly, hopefully everday will create a mind shift if you are truly interested in web programming.
Start looking for a job  and don't be discouraged by those long job skill requirements on the job ads.Search for freelance positions on LinkedIn, Dice, Craigslist, Power to Fly and network. Yes, you are a serious introvert but networking is doable and finding a position in the web developer can be your reality sooner than later.
			
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



When times are hard, don't give up, Just hang in there
Learning how to code is not an easy journey, but when you have good guiding platforms like skillcrush, you tend to enjoy it as time goes by and not forgetting the support you get from your fellow classmates
Giving up is not optional when you want to achieve your goal. Keep trying, keep practicing and you will eventually get it right, and enjoy repeating it and getting creative about it each day
Hiccups are always going to be present 
Learning how to code can be very scary and intimidating when you're a women cause you overlook little mistakes we make and think because of our gender and that the opposite wouldn't make the same mistake, that is just a myth though. If you learned and skilled enough, you are capable of becoming a good developer or designer,regardless of your gender
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
Remember, don't be discouraged, put your confidence face on and be ready to face the world and show them that you're a Kick ass coder!



When I opened myself up to programming, I was so hard on myself because I was confused! And being confused about something usually means incompetence (to me anyway). There's also those deep rabbit holes I had to deal with, and being afraid of choosing the wrong one. Experts advised me that I need to be good at Googling. But how can you know what to ask? What choices are available when not knowing whats possible?
What I learned about myself is that I stuck with the struggles like a masochistic fool. But that taught me so much. From gained patience, I handled better ways to problem solve and knowing how to ask for help and when. Heck, I even began meditating as it helped me problem solve towards a base case (pun intended) The point is to stick to it. Even if it feels like you're going no where. Stick to it until you feel like you've exhausted all your options. Believe me, you will get an answer before this happens. 
Before you throw your laptop out the window, remember that frustration is normal when programming. You'll run into bugs and not know what you did wrong. It's kind of like accupuncture, where needles are placed on the leg when the problem is just a headache. The point is, you'll grow to know what nerves are connected to what. Just treat your program like a sick patient. He/she knows not whats wrong, and thats why you're there to fix it. This thinking also prevents you from throwing your patient out your window.



Less is more
Your first instinct when you learn to code is to try and write as much code as you can. Before you know it you take a look and everything just looks jumbled. The secret is actually to try and not write code.
It's counterintuitive at first but once you've written about 1000 lines of code you will start to see how much easier that code would be to manage if it was only 500 or 250 lines.
You don't need all the answers right away
Your goal is to know how you're going to go about solving problems you've never encountered before. You'll want to know where to get answers to your questions and start collecting those resources in one place
Expect to be confused and not know the answer. Once you're comfortable with that you'll just get used to doing your ritual solve-a-problem research. 



Hit the Boards
I can't emphasise enough how important your mentors are you your learning.  Hit those message boards!  Mightybell, Mightybell!  You may feel rudderless at times, but I want to tell you, you're not!  Your friendly, loving Skillcrush TA is actually right there with you, holding you up from underneath when you think you're drowning.  Don't let this resource go untapped!
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Coding is an Open-Book Test...
...and the WORLD is the book!  It's all around you!  Pull info from everywhere, everything, and everyone!  There is no such thing as cheating.  It's a different philosophy than most are used to, but that's why coding/coders/technology is so frigggggin cool!!  We are the future.  We are the vanguard.  Open source!



Hit the Boards
I can't emphasise enough how important your mentors are you your learning.  Hit those message boards! You may feel rudderless at times, but I want to tell you, you're not!  
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Coding is an Open-Book Test...
...and the WORLD is the book!  It's all around you!  Pull info from everywhere, everything, and everyone!  There is no such thing as cheating.  It's a different philosophy than most are used to.  We are the future. Open source!


Su's Advice

Don't be Afraid to Fail
Life will move on without you, so get on with the work of living.

Say Yes to your Potential
We all have a purpose and a reason.  What is yours?

Learn from Everywhere
Everyone and everything can contribute to your development.  Take it and use it.

Give Ideas a Chance to Develop
It may not look like a good idea now, just wait.


Google is your best friend!
Google is like a magic box, whatever you ask for google will find answers for you or close to what you are asking for.
Repetition is The Mother Of All Skill
There will times that you run into a problem or learning curve, so if you want to be a great developer you need to practise your programming skill, over and over.



Fake it til you make it!
When I started this class, I knew nothing about wordpress, or coding, or technology in general.
Now that I've made it this far, I still don't know what's going on most of the time, BUT I keep up with the lessons and always seem to stay on track!
Don't be afraid to ask for help when you need it!
People can't offer to help you if they don't know that you need it! Don't be embarrassed. We've all been there! Just ask.
Stay positive and keep persevering!
You can do it!



Review Review Review!
Once you start to feel things click make sure you continue to review the material and give yourself time to practice so you may solidify the learning that you have done. This will help to make you feel confident in what you have stuided and urge you to keep powering through new topics.
 Put yourself out there!
Step out of your comfort zone and join a meet up group. Volunteering is a great way to put yourself out there. You work individually the majority of the time, step out and meet people face to face to help humanize the work you are doing.


Poverty is NOT your friend!
No matter your faith, know that your God wants you weathy. He just doesn't want the wealth having you. So learn from Skillcrush while you have the opportunity, and make money to invest in the forex market.
Be in good health, you cannot be creative if you are feeling poorly, money can buy medicine however good health comes form exercise and eating properly. Remember there are many people that are depending on your creativity.
VISION IS THE KEY TO YOUR PROSPERITY
Trust your ideas, there will come a time when your idea it is the needful thing.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Been There, Done That
The command prompt, and its baffling, unintuitive behavior, reminds me of the confusing times, hundred years ago, when I worked on my first computer — an IBM XP, using DOS commands. 
How I must have longed for a GUI interface and the 'explorer .'' command to make it all visual back then! I just didn't know yet what I was missing...
Cursing At Your Terminal?
Don't get discouraged. After you tried and tried again, there's a shortcut. Don't tell anyone. Recently, I wasn't able to push anything to GitHub via Git Bash. Error messages galore and nothing worked. I fiddled and cursed, remembering the old days using DOS, pulling my hair out. And then I caved in and used the Git GUI instead.
...And that worked. It felt a bit like cheating — but hey, that's progress.
Now back to your command prompts for another try......



Practice, Practice, Practice!
It's a common belief that practice makes perfect, and I totally agree! Though I'm a devout believer, it's often hard to muster up the motivation to keep at a new skill. It can also be discouraging to see others so much better (and so much younger!) than you pumping out amazing stuff.
The one thing to remember is that everyone has put their time in to achieve their level of greatness—natural talent or not! So find a project that interests you and use that as your motivation to practice your new skill. Get excited about the end result—and the journey getting there!
Sometimes A Break is Just What You Need
I often get frustrated or bored with what I'm working on if I spend too much time on it. Taking a break changes up my scene, gives my brain a reboot and allows me to think clearly again.
Sometimes it's the change of pace that reignites your love for your project. Don't feel guilty for taking breaks! They're a necessary part of the process.



And so are you!
We are all weirdos! YAAAAAY!
Things will break.
It will not always be your fault. (Thank you Women Who Code meetup for this)
Find what works for you.
Not all methods are equal or the same - do what you want.
Find a friend who codes and hassle them for advice.
Hey Matey!



Things I Wish I'd Known
At first, I wanted to learn to code to see if it would be something that I could do. I was an English major, not a techie.
				I immediately found out what I had hoped: I loved to code.
Learning to code meant big changes for me. I'd been trying to make a living as an adjunct writing instructor, but discovered that
					adjuncts aren't paid a living wage. I'd gone to grad school and all I got were some fancy letters after my name. I knew that I needed to find another way
					to make a living, but I had no idea how I could do that. Enter, Skillcrush.
I started with the 10-Day Bootcamp, quickly followed by the Web Developer Blueprint. But midway through my Blueprint happened to be towards the end of my fall semester.
						I let class planning, grading papers, and driving to different campuses get in the way. I was exhausted. I'd get to coding later. 
Here we are, nine months later and I'm just finishing up my first Blueprint. When I started this crazy coding journey nine months ago, I should've made it a priority.
				I needed to schedule in the time to work on a lesson a day, not cram on the weekends. It's easy to let your current job take over. If I can give you one piece of advice, it's to prioritze your Blueprint. Set boundaries.
		Although it's taken me a long time to get here, I'm starting my journey as a developer. I wish I'd known it was going to be this fun.





Persistence is key!
Keep practicing and it will become easier over time.






You will run into problems but don't give up!
Before taking this course I was already familiar with CSS and HTML but I had never learned a programming language before.
Naturally I ran into a number of problems and even though I got frustrated I just kept saying "don't give up, don't give up."
Evenutally, I solved the problems by either asking for help or researching for solutions on my own.
So whatever you do, don't give up!



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Remember to breath
When you are working out, getting sweating, and feeling the pain, remmber to breath. That's what they tell you to do at the gym. Do it when you code. Take a deep breath when you feel the burn. No pain, no gain. 



Just keep going!!
You have to keep on reading and typing and it will eventaully make sense!!
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



OY-VAY, Coffee, Grey hair, and a Boss mentality
Look.  I'm not going to beat around the bush.  Technology is difficult to understand.  HOWEVER, you WILL succeed.
It is super easy to just put off learning something new. It will be easy to let your mind wander. Don't let that come in front of you and a great future.
You will learn something exciting, something new, something you can walk away from and come back and knock technology out of the park. You will climb mountains. You will come to a dragon and that beast will draw a line in front of you with a great fiery blaze...but you will cross that line more than once.
Deep breath.  And now the plunge.  You Boss.
Yes it is simple.  You either will or will not do it.  The choice is yours.  Take the blue pill or red pill (Matrix reference).  You are Neo.  You will see how far the rabbit hole goes.  You are a boss and will prevail.
Self-doubt.  Can't.  Won't.  Impossible.  These words are meaningless.  Focus on the words Can, Do, Yes, Win, and Winning
Coffee and being a boss did it for me.  What will do it for you?






R Travis Brace
May 9th, 2015


Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.


Take a breath
There will be a point (more than one!) where what you're doing has you fuming and ready to tear out your hair.  That's a good point to walk away and take a few breaths.  It's natural, it's normal, and it happens to everyone.


Don't give up!
There may be times when it seems like you're in way over your head. Those are the moments you need to give yourself a break. Take time to focus on something else. Do something for you. Then, come back to your problem with a clear head.
Sometimes, all it takes is a new perspective.



Learning
Doing something new can be frightening, but taking small steps helps in conquering it.
Some people talk about Confusion as part of the learning process.  Is real! Sometimes the feeling can be overwhelming, and for some the natural response is to stop. Don't, it takes time to assimilate new learning.
When you keep going through the lessons and doing the challenges, little by little everything becomes a bit clear. You should keep in mind that in addition to asking questions, sometimes it helps to search the internet.
Perseverance and Passion are important in learning
Learning requires patience, which for some us is difficult to keep because we want quick results.  This is when perseverance comes in. When you believe you are not achieving things at the pace that you want, don't be dissapointed, this is natural.
Perseverance allows you to keep going even if you see no progress or find many difficulties.
We should keep in mind to take breaks and let the knowledge sink in. I know for some it may not be a choice because we are sometimes hardwired to keep going until we get it, but a break allows the brain to process information.
Lastly, when you are passionate about something spending time on it won't matter. It will allow you to enjoy the process of discovering that each day you know a little bit more.



Don't be afraid to make mistakes
Mistakes, obviously, show us what needs improving.Without mistakes, how would we know what we had to work on? -- Peter McWilliams
New designers and developers make a lot of mistakes.  People who have been programming for 20+ years, like me, make a lot of mistakes.  Don't worry about how many mistakes you make. The trick is to get up, fix them, and keep going.
Ask for help
Your Skillcrush instructors are there to help you.  Ask questions in the MightyBell circles. Your fellow students may be struggling with the same problem.  Maybe someone else has already solved it, and can give you a hand. You'll never know unless you ask.
Use on-line resources
There is a wonderful set of tutorials at w3schools.com.  They cover just about every aspect of HTML and CSS, and they provide a practice area where you can try things yourself and see immediate results.  You can search for a term and find the reference page for it quickly and easily.
Another good on-line resource is stackoverflow.com. Search to see if your question has already been asked, and if not, ask it.  The articles there are super-helpful. The explanation of why something works can get a bit technical, but the articles do explain what to do to make something work.
Invest in a couple of good reference books if you can
My favorites are the "Missing Manual" series (Creating a Website: The Missing Manual, HTML5: The Missing Manual, etc.).  They're not books that make you want to sit down and read them straight through.  But they're really well-indexed and therefore make it easy to look up the topic you need.
While I love my Kindle and e-books in general, I still think it's best to invest in a paper copy.  That makes it easier to mark all the pages you will want to be able to come back to later.
Don't give up!
In the words of the immortal Winston Churchill, "Never, never, never give up."  Learning a new language is hard.  Learning new programming languages, like HTML, CSS, JavaScript, etc. is also hard.  Stick to it, and you'll find it gets easier with time.
And a final word...
When you're writing code, there will be a lot of times when you don't feel like you are getting the results you wanted.  I'll leave you with a final quote from Albert Einstein:
			Results!
				Why, man, I have gotten a lot of results.

Everything is Figure-Outable.
In a feminist group I work with, one of the women last week told a story about her discovery that her "tech-savvy" boyfriend was really just using google.   That realization spurred her to take ownership of her trajectory in tech, and spawned the mantra "Everything is figure-outable."   Whenever I'm feeling overwhelmed by the sheer amount that I don't know, I take a deep breath and repeat to myself that everything is figure-outable.  If it's not coming to you yet, don't stress out.  The slow, steady learner ends up having the most thorough understanding in the end. 
So, whenever you're feeling overwhelmed--give yourself a break!  Everything is figure-outable, you've just got to put in the time.   The more work you do, the clearer things become.  And, of course, there's always google!  :)
Code Every Day. 
I have a tendency to work in manic cycles--in two days I can spend twenty hours coding, but then I won't look at my code for a week.  This has been my biggest struggling point, as my brain calcifies pretty quickly.  Every time I spend a week away from html, or css, or java, I have to spend precious time reminding myself of basics--syntax, positioning, the layout idea I was working on--when I should be using that time to spruce up the project.
While, obviously, you can't code EVERY every day (my mom would totally kill me if I tried to pull out my laptop during Thanksgiving to do a bit of work!), it's good to get in the habit of putting in a bit of work each day, so that you keep your brain fresh.  It's all about minimizing your time on the boring stuff--like syntax--and maximizing the fun stuff--like UI optimization and problem-solving!
So get out those schedules, find a nice block, and pencil in some coding time!



1. The Inevitable Wall
When you get stuck and can't move forward because somethng is broken, not working the way it is supposed to and you can't move on- think of these moments as opportunities to get better. Everytime you troubleshoot something and get it fixed- whether solving yourself or finding help through stack overflow, or google search, it makes you that much stronger. See these moments not as obstacles but as opportunities.
2. Put the mouse down and step away from the computer...
Do not forget to take breaks, and give your mind and eyes a break. Often times when you come back to the comuter after a break you see things you weren't seeing before due to fatiugue or diminishing returns of mental exertion.



Get a job in Tech!
Trust me when I say: you can only love your job so much.
Be smart, get a job that pays well so that you can pursue whatever passions you want.
Don't forget to speak up.
Speak your truth. For women in tech, this can sometimes be hard. It's a male-dominated field. But you'll never get what you want if you stay silent.



Keep On Hacking
You will hear this a hundred times on your journey to learn and master development. Whether it is HTML, CSS, Javascript or backend languages like ruby hack something everyday. Build, try new things, or dissect someone else's code. Things will get easier this way. You will begin to start committing processes to memory and exponentially grow you skill as a developer.
This title "keep on hacking" was something I grabbed from DevTips fantastic resource that I have used in my journey to learn development alongside Skillcrush. Travis shares in one of his videos why he says "keep on hacking" at the end of every video and it is a powerful video. It shows where he was when he first began developing websites and his journey to where he is now. P.S. - Where he is now just happens to be a designer for Google. You can view the video here: My First Websites Were Horrible! [ SHOWCASE ]
Do Not Be Afraid To Jump Into Preprecessors
Two of the traits I have picked up that all desireable developers have are DRY(Don't Repeat Yourself) code and quick code. That is exactly what preprocessors were made for. As front-end developers you should not be afraid to constantly learn and keep up with new methods for efficient programming. Preprocessors take a little to initially get setup but are worth it.
Do not be afraid of the new syntax options and new tools for speeding up your workflow. Preprocessors are built so that you can still type in regular CSS and it will work. This way you can slowing add in new tools without having to completely learn a new language. My personal favorite is SASS. Check it out.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Be confident, even if you're new to this!



Jump In, Head First
Contrary to the warnings that you saw at the public swimming pool when you were a little kid, coding requires to jump in and not think about it too much. If you spend all your time reading books and not getting practical experience in a bash shell, then you need to join an online course like Skillcrush.
Start Now, and Not Later
When the tech sector regained its lustre after 2000 it was SaaS, the Cloud, mobile apps, and now truly web enabled technologies like Ruby on Rails, the MEAN stack, and the Full Stack. Cast your eyes over what you fancy and start now, not later. I initially was blinded by mobile apps but they're just an extension of the web experience. Start with the basics: choose the front-end, back-end or both.



STUDY RESEARCH 
				

			There is a lot to be learned and definitely lots of information out there. Take the time to study. When the going gets tough, keep tough yourself. Always make it a point to learn not just one thing a day but more things a day.
				
 GIANT STEPS
				

			Once you start learning, grasping concepts just dont stop grasping more concepts. Keep leaping into this programming. Taking baby or giant steps into Ruby means you are moving further into this Ruby World. Hello! 
PUSH PULL COMMIT.

			I can assure you its not manual labor, I hope. It is however labor. Laboring till you get it. Gems and commits, we are not speaking of relationships here.... are they?? Find out! 



It's okay to feel lost and confused!
I was once told not to use the word “hard”. Hard should be reserved for people battling cancer, losing a loved one, or giving birth.  Coding isn’t hard, but it is challenging, especially if you’ve never done it before.
But every day it will get just a little bit easier with practice.  Just like learning to ride a bike, the first few times you crashed, then you felt wobbly for a while and then you hit the sidewalk and eventually the street.  Consider this to be your path to coding…it is a process – a very confusing process, but a process.  
However, unlike riding a bicycle – in this journey you aren’t alone.  Sure you will still fall, a lot, but you have  a lot of resources to fall back on.  This class, Skillcrush, but then there are also a ton of resources for you that will help your mind slowly untangle the coding knot that is forming inside of you.  
Just keep practicing and never stop peddling and eventually you will be riding on your own.  Again – coding isn’t hard but is confusing, but you can do it.  



Make time to refresh your new skills
You will learn many new skills HTML, CSS, JavaScript, jQuery, Ruby at different levels of fluency.  It is imperative to make time each week to go back through your notes or make projects to refresh your mind and learn new tricks.



It's Never Too Late!
It's never too late to learn something new. A lot people change jobs and aquire new skills after they've left their 20's behind them, and when you really think about it, people adjust to changes all the time even within the confines of a particular job or routine. Looking at history, think about how much has changed as we went from the 50's to the 60's, the 90's to 2010, and keep in mind that the average life span is about 78 years. Learning is, then, an inevitabilty for everyone at every age bracket. You aren't too old to learn a new skill!
It's Like Eating A Giant Sanmmich!
If you try to shove a large sandwich in your face, it falls apart, makes a mess, you end up looking silly and possibly embarassing yourself in front of others. However, if you cut the sandwich into smaller bites, adding a toothpick or two where needed, then it becomes much more managable and enjoyable. Learning to code is like being presented with a really big overwhelming sandwich. Breaking it into bites you can handle is the best way to go so you avoid being overwhelmed.
It Will Take Time From Other Things
You'll have to sacrifice some things time wise at some point. Choose wisely and remember to put yourself first.



Take your time!
I know you are eager to start programming, but don't rush through it.  Take your time to grasp each concept before moving on to the next.  Otherwise, you will spend the entire course feeling as though you are playing "catch up".
Don't be afraid to ask for help.  Sometimes that help may come in the form of another forum member, while at other times you may need to Google for answers.  The more specific the question you type into Google, the more likely you are to locate a helpful answer.
Believe in yourself.
You can accomplish anything that you desire if you believe in yourself and are willing to put in the work that it takes to be successful.  Programming is completely doable if you start at the beginning and master each concept step by step.
Get plenty of practice.  You will never master programming by just hearing it once.  You need to practice again and again until it becomes second nature to you.
Make it your own.  After learning a new concept and completing the practice questions or challenges, create your own challenges to make it your own.  Use the concepts you just learned to create your own software programs and applications.  This will make you a much better developer.



Believe you can do this
The worst thing you can do is doubt your abilities when it gets tough. You've made it this far and you've hit a wall.
Well, walls are objects. So are ropes and ladders and even helicopters. They just need to be created so you can get over that wall. So create that rope or ladder. And when in doubt find someone with a helicopter. So what if you used their code? You're filing away a treasure of knowledge for the next time. Or maybe, you're filing it away to help someone else one day.
You don't have to eat the whole elephant
Every great program started as a small bit of code. It turned into thousands and thousands of lines over months and years. It took many tries and many failures before it became Twitter or Facebook. And even now those polished products are shrunk, rewritten and expanded.
So don't try and build Facebook in a day. Start with just a user profile or a login protocol. Before you know it, you'll be giving Zuck a run for his money.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Most of all, don't give up.  Stick with it and good things will happen.



Plan your code before writing
Before beginning to code write a document with what are the requirements?  How you will implement them?  Writing code will become much more clear when you have a reference.
Read a lot of code
It will give you ideas and efficient ways to implement your code.
Write simple apps
It can be overwhelming to see complex projects but you can start writing very basic apps and build on that by adding more complex features.



Get frustrated, but don't let it consume you!
My frustration made working on my projects very challenging.  I didn't realize my confusion would end if I gave it time.  Some projects were put off until the very end, because I resented the work. Had I left that resentment hold me back from pushing forward, I would never have met Ruby, or realized my potential.
Sign up, get involved, connect, connect, connect
Find every news letter and group you can about the coding you love and sign up.  Right now.  You won't understand what these groups are talking about at the beginning, but having the exposure to their discussion will familiarize you with terms and common know-how.
I started a twitter account sort of late in the game.  I still don't update it enough.  Maybe I'm afraid my new tech connections will laugh at me? I don't know.  I DO KNOW that everyone has been newb status before.  Don't be shy!



Fellow coders are your best resource.
When you get caught up on something, don't be afraid to ask questions or look at the work of your peers. Looking at another person's working code can be a great way to solve a puzzle in your own work.
Practice a little bit every day.
Learning a programming language can be a lot like learning German or Spanish — you'll retain more if you speak your language a little bit every day, rather than cramming a month's worth of practice into one night.
Share the love.
Contributing to projects and teaching others new skills are perfect ways to keep practicing AND be an awesome human!
 

Confusion is your friend
When I started learning Ruby with Skillcrush, I was in a hurry to learn fast and become a professional developer, thus I was
			always annoyed when I made mistakes or something was not clear to me. I found myself wondering whether that was a suitable career path for me. 
			BUT... This is NOT an efficient way to learn! I found myself learning
			and retaining code much more effectively just trying to solve errors step by step and focus on what I have to do in that very moment, without worrying
			too much and overthinking. 
			When you learn to fix an error, you gain a better understanding of the coding logics and remember things much better.
I bet you don't like feeling confused and lost... Well, same here! But you will learn to love it as a part of your job and...
			you can  still google for help : D !
			It can take time though... Just try, even in this case, to stay on what you are working on, don't get into endless research trying to 
			learn everything related to that topic. 
			It will be easier and more useful.
Would you like to keep in touch?
Come connect with me on LinkedIn at Alessandra Viero!



Don't be shy about posting on the google group.
I was really nervous to post anything on the group at first but it got easier when I realized how much seeing other people's solutions helped me find and correct the bugs in my own work and I wanted my work to do the same.
It got a bit more challenging when I had to post that I was stuck.  I felt a little embarrased to post the code that wasn't working.  Looking through the lessons, though, it seems that lots of other students run into soemthing like that at some point and the instructors are incredibly helpful to give you a point in the right direction but they can only do that if they can see where you are running into problems.
Trust that it will make sense down the road.
For the most part, Skillcrush lessons are great about walking you step by step through each lesson.  So much so that sometimes I worried that I was typing what I was supposed to but didn't really master the concepts; like I was just going through the motions.  I learned not to worry about that until I had completed the entire challenge and ususly by that time it all made sense.  If it still doesn't make sense at the end of the challenge that is a great time to ask qustions on the group.



Errors, errors is what you want!
When I started with ruby with Skillcrush, I was always so keen on not making mistakes and always looking ahead to lessons so I can learn and do the exercises without making mistakes. This is NOT the most effective way to learn! I found myself learning and retaining code much more effectively after I solve errors. When you learn to fix an error, you gain a better understanding on what you missed out on.
Confusion, on the other hand is what I dislike most in this learning process..I don't like feeling lost. The good thing is googling for resources is so helpful. Just don't fall into the trap of endless research of certain commands or topics when you're googling. I feel it really takes you off track. Find out what you needed to know, glimpse through some things you find interesting and make a note somewhere so you can come back to it when you come across it again. Learning about something you can use right away is more functional in my opinion.
Learning to be a Developer?
Any thoughts? I am blogging about my learning to become a developer. Come join me at Code With Tuna!



Learn the basics: HTML, CSS and JavaScript/JQuery. And perhaps, later on, PHP, too. Don't try to learn hundreds of things at once.
Remember to do something else every once in a while, preferably something relaxing, too, besides sitting in front of your computer.
Be patient.


JavaScript is confusing, and that's okay.
When you go through the JavaScript class with Skillcrush, there will be lots of questions and frustrating points. Take good notes while you go through the lessons and challenges, so you're climbing up to success rather than  riding on the struggle bus.

Always be sure to ask questions, and investigate! There are thousands and thousands of resources online that cover exactly what you're confused about, or very close to your problem. 
 Read the errors that you're recieving. 
 Copy the error you're getting, and search on Google. 
 Ask TA or classmates on Mightybell for help 
 Post on your question on Stack Overflow, Reddit, or a similar kind of website to help with programming questions. 
Above all, take a break, and come back to your problems with a fresh head! You'll have a eureka moment!







Confusion is your friend! 
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. Embrace it! It's a signal that you have engaged in the problem solving and that you should just keep going.
Suspended disbelief plays an important role.
Nothing good has ever come from quitting. When you are learning a new technology, whether you are learning to write your first programming language, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's an important part of the process.



Don't give up
When you start out, you'll be convinced that you known nothing. That might be true, but remember every other programmer felt the same way at some point!



When You Have a J.O.B.
Time at your J.O.B. is, of course, a must. For now at least, it pays the bills. While you get the training and education you need to pursue a different course for yourself, remember to give 100% to your J.O.B..  Dedication is rewarded and those rewards show up in all areas of your life! When you leave for the day, leave it behind! Don't let stray thoughts about work sabotage the rest of your time in the day, focus on one thing at a time!
Focus on Learning!
When you're not at your J.O.B., it's all about the process that gets you from where you are now to where you want to be...learning! It won't be easy, but it WILL produce results far greater than you imagine. Let go of the unproductive time-suckers, and use that 'found' time to devote to learning. Yes, watching tv was my first cut! Well, okay, I do still watch The Walking Dead with my son...we all have our 'quality of life' thresholds! ;D 
Some areas of your learning process will be much easier than others. Some topics you will breeze through, and others, not so much. Keep pushing thru, and remember that the only way you can fail is to give up! 
You Can Do This!
Finding balance is elusive, and at times you will think that you're not being successful in any area of your life! Give yourself a break! Take a walk and enojy a cool spring evening. Fix a special dinner with your family.  Taking even a short break can help you re-focus and make your time spent on learning much more productive.
I've learned that there's a difference between multi-tasking and compartmentalizing. Multi-tasking can be great, but it won't help you as much as putting all of your focus on one thing at a time. When you leave your J.O.B., shut that door and turn all of your attention to your next task. Family time- dinner, kids ready for bed, cleaning up the kitchen, whatever your home life looks like. All areas of your life are important and deserve to be a priorty. Section off your time and it will really reduce the guilty feeling that comes with doing 'this' but thinking you really should be doing 'that'.
What About 'Me' Time?
That's easy....investing in yourself by learning with Skillcrush, of course! ;D



What you are doing is IMPORTANT
You hear it a lot now, "Everyone should know how to code.  It's totatlly true!  Even if you just learn a bit, it will help you every single day.  Everything we do depends on some kind of technology and understanding what it takes to tell a computer what to do will be a huge benefit to you.
Try HARD to find the answer yourself
You hear a lot about not being afraid to ask questions and that is great advice - BUT it is also important to be able to find your own answers.  When you have spent time researching and taking notes, diagraming out your own solutions, you will understand and remember your solutions so much better than if you asked someone and they gave you the answer.
That being said, it is also important to recognize when you have banged your head against the wall one too many times and you need some help.
Write simple test scripts
By taking 5 to 10 minutes to write out a few lines about what you expect your user to do and what you expect to happen, it really helps you plan your code.  Once you have written down - User provides birthday - you know you have to create a way to prompt them to provide their birthday, in the format you need.



Do not procrastinate!
There will be unforeseen situations that can stall your progress along the way. Make the time to address them.



Double Check Your Work
It's something you've heard from the very beginning of English class back in elementary school but maybe you feel you've surpassed that point. You're not in school anymore so why should you need to edit or revise?
Don't get cocky. Editing and revising your work is not a concept that only applies to a specific age group. The idea is not a personal affront to your style or your smarts. Return to your work so you can make it the best it can be.
Do not brush over it with glazed eyes. Take a break if you need one but don't sacrifice the ultimate quailty of your work by rushing through this potential last step. Ease through it with a fine-tooth comb until each semicolon is standing in its correct place and each indent is aligned with its sisters.





Be not afraid!
If you are like me and you have NO background in tech, be not afraid! Take a deep, deep breath - it's fine. It's a language or a skill that you haven't learned yet; no one would expect you to speak French if you had never taken French before. And no one will expect you to code if you haven't coded before.
Replay replay - hey hey hey!
And use and abuse that pause button, baby! The beauty of Skillcrush or other web-based learning is the ability to leverage videos and tutorials at your own time and at your own pace. Don't rush; use it.



My name is Evelin and I've been learning to code for quite some time now.
				Here's some friendly advice to myself. To be read any now and then.

Be kind to yourself. Look how far you've already come! CSS does no longer hold too many secrets to you. You communicate with your computer via Terminal.
					You're using version control. Be a little proud of yourself!
Sometimes you will want to give up. Don't!
Show off your skills any now and then. It's a great feeling to share your joy with others.
If nothing seems to be working and you feel the urge to throw your computer out of the window. Fire up Terminal and type in the following command: 

Big effort = big reward. You may have heard people complain that learning to code is hard. Well, it can, be. But, if you put in the work and I mean genuinely put in the work, even when it sucks and you're tired and confused, keep at it. In the end, you won't regret it.



Focus on what delivers most value.
Overpreparation has an opportunity cost. Better to identify a project that you want to work on and learn on an as-needed basis while working on it than to run through endless exercises.
Come for the code, stay for the community.
Learn at your own pace, sure, but you don’t have to do everything on your own! There are plenty of opportunities to do meaningful work (and find co-conspirators) as a newbie, including OpenHatch and the Civic Tech Issue Finder.
Always be coding.
“A small daily task, if it be really daily, will beat the labours of a spasmodic Hercules.” —Anthony Trollope
Put differently: stay sharp.
Check out the Government Digital Service’s Design Principles.
Really. They just might save you a lot of time and heartache.



It's all about Patience and Practice!

It's all about Patience and Practice!
An apple a day helps keep the doctor away!
So, true!  A little prevention...nutrition...feeding of the mind...adds up over time!"
Also, on the other hand, neglect and negativism builds up over time, too!
Focus on doing a little each day...and in time you will be so much further than you ever imagined!




Nothing much to change... I'm lazy to come up with some text :) I'll just use SK's words.
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!
When you get that painful feeling in your stomach every time you look at a solution and can't figure out where in the hell the instructor got the code. Just chill. Let it wash over you and know that you're picking up bits and pieces of info that will be more helpful later.
Confusion, therefore, is a good thing. It makes you eat less, sleep less, and consider throwing in the towel occasionally. But it also makes the reward that much better.
Suspended disbelief plays an important role.
Imagine that you could be a developer. Laugh at yourself if you must. But just pretend and go along with it. Imposter syndrome is real. Even the gurus feel it.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing. In other words. Just keep staring and shaking your head. And then go with it. It's like memorizing English grammar. Most of it doesn't make sense anyway.



Dive In!
When first getting into tech or learning something new, don't waste time thinking about if you should do it or not. Just dive right it!!
 There's no better time to begin than right now!!! 



Confusion is your friend!
I wish I had gotten the advice to only do this if you have a lot of free time and are not working full-time on multiple projects aside from learning to code.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!
When you startcoding your first web pages you are doing something that you have never done before. It's a new challenge, a new opportunity.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
One more thing....Google is your best friend!!



Google is your friend!
When you get stuck, chances are someone else has gone through something similar. Visit forums, use google, the answer is out there somewhere. Don't give up.



Keep learning!
Coding is a skill that takes time, energy, and most of all, practice. Therefore, while you're learning, it's best to continue to practice on a daily basis. The concepts are difficult, but the best way to commit them to memory is through consistent practice every day.
Don't get too worried if you're struggling, or feel frustrated. We've all been there. Yes, even us professionals. Remember that your Skillcrush buddies are always here to help, and best of all -- there's Google. Don't be afraid to ask questions from your coding friends or Google.
Never give up!
This is a new language after all. Frustration, impatience and disbelief are your friends on this coding journey.
Don't be afraid to try. You may fail, but that's why we're working in branches and not on the master code. Have fun, play around and most of all, don't ever give up!



Attend a tech conference online!
I was quite overwhelmed by all the new concepts I was learning - HTML, CSS, Javascript and not, Git! I've always enjoyed attending conferences and jumping on Twitter conversation, so I thought - maybe I can attend a conference to get excited! That's when I found Nordic JS, a javascript conference in Stockholm Sweden!

			I learned about Vector Markup Language (VML)	,  truly fluid typography and much more! 
 You should check out  Dirty Tricks From The Dark  Corners Of Front-End by Vitaly Friedman, the co-founder of Smashing Magazine, one of the largest online magazines dedicated to Web design and development.  
			
Places to discover conferences


Lanyrd
Frontend list
Crowd-sourced list on Github


Jump on Twitter and engage with other developer-in-training, Skillcrush's Twitter is a great place to start ;)



Immerse yourself in code
At first, code is going to look really confusing, and it's not going to make much sense. Try to keep pushing through it and it will click for you - I promise! Don't just read it: use it, retype it, make the moving parts work (and not work) for you because that's how it will start to make sense.
If the learning tool you're using isn't working for you, try another one. There are lots of ways to learn and another teacher's voice might help you get unstuck so you can come back with fresh eyes.
Look under the hood
Sometimes we want to just use the thing without understanding how it works. But if you're on this journey, you're going to get really comfortable with the idea that you CAN understand it, even if you don't yet. Just know that the answer is out there waiting to be pulled down from google.
Once you have a basic grasp on one programming language, the next one is going to be quite a bit easier. Most languages are somewhat related.
Join the community
Go on the forums like stack overflow and participate.
Write a blog about your journey learning to code.
Find someone else who's on a coding journey, and sit together and pair code.




✓ It's A-OK to eff things up a bit.
I find that I learn best when I fail upward. I'm not scared to admit that I screwed up my fair share of code while learning the ins and outs of HTML and CSS. I immediately started applying my new skills to my email campaigns at the office, and while I have no MAJOR blunders to report, let's just say those first few emails are...questionable. Thankfully, I have a very understanding boss who is 1 billion supportive of the learning process.
P.S. We may or may not have had to roll back the master website code a couple of times. :D Had I not had the opporitunity to EPICALLY fail, I might not know which mistakes to NOT make.
✓ It's okay to say "SCREW THIS" and walk away for a day or week or month or two.
One thing that continues to amaze me is how my brain puts puzzle pieces together when I least expect it. I'll have days when I get soooo frustrated with code and give up on it. That's completely okay! I've discovered that when I come back to it, magic happens and the pieces fit together and I think I'm silly for spending so much time on a padding confusion or something.
This is a normal and will save you loads of actual time in the long run. If your stuck, maybe you should shut the laptop for a minute, okay? I know it's hard sometimes (like walking away from a damn cookie) but trust me, future self will thank you.





Intimidation is your friend!


Remember back in high school, when you studied hard before the exam but when you saw your question paper
						you were just so intimidated by the questions to even recollect a single word for which you burnt many a dozen midnight lamps?
						Yea right, programming aint that different sometimes!
						When you start programming you are excited and you learn the initial HTML+CSS with the enthusiasm of a kid in a candy store!
						But as you slowly progress to Responsive Web Development (which I like to call RWD) that's when the gameboard shifts
						to a parallel universe that you dreamt of travelling to, but never imagined you would ever get an opportunity.
						Now you're like the mouse in the maze experiment, the directions are there but you're just too muddled to think clear!
						In other wise words, you are intimidated but that intimidation is good my friend. It only makes you strive harder to understand
						the how everything works and the key to solving that is Simplicity!




 Simplicity as the Key!


Simplicity is a simple term but why is it the key to intimidating codes? The reason again is simple - ok I know
						I might sound confusing now just read on I promise things will be clear! When you keep your codes simple you will be able to
						understand how every line in that code responds to your changes, thereby you get a better understanding how everything works.
						Hey no one said the path to coding was easy!! 




Practice makes you better!


Yeah, the saying never gets old! Practice is what moulds you to be better at what you are learning, especially when you
							are dealing with intimidating lines of codes. I practiced my HTML and CSS codes a lot when I had the catch-up week but when it
							came to the RWD catch up week I hardly did anything! Talk about being intimidated by that popular kid in school but still
							playing it cool so you dont come across as an easy target. Yeah well, thats what I was trying to do in the RWD catch up week
							so much that by the time I entered the GIT 105 topic I dont think I can remember anything at all! If only I had practiced my RWD
							codes and done some coding I am sure would have entered 105 feeling a wee bit more confident.




For my parting words, all I would say is embrace that you are learning something that is intimidating, challenging and yet not
								as difficult as it seems to be, it is all in your head. Remember once upon a time even Everest seemed unconquerable! 
And with that (so called) inspiring advice I leave you to striving to learn. Happy Learning Folks!!!





Practice makes Permanent!
Work on your coding a little bit everyday. Write things down with a pen and paper. It has been shown that the physical act of writing helps us to remember things more so than tying on a computer.
This way your brain is more likely to retain the new information. 
Dream about your code.
According to new research new ideas can come when your mind is not focused. When your brain is in a diffuse mode it is working through the events of the day and actually helps to cement what you learned during the day.
Exercise
Exercise helps to create new neurons in the brain. These help with retaining information.



Stop Thinking and Start Doing!
Programming is exactly like learning a new language. It will take time for this new organization of letters and commands to make sense in your brain. That's ok! Stop thinking and just do it.
You are going to be making new neural pathways in your brain. You are supposed to feel disoriented and confused. Keep going.
Trust the Process
Start with HTML. Figure out how that works. Add CSS. Then figure out how that works. If you get stuck - google it. Literally, type your question into google. You will discover that you are not alone in your confusion. Use any and all online resources that you can click on! This is the embodiment of collaborative learning.
Small warning...chances are there will be more than one way to solve your problem. Find the one that makes sense to your brain. Keep moving. Don't try and analyze why the other way works too. Does it work? Does it look right? Keep moving.
No matter where a programmer is on the learning continuium of coding - there will ALWAYS be more to learn. This is NOT a static language and it is guaranteed to keep changing, so keep moving!



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits. Don't get frustrated, just relax into the growing pains.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Code every day!
Committing to code every day has made a huge difference and helped me push through any frustration and desire to give up.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
You are going to doubt your abilities and feel so overhwelmed. But I am here to tell you to keep pushing through it. Especially when you are stuck on the smallest thing for most of the day. Once, you figure it out, there is a great feeling of satisfaction...until it happens again on something else.
Stay focused and positive you will succeed if only you believe in yourself. If you need answers, Google is my best friend. There is someone that has gone through what you are going through so if you google it you will find an answer. Yes, you may have to dig a bit.
But it will be okay, just don't stop!



When you feel like you've hit a wall with your code, take a break!
You can bruteforce some coding problems by hunkering down and working on possible solutions for hours, but other times it's just best to step back and do something else, even if it's just for fifteen minutes. The more agitated you are in not finding something that works, the harder it will be for you to think straight. So, clear your mind for a bit, and come back with a fresh perspective.
Feeling demotivated? Open up your favorite music streaming service and get into the groove.
There will be days where you just don't want to code. When you need that extra push, bring up your favorite Spotify playlist, start that motivational Songza mood list, or use whatever other music service you prefer.



Fear is your best friend.
Don't fight it, just manipulate it so you have it on your back, pushing you to the forward thing to do. That was one of the best advices I got when I was studying for actor.
It's the title of a John Cale song by the way. And it's been a while I had that advice.
Yet it still stands.
Don't forget to change
I forget that always when things are going just right. Until I get kicked out of my welness little-thingy-dingy and I realize: ok, apparantly it's time for something new.
(And don't believe the hype, of course...)



Stick with it!
When you start learning how to program, there will be times when you feel in over your head – you'll feel like giving up because you'll never, ever, know all there is know well enough.
This is where perseverance is key: you will only learn and grow my jumping in and building upon the skills you learn today. Learn something, anything, today – and build upon it tomorrow.
You know enough now – and you'll learn more the longer you keep at it
You can't drink the ocean! Do what you can with what you know now – get out of your own way dammit, and turn off that part of your brain that tells you to stand still and stay safe - no one every grew as a person, personally or professionally, by avoiding discomfort. Uncomfortable> Good! It means you're getting somewhere.



Don't give up!
Learning new things can be tough.  I found that I breezed through HTML and CSS, but almost gave up my dream of web development when I got into JS.
I learned that it is okay to walk away or focus on something else for a little while.
Moving on to Ruby before I finished JS was very helpful for me.  I am now able to return to JS with a better understanding of OOP.



Don't worry! I have some advice for you...
Learning how to code can seem like a daunting task. There are so many languages and resources; it can be confusing to figure out where to begin. I know that I did a ton of Googling which lead me from site to site and blog to message board to article and back around again. Luckily, there are a lot of resources which makes it easier to figure out where to start.
I believe the first place to start is to understand your interest. Why do you want to learn to code? What do you want to code? Do you like design? Are you looking to make a career change or learn new skills to boost your current position? Do you want to work independently, freelance or be part of a team? Understanding the answers to these questions will help you figure out where to start. For example, if you love design and user experience, you should learn front-end web languages like HTML and CSS.
Know that your goals can evolve as you begin. You may find that your initial interest in programming may move to something else. I strongly suggest that you set some goals and ask for help to stay accountable. Coding can be hard. I will put off doing assignments unless I have timelines, etc.
You can do this! Learning to code is not easy but it's interesting and it's an in-demand skill.



Hi my name is Sara and I have some advice for you!


Confusion is your friend!
			When you start programming your first web app you are doing something that you have never done before.
Confusion, therefore, is a sign that you are heading in the right direction. You are on your way to enlightenment - just keep pushing ahead!


Suspended disbelief plays an important role.
			You know something is wrong with what you've created. But that's okay!
You'll learn as you work to figure out the problem, and that skill of finding the answer when you don't even know that actual question will come in handy MANY times in the future.


Have fun!
            Remember that you are changing your life. For the better! You are learning a lot of new tech skills, and it can feel hard, but think of everything you're capable of doing now!
Create a website for yourself devoted to your favorite things, be it puppies or rock n' roll. Just play and enjoy this education.


Back to Main Page

© Copyright Sara Miles 2016.



Google is your friend
When you are feeling stuck remember that Google is your friend. Other people have had the same issue, so search for an answer. It'll save you so much time and frustration.



Don't drink and code!
Just kidding. Coding is totally more productive when you are looped!
Actually, I'm only half kidding. Coding is easier when you just jump in and give it a go, even when you really don't have a solid idea of what you are doing. Approach your coding as if you are as uninhibited as being looped. Your code may not work, but at least you attempted to write something, which is much better than staring at your code editor's blank screen. In the famous words of Nike advertising, "Just do it!"



As with all adventures, there will be successes and misfire. But you can always count on learning and growing from it.
 If you remember a few things, learning to code will always be fresh and fun.

Practice, practice, practice - especially when it's the most difficult. Keep at it and don't quit. The epiphany is on its way!
Take a walk. Don't be afraid to just get up and go for a walk when nothing you are doing seems to work and you keep hitting the wall. Sometimes you just need to walk your way to the solution.
Reach out to your community - other Skillcrushers, online communities such as Stack Overflow, a mentor, your team, the Google braintrust, etc. They've been there and can help.
And finally... always check your code. Sometimes you make that wall yourself by something as simple as not closing a bracket. It happens to EVERYONE no matter what stage of career. We are a society in a hurry and these things happen. So validate your code!



Just Keep Swimming!
It takes a lot of time to really start to understand what you are doing.
The best way to get to understanding, is to just keep doing it. The more you do something, the more you begin to understand exactly what you're doing.
Go Easy On Yourself & the Word YET is Your Best Friend
It is easy to feel like you are stupid when you are struggling to understand something.
If you get down on yourself and let yourself think that you actually are stupid and can't learn this, then it will be a self-fulfilling prophecy.
So, instead of thinking "I'm stupid. I don't get this." Think, "I don't get this YET". That means you believe you WILL get it eventually. And if you believe that you will get it, then that will become your self-fulfilling prophecy.



Confusion is your friend!
You must keep going and code as often as you can! Don't get discouraged by problems, step away and tak a breath before you tackle them again. Never give up!



Think about your code before writing
Stop and think about what the end goal before starting to write your code.
			Break everything down into tiny, miniscule steps if you have to. It truly helps
			the mind to organize each step that needs to be taken. One instructor told me
			practice by taking a simple, everyday task and write out every single step that
				has to take place to get your body to complete the task.
			
Simply look at code
Just looking at code helped me think about all of the elements that go into
				a simple online document or web page. I found the more I looked at code while
				I was learning, the easier it became to recall which components of code are needed
				to accomplish a coding task.
Practice Practice Practice!
I definitely did not practice enough! Give yourself simple tasks/assignments to
				complete in addition to the class assignments. Don't let a lot of time go between
				times you sit down and write code. The more you use it the better you'll be at it!



attain
Attain new skills every day.  Educate yourself as much as you can on the skills you will use.  I love using Team Treehouse,  Skillcrush, and  Learn X in Y minutes.
cultivate
Work with others and cultivate those relationships.  You will learn so much more and more quickly in a community
translate
Basically, copy!  Take something you see that you like and translate it to your own work.  Type it in and see how it's supposed to work.
sharpen
Sharpen your skills by practicing them every day.




Have patience: bad things and stupid mistakes are made when you rush through your work
However, mistakes are important. They're how you learn.  Stupid mistakes are mistakes about stuff you should already know.
Organization is key! Properly organizing your Skillcrush downloads will help you with finding the answers to your questions 
Don't be afraid to ask for help; as lonely as it can be, none of can make it alone in this life
Don't forget self care, both physical and mental.  When you need a break, take a hot shower with you favorite shower gel, got for a walk, or talk to a friend.  After finishing an especially challenging project, treat yourself to an ice cream sundae!
You are beautiful and you are intelligent.  Never forget that.




Coding is easy, but there is a catch
You have probably heard that learning to code is easy.  Not only is this true, but it's also fun and addictive.  Your first couple of lessons will give you confidence and you will want know more. But here's the catch -- it doesn't stay easy.  You will reach a point where you are getting errors and feeling very frustrated.  Sometimes you will look at a project and think, "I don't even know where to start."  The hard part is making the decision to keep moving forward or to quit, and you will have to make it over and over.
Don't get caught up in decision.  If you push through the difficulties you will have learned valuable skills, not only in coding, but in all aspects of your life.
Find a community
You've probably heard about Code Academy and other online educational coding sites.  They are awesome.  There are also hundreds of books available through library systems.  And I bet there is even a meetup or two in your area.  There are many ways to learn to code for free and without ever having to leave your house, but you need a community.  You need a place to go when you have questions.  You need a place to brag when you figure it out.  You will want to help others when you see them struggling.
I think learning to code is really only about two things:  finding your community and always moving forward when you get stuck.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Google Everything 
Google is your best friend and is the greatest way to debug and learn new things. Google always and often. 



Face Into Your Fear

When I first started programming, I would get overwhelmed or scared. But I soon realized that that sense of fear could be translated into exhilaration if I just embraced it.
Basically, remember that whenever you are feeling afraid to take the next step, take a deep breath, remind yourself "Even if I fail, I'll give it a try." Just do your best - it's all you can do, and you will be surprised, that your best is pretty darn good.

Think or Do?

When first starting out, it feels like there is a constant battle between when to think and when to do. It can be tempting to spend a lot of time trying to grasp something conceptually, but remember that no amount of theoretical knowledge is a substitute for getting your hands dirty.
Mistakes are a part of the process and will help you learn and grow. You will always learn more from making a mistake and figuring out how to fix it than from reading a book about how to do it right the first time. Debugging is part of the coding process, and will improve your understanding.
That being said, a perfect time to spend some time thinking is right before you actually start to do! Before you start coding, try to figure out exactly what you're trying to do, and how you'll approach the coding task. That way, you have an idea of exactly what code you want to create. You can then try to code each piece of your code bit by bit. This will make it easier to get your code working.




Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
I have found that the more lost you get the more you learn.  I have noticed that when I make a mistake it may take me a long time to figure out how to fix it but it gives me a more in depth understanding of what it is that I'm doing.



Don't Give Up!
When you've come to a roadblock in learning certain concepts, confusion may drive you to doubt your capabilities in coding. But did you know that we all learn differently depending on how something is taught?
			
 Yep that's right! The good news is that the internet is full of resources created from coders who all explain coding concepts differently. So if you find something is not clear in a specific course, try to find other resources that make more sense to you. Clarity is just a few clicks away. 
Be Curious And Experiment
When learning code, practice everyday and experiment. You'd be surprised how much more of a learning experience you will have. You may just run into a new style or feature that will make employers swoon. 
Read, Read, Read
Newsletters, tutorials, code samples on github, stack overflow...the more you expose yourself to the code, the faster you go on the learning curve.
Invest Your Time
Advanced coding takes practice and time and that certainly is not achievable when you're constantly checking your facebook or twitter accounts. Instead, upload some mobile coding courses or books on your phone and check those every chance you get. 
Have Fun With Your Learning
If you think of your learning as work, it will make the experience all the more difficult. Have fun with it. Try making something you like. It may just turn out to be the highlight of your portfolio. 



Do Not Expect Perfection
Do not expect perfection: it rarely exists.  You are learning, and expecting perfection is just piling on extra stress on yourself that you do not need.  Right now, just enjoy learning and have fun with it.  Even if you don’t get something to work, you get to put on your detective hat and figure out what’s keeping it from working.  Once you get something to work, you’ll get that warm satisfied feeling!  Embrace it!

Now, look at your work again and try to make it better.  It’s like trying to beat your best score at a video game.  You still beat the game.  Never forget that.  You take pride in your work and want to make it better, like all the software and hardware updates in the technological field.  You want to beat your own best score.

Other random tips:

Practice!
Take breaks (or even a nap!) whenever your brain feels like mush.
Believe in yourself.
Ask questions, help out when you can, and look at other's work
Celebrate each step of the way.
There is always room for improvement, but that doesn't mean you shouldn't take pride in your work.
Who says you can't have fun when it doesn't go smoothly? Just enjoy the ride and keep going!





Feeling overwhelmed is okay!
You are being introduced to new ideas and a new way of thinking so feeling overwhelmed is a common trait.
Learn how to Google!
Being able to ask the right questions and to find out additional information online will help you out tremendously.
Perseverance is Key!
Learning to code is an exhausting but satisfying adventure.
Approach coding with an open mind and accept the challenges because you are not alone in this learning process.



Your brain is pretty freakin' awesome. And guess what...you can learn programming no matter how old you are! It's just hanging out up there waiting for you to fill it with all sorts of incredible, computery goodness.
Not sure where to start? You really should check out the awesome ladies at Skillcrush. Sure there are other places you can learn how to code, but no one else gives you bite-sized easy-to-process daily check lists complete with comprehensive videos that REALLY make sense. Trust me, you'll love it.


5. Network, Network, NETWORK!!
Make friends. Connect with classmates. Talk to people who have the job you want/work in the field. Join Facebook groups, Tweet about your experiences, anything! Just put yourself out there!
4. Reviewing is your friend
It's not only good to review in order to keep the skills you've already learned fresh, it can also be a huge confidence booster!
If I get really really stuck on something, I will go back and review things I've already mastered, not only to give myself a break, but also to remind myself that the things I've mastered were once really tough too!
3. Learning can come from different places
Find many different sources for learning. Different sources explain things in different ways, and sometimes a concept won't make sense in a webinar, but it will make total sense in a book! Finding information is a huge part of being a web developer.
The sources that work for me come from all over the place: paid online classes, free online classes, books, websites, Youtube tutorials, apps, seminars, articles, documentation, friends, Facebook... It just comes down to finding sources that help you learn and understand.
2. Ask questions!
I'm not sure that it's possible to stress this enough. Even if you think the question you want to ask is dumb, ask anyway! If something doesn't make sense to you, chances are there are other people who also don't get it, and people who asked the same question in the past.
One of my favorite parts about learning to code is how helpful and welcoming the community is. There are so many people out there willing to help you learn, so ask away!
1. Have fun!
This sounds really silly and people say it all the time, but it's true: if you're not loving what you're doing, you're going to have a harder time with it.
Don't get me wrong, there is such a thing as a bad hour, day, week, topic, etc. Learning is frustrating at times, and you may second-guess yourself, but just step away. Clear your head and come back later. Being excited about learning and all the cool things you can do is the best part, and you should enjoy it!



Don't Be Afraid to Try New Things
There are so many great resources, like Skillcrush, to help you learn how to program. When you feel like you have a good handle on a something like html or ruby don't be afraid to experiment and try new things.
			 Even if you mess up it is all part of the learning process and it can only help you improve your skills.
Clear Your Head
Sometimes certain concepts and skills will come easy to you, and sometimes they won't. If you are really stuck on a problem or issue, take a break or start working on something else to clear your head. Sometimes simply stepping away from the problem for a few minutes can give you some clarity when you come back to it.
			Just remember that everyone gets stuck at one point or another and there is always a solution out there.
Stackoverflow
Stackoverflow is an amazing website where you can find the answer to almost any problem. You should definitely use this resource.
More Resources
Skillcrush
GitHub
Try Ruby



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.


More AdviceS
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.


Have Compassion For Yourself
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.


Keep A Sense of Humor!
The best thing about a boolean is even if you are wrong, you are only off by a bit. (Anonymous)



Don't give up!
There are many, many times when you feel like your brain may explode and there is no where for all the new information to go, but you can find a way.
Perseverance is key and when what your were working on suddenly clicks, it is a fabulous (although at times, frustrating) feeling!
Be brave
Making changes, experimenting and seeing what things can do are all part of the process. Worse case scenario is you need to go back a few steps to make amendments, but that is ok. You won't break everything!
W3 schools is an excellent resource
I have found w3 schools so helpful in my coding. They have great tutorials and info in an easy to understand way and it has helped me out a lot! w3 schools rules! 
Go for it!
You can always do more than you think you can, so just believe!



Don't be afraid to make mistakes!

Don't Be Afraid to Dive In
When you start learning programming, it can be easy to feel overwhelmed by how all the syntax, logic, and best practices come together to create a web app. The best way to overcome this is simply to create something. It doesn't have to be perfect the first time, and your code will only improve the more you practice.
Don't let your fear of failure prevent you from trying something new.
Build Something You Don't Know How to Build
Remember when your dad taught you how to ride a bike by pushing you down a hill and yelling "Just pedal!"? That is how learning to program works. If you don't know how to make a basic to-do list app, but you want to learn, then go do it! Pushing your boundaries and discovering how to overcome obstacles will only make you a better developer.
Every web app was built by scratch by someone just like you. If they can do it, so can you!







Practice, Practice, Practice!
It's a common belief that practice makes perfect, and I totally agree! Though I'm a devout believer, it's often hard to muster up the motivation to keep at a new skill. It can also be discouraging to see others so much better (and so much younger!) than you pumping out amazing stuff.
The one thing to remember is that everyone has put their time in to achieve their level of greatness—natural talent or not! So find a project that interests you and use that as your motivation to practice your new skill. Get excited about the end result—and the journey getting there!
Sometimes A Break is Just What You Need
I often get frustrated or bored with what I'm working on if I spend too much time on it. Taking a break changes up my scene, gives my brain a reboot and allows me to think clearly again.
Sometimes it's the change of pace that reignites your love for your project. Don't feel guilty for taking breaks! They're a necessary part of the process.



Don't Give Up!
There will be countless times when you wonder if you are going to be able to do this. I'm here to tell you, you can! Don't worry about being frustrated. You are in great company. Use Mighty Bell to ask questions. If you poke around, you may find someone is stuck on the same lesson. 
Don't forget to pay it forward! Every time someone helps you out, find someone that you can help. Trust me, it will make both of you feel good.

You are a Coding Warrior!



Drinking from the Firehose
When you first start learning to code, and you begin reading about all of the awesome resources (bootcamps, classes, tutorials, podcasts, blogs, newsletters, people to follow on Twitter, and on and on) - it's easy to get overwhelmed.
What I recently heard on a podcast was about how it's most important to focus on the fundamentals. Are you solid on HTML and CSS? What about JavaScript? Don't chase the frameworks, or hot new JS libraries unless you understand the basics first.
Find Your Tribe
You can't do this alone. Well, I suppose you could - but learning to code can be lonely. Get some company. You may be struggling with something another person has before, and if you reach out you'll get to that A-HA moment more quickly.
If a group looks like it moves too fast for you, look for supportive beginner groups (hint, hint: Skillcrush).
Make Something Already!
Dedicate a little bit of time every day to learning to code. Jerry Seinfeld's famous Don't Break the Chain comes to mind. Even just 10-15 minutes a day where you actually open your code editor and practice is worthwhile. You could try for your own 100 Days of Code. Or try to make a certain number of websites in so many days, like Jennifer Dewalt's 180 Websites in 180 Days.


Don't hesitate to ask others!
...the Ruby community is here to help.


Go confidently in the direction of your dreams! Live the life you've imaged ~ Thoreau



Google will be your friend...
No matter how experienced a developer you are, you just can't know everything. As a result, you will have to resort to using Google to help you solve your problem from time to time...and more often than not you will find yourself on Stackoverflow reading a resolution to your problem...
Practice makes perfect!
When it comes to programming skills, it is very much a case of "use it, or lose it" - you need to practice as much as you can.....
This practice could take many forms, be it coding katas, personal projects, following tutorials, implementing code snippets from magazine articles or blog postings you just need to get on and do it in order to keep your skills sharp and up to date.



 Who took my Job? 
 If you've been watching season three of Silicon Valley, you'll know that the Pied Piper team outsourced part of their workload to coders from around the world. A neat concept, but they ultilately did it to cut costs. 
The point is that, if you can learn to code online, someone in a third world country has probably already learned to do it and taught their entire village for free.
Sure, learning to code might be great now, but in a decade (or less) you might be the one complaining about you job being outsourced to a foreign country. Just Sayin.



Grit is everything!
When it comes to coding, grit is everything! Learning coding can be confusing at first, especially if you don't know what you want to create. In the beginning that is a hard one because you don't even know all the possibilities that exist!
It all comes together at some point. You have been learning a bit from here and a bit from there and soon realize that you already know more than you thought was possible. You'll also realize the amount of stuff you don't know, which is fine too. Just keep going!
Getting over the impostor syndrome
Because you know painstakingly well how little you know about code, you sometimes feel like an impostor. How can you own your very own spot in tech if you are new to all things? There's no point in making comparisons to what other coders can or can't do - better way is to think yourself as a bridge to people who know nothing about code!



Practice Helps
The first time you come to a challenge, it can be extremely overwhelming. That's why practicing helps so much--the more times you do something, the more second-nature it becomes and the more confident you will feel!
Don't Stress
It will seem like it's all too much when you tackle something new, but just remember that everyone started out as a beginner like you. With patience and practice, you're sure to get it!



It's never too late to learn a new skill.
I had two degrees and seven years of work experience in an unrelated field when I began learning to code. I had this sort of mental block, like I had already put my time, and oh well, now I was stuck with that as my career for-ev-er. That was a big lie! It's never too late to learn something new.
You CAN do it.
My early attempts at learning to code were frustrating and led me to believe that I was incapable of learning because coding was so far over my head. That was another great big lie! I took a hard look at those around me who were living my dream and realized that they are not so different from me. If they can do it, I can do it, and so can you. So go do it!
Be kind to your mind.
Learning to code is like coding your brain, only your brain takes longer to process new information than your computer does! Be kind to your mind by not being hard on yourself when you do not initally understand something. Usually, once you sleep on it a night or two, it will begin to make sense. Be compassionate toward yourself, and support yourself in this process as you would do for your best friend. Allow yourself to fail, and then try again!



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before. Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening. This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process. You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
practice, Practice, PRACTICE!
The idea of coding your very first website is daunting, especially when you think about all the possible mistakes you can make along the way. Your very first website will not be perfect, neither will be your second, third one or even fifth one. You will make mistakes, be frustrated and spend hours figuring out how to make it beautifully responsive (why so many devices ???!!). But you will learn from every stage along the way and the key is to keep learning. Practice does not make perfect, it makes good developers. Keep coding with a smile Skillcrushers!



There are lots of resources for new coders!
There are tons and tons of resources online for new coders. My favorite is Code Newbies on Twitter.
You can become active with the group and people will respond to you and help you.
Also, there are lots of Slack channels that help new coders!

devolio-devchat
codecommunity
codenewbie
womenintech




"For the beginner, practice without effort is not practice."
			— Shunryu Suzuki
Confusion is not your enemy; it is your teacher. The more you struggle with confusion, the more painful it will be. When you let yourself walk away for a breath of fresh air, your mind will continue solving its problems in the background. When your mind is open it allows understanding to enter.
Keep reading. Keep practicing. Compare different ways of coding the same solution. And keep moving forward. When you feel overwhelmed look to experienced programmers for advice. Above all else, keep motivated. Your code, my code, all of our code is connecting the world in amazing ways. 



I've wanted to code for a couple of years.
I've worked at several different marketing and SEO agencies, but there was one common theme in all those jobs. I was working in social media and content management, but I wanted to be working with the developers!
But I've seen SO much age discrimination in the workforce, that I was afraid to even try learning to code. What was the point? I don't have a Computer Science background, and I'm in my late 40's. I was afraid it would be a major waste of time to even try.
That's "Rear Admiral Hopper" to you.
Then I started learning about all these code schools that opened programming up to everyone. And THEN I learned about an incredible woman. Rear Admiral Grace Hopper.
She was a non-traditional everything! And if she can break all the conventions in pursuit and furtherance of what she truly enjoyed and was so incredibly good at, then, my sisters, so can WE. 



Be Patient
When you start programming your first web app you are doing something that you have never done before. It's a new challenge and a new opportunity.
Be patient with yourself, this is exactly like learning a new language. YOu can't know everything all at once, it takes time to build up your learning... start with the baby steps. This may seem slow, but you will get better with practice.
Just like learning a new langauge, you have to learn the basics, understand how the language is structured, and then start adding in your basic words.



Confusion is your friend!
Make sure to take copious notes.
Save, save again. Rinse, repeat.
Suspended disbelief plays an important role.
Be sure you're focused on the task at hand and minimize any distractions.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
Eventually, the grashopper becomes Mr. Miyagi.




Practice, Practice, Practice
Reading books, articles and watching tutorials are great ways to learn more about a certain tech skill. However, if there's one thing I think everyone should spend more time doing its practicing. Getting in there and creating a project to show what you're learning not only helps all the information stick, but it also gives you experience. As an added bonus you'll even have some nice projects to show off. Lately I've been applying this in my own learning and it's showing great results. It makes me feel better about what I'm learning because I can actually complete small projects and feel a sense of accomplishment. It feels even better knowing I'm building my portfolio and improving my skills.


Don't Compare Yourself to Others
I think too many people compare themselves to others. This can have a negative affect on you. It can make you feel like you're not good enough or like you don't belong. So instead of falling into the trap of comparing yourself to others, I think you should compare yourself to yourself. Continue to focus on practicing your skills and only compare yourself to the former you and look at how far you've come. Look at everything you've learned and look at how close you are to achieving what it is that you actually want.





When you only have short times to work, have a clear goal of what you want to accomplish.
Always go back and comment your code, you can find errors or ways to improve your work.
If you don't understand something, google it. Someone before you didnt understand either.
Listen to podcast, read blogs, obsorb everything. It will all click someday.




Don't be timid!
Taking the first steps on the journey to learn how to code can be scary! But don't fret and, most importantly, don't be timid. Take the challenge by the horns and do your best.
Know your limits
Life will get in the way. Unless you are able to focus all of your energy on to this course, something will always get in the way. Getting sick, the kids/family, work, sleep, etc.
Don't push yourself to do the work just because you are supposed to. Unless you have a looming deadline, it is better to take a breather and work through the class at your own pace. Rushing will get you done with the class, but likely will leave your gained knowledge wanting.




Google will become your best friend.
When you come across an error and you can't figure out what it means, Google it. There's a good chance
			someone else has had the same issue and will have a solution. 
Try new Things
 If you see something cool on another site, look at the source code and try to duplicate and put your own spin on it
Get Involved
There are plenty of organizations out there, both local and online. If you can't find a local group in your area, take charge and start one.
Helpful Links

Code Newbies Check out their Podcast!
Ruby
Ruby Gems




Decide what you love and stop wasting time on what you don't!
I spent a lot of time trying to work with frameworks and languages I hated. Java is so clunky! I had resigned myself to a life of boaredom until I remembered how awesome and sexy Ruby was. Now that I am diving in head first to all things Ruby I've never been happier.
Hint, if you stay up until 4am to keep working on coding projects, you've found the language you LOVE!



Don't Panic!
When something doesn't work, don't panic. And, don't go crazy changing things, unless you are super confident you know where the problem resides. Take it slow and steady. Read the error logs. Repeat your steps. Most often, there is a mispelling, a missing character, or some other mis-type. 
Repeat. Redo. Recycle.
When you delve into an exercise or task. Read over the lesson or requirements. Really orient your brain on the subject. Perform the work. Cycle back through the lesson or requirements to ensure the expected outcome has been satisfied.



Just Give It A Go
You have nothing to loose so just jump on in and see where the rabbit hole takes you.
				And if all else fails just ask for help.
Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Check your Work
Computers are dumb and you are smart...but you will feel dumb if a teeny tiny mistake messes up your entire code!  Check, double check,
				and when all else fails, ask someone else to look over your code. They may catch what you missed...and even some things you didn't notice!
				Don't sweat it...typos happen!
Don't Expect Immediate Perfection
You're learning a new skill.  It may be totally different from anything you've ever done before.  You'll probably suck to start with.  So
				did most people who had no idea what they were doing.  But you know what?  Pretty soon it's going to click...you'll get it...and you'll know
				so much more than everyone else!
Mondays Suck for Coding
At least they do for me.
Don't Try to Force it
Coding after dinner is a slog.  Don't force it...that's how mistakes happen.



Don’t just copy/paste code from tutorial sites!
I learned more when I looked at the code of other developers and played around with it, trying to understand their approach. It takes longer, but it’s a much more effective learning experience.
Just build it!
Don’t worry about not having the complete skill set to finish the project. You’ll acquire it through the process and come across problems and solutions you didn’t even know existed. After a while, you’ll start looking back at your code and seeing how you can improve on it and introduce new and more advance technologies and frameworks.
Get used to writing clean, readable code!
This way, others can understand it, and when you come back to it 6 months later you won’t have to decipher it again. Clean code is also less prone to bugs and other issues.
Think, write, test, refactor, repeat!
Think before you start writing code – what are you trying to do? How will you know if it works? Test your code, and after optimizing – refactor. Many less experienced developers skip this critical step.
Keep it simple!
When starting out, don’t be afraid to choose a programming language that simplifies development at the expense of performance. While languages such as C/C++ will be an important part of your toolkit later on, your first programming language should be one that offers suitable abstraction, such as Python or Ruby, so you can learn faster and focus on understanding fundamental concepts.



Seek out the answers
There have been many occasions during my coding journey when I think of something I'd like to do as I work through a tutorial or add to a project, but don't quite remember how. Often, it's not something essential, so the easiest path would be to forget it and move on. Don't! That's the best learning opportunity you'll have. It's organic and meets an immediate need, so you're even more likely to remember the solution than if you'd encountered it in a generic tutorial. But only if you put in the time to seek out the answer, so get Googling!




Discipline
Learn time management
Spend time coding every day, but also balance it with other personal time.


Seek help when you need it
Google is your BFF.
Go to Meetups!
Ask friends for help :)




* Everyone Has to Start Start Somewhere *
You are going to be frustrated and want to throw your computer across the room. You are going to want to quit. You are going to feel like you will never understand what's happening.
We have all been there. Making mistakes, confusion, and broken code are how we learn. The truth is, you'll never stop learning as a programmer so I think it's best that you get comfortable with the experience of failing and trying over and over. And remember, we've all started somewhere. We've all had to practice the skills we've developed to get to where we are today, regardless of what they may be. And that applies to coding as well. Just imagine looking back on these experiences in two years. Who knows where you'll be?
* Immerse Yourself in Community Activities *
I have found the coding community to be immensely supportive. Most major cities have fantastic Meetup groups, workshops, hackathons and more, encouraging aspiring programmers and designers to come together. I have personally attended workshops for teaching women Ruby on Rails (RailsBridge & Rails Girls), and Meetups like Girl Develop It. Everyone who attends these meetings understands what it is like to be a newbie and they really want to help enthusiastic people learn. Plus, you might just make a friend or two.
* Search, Search, Search *
Stack Overflow the heck out of your questions. Google like a maniac. Read programming books and online resources like blogs. Informational interviews with interesting companies can also help you explore which skills you need to develop to be a viable candidate.
* Face the Tech Head-on *
Don't be afraid of technology or technologically-minded peeps. Sure you are going to come across those programmers or designers who seem crazy smart and amazing and you practically want to bow at their feet. But hey, don't compare yourself. You can get there too. Like I said before, this requires patience, diligence in the midst of failure, and curiosity.
* Take Time for Yourself *
This is an important tip that many people forget, especially when they start out. When you're first learning, it is easy to dive in headfirst and try to cram all the material you can into your mind for hours upon hours. But, as I personally know, this leads to boredom and lack of focus. Take things in chunks. Try to do a little bit of coding/design each day instead of several hours only once a week. The consistency and routine really pays off.
The other point of this blurb: know when to take breaks. Time away from the computer can work wonders, especially if you have hit that point where you are stumped and stuck. Like any other muscle, our brain needs rest and time to recuperate. Let yourself put the task away for the day and come back to it tomorrow. It is OK to not have it all figured out. A fresh perspective may be just what you need.


Hi my name is Chris and I have some advice for you!

Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion should be used as a motivator!
Most of us have not done much in this realm of programming. This is all new to us. So if you are not confused, maybe you should consider moving beyond this. Otherwise, remember that learning to code is a lot like a baby learning to walk.
Like a baby... You get yourself up and moving then all of a sudden you come crashing down. Confused and a little mad... you look around in desperation. Then you pull yourself together, after a little encouragement, you pull yourself up and try again! Then once you have the basics down, you realize there are so many new things that you still have to learn! No worries! Soon you and me will become totally capable of standing on our own two feet while doing all kinds of amazing things in the coding world!
Google it! That's what developers do!
Programming is such a fast-changing field. A senior developer may have a master's degree in computer science and has been working in his job for 20 years, but if he doesn't work with all the latest changes in coding, he will be lost. Even senior developers need help occassionally!
Don't be afraid to ask for help but google it first! Most likely, the question has been asked before!



Getting Started Is The Hardest Part
Learning Ruby (or any other programming language) is a skill that gets easier over time. At first, everything might seem foreign and confusing, but you should know that just by sticking with it, it will gradually start to make sense. Certain parts might be more challenging than others, but the only sure way to fail at understanding is to give up.
If you have a Mac, your installation will be easier!
I am primarily a Windows guy, but trying to install Ruby and Rails on my Windows box was a nightmare. I had a Macbook that I mostly used for DJ-ing, and after about two whole days of unsuccessfully trying to get Rails and Ruby running on Windows, I switched over to the Mac and all my problems were solved, I had it up and running in about 30 minutes.
This is not a religious Mac testimonial; I still consider myself a Windows guy.  I just wish I had started my Ruby / Rails tutorials on the Mac first, as it would have saved me several weeks (the 2 days of painful installation attempts, plus another few weeks of procrastination). 
Make some progress EVERY day.
Some days I barely have enough time and energy to do anything. But if I put it off, I fall behind easily. So I try to do a little coding every single day. On the days that I am not able to code, I try to at least read about coding.  I bought several Ruby books on Amazon so I can still feel like I am learning something on my breaks at work (where wi-fi is unavailable because I currently work outside the tech sector and they apparently dont want us hogging their bandwidth).




Do you remember elementary school?
Back then, you learned many different things everyday. Your teacher drilled multiplication tables, long division, and fractions at you nonstop. You read many works of fiction and had to report back on the author's purpose and theme, descriptions of main characters and plot details. You memorized state capitals and key history events. Then you practiced a musical interest, played sports after school. Whew! Your were just a kid, and you plowed through the daily learning like a champ.
Learning is your friend, then and now!
At times, you loved the learning process. "Now I can read!" "I can play this song on the recorder!" "I know how much money I need to buy the candy I want!" When you experienced learning success, you gained confidence and and felt like a bigger kid. You could do more in your world and you understood it better.
Yet there were times when the learning didn't come to you easily. You got stuck. Things didn't make sense. You were frustrated. You wanted to give up. Yet, there was a goal in sight, a desire to grow up and be able to be independent. So you hunkered down, asked for help, and were patient with yourself. And, eventually, you figured it out!
A little Patience, Yeah, Yeah!
When you learn to code, some things will seem to make sense and other things won't. You have to have a space here, but not there. You forget a tag, a semicolon, or parenthesis and the whole code won't work. You can't figure out your errors. It all looks unfamiliar. You move on two a new concept and you forget something you learned two weeks ago! Ahh! You can get totally overwhelmed, give up, and throw your computer our the window! Or you can take a few deep breaths, take a break outside, and resolve to become way more patient with yourself. 
Go back to the problem, the error message, or just the funny looking code with a renewed desire to solve the puzzle. Believe in the process, even if it takes you down roads of self doubt. Just a little more patience with yourself, and suddenly you may see how close you actually are to the finish line. 
Water your seeds for creativity.
Technology innovates itself constantly. You've got to turn on your inner innovator to keep up! Push yourself towards divergent thinking so that you can come up with many ideas and solutions to problems. Collaborate with others and bounce your ideas off of each other. Be inspired by what other people create.
Give yourself permission to nurture your creative side. Daydream. Look out the window every so often. Write in your journal. Let your mind continue to work when it's not officially "working". Your downtime may result in a huge breakthrough during your work time!



1. Get some sleep
It always makes more sense in the morning.
2. Be careful copying and pasting text.
Nothing is worse than a funky whitespace character.
			3. Check your punctuation
Oh, that was supposed to be a semicolon?
4. Someone has had this problem before.
Ask Google for help, and you shall receive.




#1 Use your resources!
The amazingly fantastic Skillcrush team has assembled a full stack of super helpful cheatsheets on all the essential topics. Think of them collectively as your recipe book for coding awesome sauce.
You will encounter errors at some point. Don't despair. Look first to the cheatsheets, because chances are really good the answer lies within those pages. If you do not find the solution there, get thee to the MightyBell and read (really read!) what your mates have asked and commented about the challenge. The law of averages says someone else has felt your pain - and overcome it!
#2 Use your noodle!
Usually the right solution requires a little mental elbow grease. You will need to think through the problem you're trying to solve. It's highly probably you may try a few scripts that fail to run before you hit the one that works. Be patient and persevere!
If coding were just all copy and paste, we'd have gymnasiums full of chimps pumping out gems like Harry Winston.
#3 Use the Force!
Aka, the Google. If you've thought and thought like an owl (because all owls think a lot), consulted your cheatsheets, and still come up with nil, crowdsource a solution with a simple search. Between Stack Overflow, and a google different blogs, you're bound to run smack bang into the answer which you seek.
Just remember, like a good Jedi, to "always pass on what you have learned."
 I don't want to 'string' it out, so there you have it, Rubkies. Your short and sweet daily affirmations to git you through the early assignments. Good luck and good speed.



Watch and Read all different kinds of tutorials!
Even if it's on a skill you think you have already conquered. Sometimes someone else can explain a topic that makes
			you think about it in a completely different way or allows you to understand it a little bit better. Use all of the resources you
			can get your hands on! 

Don't give up!
There have been plenty of times where I wanted to throw in the towel and pretend like I had never given this
			coding thing a shot. But just when I'm about to give up, I somehow manage to find the solution to whichever problem I was having.
		  You just have to keep trying, practicing, and learning. Your patience and persistence will
		 	pay off!



If you have decided you want to pursue something, do it.
Once you know what you want, commit!
You could spend all week, all year, or the rest of your life being wishy-washy if you never make that choice.
Some people are never blessed with a passion, something they really enjoy.
Once you find your passion, follow your dream!
Don't be afraid of hard work. And don't be afraid of failure.
If you are afraid, then don't let the fear make your decisions for you.
It doesn't help you to be on the right track if you never move forward!
Take the leap!



Confusion is your friend!
Ask questions and search for your own answers. Sometimes, it sticks better if you do the legwork yourself.
Always, always, always type the code out yourself.
There is something to be said about the way that the code becomes second nature. Even if you're not sure about it, your fingers will be.



It's okay that you know virtually nothing! 
You will constantly feel overwhelmed. You will feel you can't possibly ever 
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Don't take the easy way out
Often, when you're taking a class, you have an available hint, or answer available to you. It's important to try as hard as you can to figure out the answer on your own, unless you're absolutely stuck. Even if it takes significantly more time, you'll have helped solidify that knowledge in your head much better than if you looked for the answer
Don't be afraid to test buggy code
Sometimes, I've stumbled on the correct answer simply by applying a little bit of brute force. Try typing things differently and see what happens. Try paths that you don't think will work. See if you can get DIFFERENT errors to occur. Each failed step is closer to the ACTUAL answer



Shop around but stick with one language at the beginning
It is crazy out there! When starting to program things are going to become overwhelming fast. Languages, libraries, frameworks, apps, etc... Which one is which, and which should your care about?
This is where time and a course or codecamp comes in. THey help your make sense and focus on what it is out there.
Especially when it comes to JavaScript! There is so much emphasis behind this language that it is overwhelming to understand what is what.
Do yourself a favor and don't start learning coding with JavaScript. Choose a friendlier and better teaching language like Ruby or Python.



Some days you just aren't feeling it.
Take today, for instance.

			I really don't have anything useful to suggest at the moment.
			
This is a fairly horrible set of styles
But I really can't be bothered to fix it right now.
It's definitely different... Git will notice, and that's really the point.



Coding Takes Patience!
Learning to code takes a lot of time and patience.
So celebrate the small accomplishments.




Read everything, everywhere!
When you first start, you're not going to understand the majority of what you see. But getting used to the "tech speak" terms, and the general way poeople interact is what you're hoping for.  The code understanding will come and pretty soon you'll be contributing to stackoverflow, not just reading!
Practice, practice, practice
Think of 15 ideas for cool things you'd like to do, and just practice them. Once you get one working, tweak it until it's pretty, then tweak it again until the code is concise. Then try something new. Pretty soon you'll have a cool little bundle of small projects that really show your development over time.
Ask the dumb questions
Eventually you'll run into a project that no matter what you do, drives you into the hair-tearing-out, throwing things stage. So ask for help! It's not like you failed, it's like you're working on a real development team and you're having an outsider review your code. Sometimes being too close is the problem. And don't hold onto your supposed "failure". Fix the code and move on.




Search for Alternate Explanations!
If you're new to coding, expect broken code frequently. Oftentimes, your code and process are perfect if not for a simple syntax error... a missing colon or quotation mark, for example.
However, just as often, your code or process are simply incorrect. You've misunderstood the instructions or added steps out of order and cannot spot what's wrong. With Google, and descriptive search terms, you'll likely find the solution at forums or blogs explained using language or examples that clarify the process.
Find and Save the BEST References!
When fixing code, you'll Google frequently to find solutions and occasionally find that "one source" that seems to explain your dilemma in just the right way. Some of the best resources are others who struggled at the start and now post their version of explaining code.
If the perfect solution is found on a site that appears to "speak your language", save that reference! Bookmark it. Create a spreadsheet. Whatever works for you.
Most likely, that random source you stumbled onto will offer future solutions to other code dilemmas written in a way (or using examples) that will be similarly easy for YOU to understand. Save yourself time and check out that site first nest time.



Take it one step at a time
When you begin anything new and are excited about it you tend to want to rush ahead. The problem with this is that you often skip important steps that you need to follow in order to get things right.
This is not always a bad thing as you will learn along the way but when you are starting out it is can be a big deal. Take it easy and get your bearings straight before taking any major leaps.
Don't get upset if it doesn't work the first time
I believe that this is very much a trial and error area of expertise. You will sometimes get things right the first time, but don't sweat it if you missed something. Just go back and keep trying until you can work it out. This is part of the fun.
You get to become a code sleuth, hunting down the cuplrit of your frustration.
What ever you do, just don't give up. This is a great experience and wonderful knowledge to have. It will hopefull take you to great new levels in your life.



Ask for help
When you get stuck and can't move on, your Skillcrush instructors are there to help you. Your questions get answered in no time.  Ask questions in the MightyBell circles. Your fellow students may be struggling with the same problem.  Maybe someone else has already solved it, and can give you a hand. You'll never know unless you ask.  Or just 
Be patient and compassionate with yourself!
When learning to code as well as programming, I had no idea of what it all entails, what it all meant! Everything was brand new to me.  Sometimes, I would become so frustrated with myself because I felt like it wasn't clicking and just wanted to give up. But I managed to keep pushing through.
In order to survive, you have to learn how to be patience with yourself.  Learning to relax, laugh at yourself, and not getting overly excited can get you through stressful times.  So just be compassionate with yourself because at the end of the day you need you will understand what you are doing. So, take your time, learn the concepts, and ask plenty of questions.
 Before you realize it everything will not be a blur and things will finally come together.
			Use on-line resources
Use online resources like w3schools.com and stackoverflow.com.  They cover just about every aspect of HTML and CSS, and they provide a practice area where you can try things yourself and see immediate results.  You can search for a term and find the reference page for it quickly and easily.
Don't give up!
Never, never, never give up even though learning to code is challenging.  It's like learning a new language.  Just stick to it, and you'll find it gets easier with time.
Practice, practice, Practice!!!
When you are learning a new technology or programming language there is never enough practice.  Practice when you are learning, practice for understanding, and practice to see if things could be done more efficiently.  The more you practice, it aids in your knowledge of understanding exactly what is happening and why its happening.
Finally, always take  mini breaks, and come back refreshed and energized! You'll be feeling great all day!  
Be Good to Yourself!



You can do it!
It's okay to feel overwhelmed sometimes--learning to code is really difficult!
But there's a whole wide internet out there and the SkillCrush community is super great so don't be afraid to ask for help!
Make sure you take the time to work through the exercises so that you enforce the concepts, but if you're really stuck on something, take a break! Sometimes what you really need is to walk away from a difficult problem for a while and do something else--take a walk, do the dishes, watch a movie, whatever. When you come back, your brain will have had time to relax. I find that if I'm stuck and I take a break for a while and do something completely unrelated, usually the answer comes to me as soon as I've had enough time off from thinking about the problem.
You can learn to code. I believe in you!
Just because you're not "naturally talented" at something doesn't mean you can't become talented. Here's a secret: "natural talent" is kind of a myth. The reason people seem naturally talented at something is because they work hard at it. Why don't they look like it's hard work, you ask? Simple: they find a way to make it interesting and fun. If you're struggling to care about a particular project, maybe it's time to let it go and try something else. Sometimes taking a break can renew your interest.



Don't take my word for it.
Don't just copy the assignments you're given in class. Think of ways you can tweak the code you encounter, and then, most importantly, try them out.
Seriously, the best way to learn to program is to write programs. Then write some more programs. And then more programs. I think you see where this is going.
Let's talk about debugging.
Inevitably you will write code that doesn't do what you expect it to do. Very early on, problems can usually be explained by simple syntax errors, but what about when that's not the case?
The good news is that you've probably progressed from syntax errors to logic errors. The bad news is that logic errors are harder to detect and fix.
Usually the best thing to do is to start sprinkling output statements throughout your code. Often certain pieces of code hinge on variables having certain values. Chances are that if you're having problems, those values aren't what you think they are. Print them out so you can find this out for yourself.
It turns out this is a recognized technique with a name. It's called debugging by printf. Although printf is a C term and not a Ruby term, I hear developers in a wide variety of languages call it that.
Sometimes you will hear people sneer at this technique. Don't listen to them. Literally every person I know who writes code for a living does this at least occasionally. Sure, eventually you'll want to be comfortable with more sophisticated debuggers, but don't worry about it for now. I literally used this technique with a student earlier today, and it helped him narrow the scope of his problem.
When describing debugging to someone without a technical background, he replied, "Oh, kind of like a detective." That's a great comparison. Like detectives, we often have to solve problems of unknown origin based on what's in front of us. Enjoy the ride!



Making mistakes is how you learn!
It's easy to copy and paste example code and get your new script to run first time; but have you really learnt anything? Always have a go at completing a challenge from scratch first of all.  Run and re-run and welcome any error messages that you encounter along the way
Error messages are you friend, don't think of them as marks of failure but as guidance on where and how to improve your code.  The more you see the quicker you'll recognise similar issues in the future and eventually learn how to do things right first time!
How do you eat an elephant?  Well, one bite at a time of course!
Learning anything new can seem daunting, especially something as complex as a new programming language.
However, in the same way that a baby learns to talk (or walk), start one step at a time.  Break your coding challenge down into small tasks, get one bit working, then the next, then the next...
Before you know it you'll be doing the coding equivalent of that baby reading a story aloud or running around a track and the process of getting there will be worth it



Code every day!
Even if you don't know what you're coding. Just find a tutorial and
      follow it. After about ten of them you'll begin to recognize patterns and
      remember them. You'll eventually realize that everytime you create a new
      view you have to update the routes. Or Adding basic logic to your
      models.
I wrote an article about this called "Gaining Context: Hack Your
       Learning" on my blog, Rempel on Rails



You'll be granddddd
HTML & CSS seem pretty straightforward to begin with, once you've studied them a bit... JavaScript ramps things up a notch - a big notch - you won't have a clue what's going on for a while.
Just keep at it - you'll get it, I promise.
Believe me.
Honestly, it might seem overwhelming, but the satisfaction you get when you write your FizzBuzz and get it to work is class.
You can do it lads - enjoy it.



Don't let the imposter syndrome take over!
When you start learning programming, you will feel like a super human. Suddenly you have access to all this information not viasble to most human beings. However, rememeber that even though the first project might be overwhelming, you've learned a lot. 
Don't compare yourself to other develpers. You might not have the same experience but you do have knowledge to crack the probelms. You will find your way around sooner or later...Just don't give up when things get hard.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Don't get hung up on which language to learn.
No matter which programming language you choose, in an introductory or beginner course, you're going to learn the basic concepts of programming. Those are the essential things, the concepts that you'll use in any and every language.
The rest is details. Once you understand things like looping, conditionals, arrays, functions, etc., picking up a new language is largely a matter of learning the particular syntax of it and how these concepts are implemented.
Practice consistently.
Work on a schedule that suits you and that works with the rest of you activities - maybe every day isn't feasible, but a few times a week, or longer study sessions once a week on a day off from work. Leaving several weeks or even months between study sessions will make it hard to get back into it if what you've already learned is fading from your memory. Keep it fresh, and you can call it up more easily when working on a project.
There are tons of resources out there to learn programming, many of them free, so if you get stuck with one, or just want a little bit of extra practice or a different approach, give another one a try.



Mistakes are the best teacher!
Attempting to learn something new, after being considered an "expert" in a different field is an uncomfortable position to be in to say the least. I had to repeat the advice I would give to new employees to myself:

It's going to take several months before this will begin to click for you.
Don't be afraid to mess up. You'll learn the most from those experiences.
And...there are no stupid questions. Usually those with inquiring minds will learn and gain confidence the fastest.
				
So...do not be afraid. You can do this!
Skillcrush will not make you an expert, but it does open the door to a new skillset. You'll have to determine how to best utilize it.
Will you dive deeper and find (or create) some small projects to gain confidence and make your way to a freelance extrordinaire? Will you utilize this base knowledge to better interact with your technical collegues...impress your boss and get a raise? 
There's no "right answer" to how you allow this to change your life. You've already took the hardest step by getting started.



The Best Advice My Dad Ever Gave Me
My father, now in his 78th year, is an early adopter. When I was in college in the mid-80s, 
			he begged me to try using a personal computer. I clung to my electric Smith-Corona with a death grip. 
			But by the time I was working on my Master's thesis in the late 80s, I agreed to give it a whirl.
			This was the age of DOS.
My father was my own personal tech support... and he still is! And here is his excellent advice: 
			When the problem seems insurmountable, and you know you have tried everything, but it just isn't working, do the following:

Shut down the computer.
Make a martini.
Drink the martini and get a good night's sleep.
Restart your computer in the morning.
This works almost every time!!!

What I Learned From Skillcrush
Of course I can do it! I'm Rosie the Riveter! I'm Wonder Woman! 
			(Actually, I'm a short Jewish girl from New Jersey, but Terminal doesn't know that.)
What You Should Know About Me
I could not for the life of me figure out how to change the font in the header or footer of this page.



Practice Practice Practice

When learning to code you will have to plan to spend lots of time practicing. The programming skill gets better with lots of practice. As a matter of fact it requires more time to practice than actually solving difficult problems. 
If you are starting out then I recommend identifying some time to spend to practice coding each day for a few months before you will actually feel comfortable programming.

Challenge Self

You will have plenty of opportunities to challeng yourself when you are learning to program.  Don't just do the exercises to complete them Only, challenge yourself.
It is when we challene ourselves that we really learn.  Stretch yourself towards the personal gpals you may have every day.




Coding is for everyone!
Honestly, this is the best thing I've ever heard. Whether you are a mother, a doctor, a retired teacher, whoever you are and no matter what your background is, know one thing, YOU can code.
The only two things you need to start to code are motivation and perseverance. You don't need to have aced your maths in school or have a degree in computer science. Just believe in yourself and practice.



Always listen to your 3-year old
When your 3-year tells you to stop working because you've been working too long then stop. When he tells you to pick him up, pick him up. 
If he wants to stay home from daycare because he doesn't want to miss you all day, let him.
There are many more where that came from.



College is for the Non-Thinker!
If you are looking for a career in technology, more specifically in programming/coding, the internet is the #1 learning resource. College has become a status symbol, a right of passage, rather than an institution of learning.
Coding/Programming is a skill or trade that is better understood in practice than in theory. Theory should be taught after getting your hands dirty.
Problem solving is the key to success!
I think of programming as solving small problems which lead to an even bigger solution, to an even bigger problem.
My point is that coding can be thought of solving a bunch of small problems to solve the greater picture.
There is a light entry barrier and limitless pinacles to be reached in the world of programming. Passion for learning new technologies is the key to succes.



Test in al browsers!
When you are writing you html code make sure you open all browsers and check that the look and feel is the same in all of them. The first time I created my first web site I was entirely focused on one browser thinking that it would look the same for the others.
When I send the link to a friend to see my awesome work he came back to me saying....What the hell? He asked if it was a joke, that everything was all over the place. I thought he was joking because it looked great in the browser I was using. Then he told me he was using a different one. When I opened the page in that browser...I passed out.
Looping around
When using loops make sure that it is going to exit at some point. CHeck the boolean condition, or the the index that increases or decreseas to make sure that at some point reaches the condition. Otherwise you might find your self having to force quitting the program you are using to code since it goes complete unresponsive



Advice I wish I'd gotten!
Some things will make sense while you are learning them but get all out of whack when you actually try to implement them.  You may think you are logical but you will quickly begin to question this belief!  I think that's normal.
Some things will go more smoothly, but then just when you think you are getting somewhere you hit a roadblock.  Don't give in to the frustration!
Keep reminding yourself to suspend disbelief.
There is nothing quite like the feeling when things come together and work as they should.  This should keep you going, since it is usually some small, minor thing keeping you from success. 
Get up and walk around, take a break and then come back to your computer.  It will give you fresh perspective.
Remember, if this was easy, everyone would know how to do it.  Don't get discouraged! 



Don't be afraid to make mistakes!
When you first start out, and probably from then on, coding is hard. The smallest things can make you break your code. But the good news is that you get used to this and you start to look for the small things. You start to tune in to the code and realize why that space mattered or why that tiny typo made that huge difference. So don't be afraid to make a mistake. It's how you learn.
Because when you make a mistake in code, eventually you will have to find it, or else your code won't work.
Give yourself a breather when it's all going to hell
When you are really stuck and you just can't find out what you are doing wrong, or maybe you know the exact problem but just can't figure out how to get it to do what you want, take a break. Very often, if you are in something for a long time and you can't figure it out, you stop thinking rationally about it and fail to see the solution. Move onto something else for a while. Give your brain a bit of time to relax, and then get back to it. A fresh perspective is always more effective.
Question everything, even if you think you sound dumb
When you are starting to learn you might have the tendency to copy the code or just follow the instructions, without thinking or asking questions. You should never be ashamed to ask a question, whether that is to other developers or to Google. Think about it, if you start out your coding journey by questioning every piece of code you learn, you will end up with a much better understanding of what that code does. And that will help you in the long run.



Learn your BASH keyboard shortcuts
You only need to memorize a few to make a noticeable difference. Ctrl-A, Ctrl-W, and Alt-. are a good start.
Read blogs
There is a ton of great material out there, and reading about why people prefer X vs Y will give you a greater understanding of what X and Y are in the first place.

Step away if you need to
Sometimes you'll be working on the same problem for hours and you just can't figure out what the issue is. Take a breather and come back, often the distance will be enough to clear your head and see the problem in a new way!


Learning is supposed to be a bit uncomfortable.
If you are comfortable doing it, you already know how. 
Just keep moving forward.  Things will make more sense in time.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



You can learn this—I promise
If you don't have a traditional technical background, you may feel like hard tech is Beyond Your Understanding. It's not. If you could learn math in high school, you can learn the basic bits and bobs of Python or Ruby or HTML or whatever now. The key is to find someone who actually wants to teach you, and won't make you feel dumb when you're learning.
The image came from here.	
 
Mistakes, backtracking, and stalling out are good signs
Redefine these words for yourself right now: failure and progress. 
			Movement of all kinds is progress: forward, back, 
			up, down, in and out of understanding. Every maneuver is a chance
			to learn so don't get stuck in a self pitying rut when things
			aren't going your way - just keep moving! 
						
		Be stubborn, but don't be a masochist
It's important to mobilize some grit because you will run
			into a concept or a bug in your code that will send you through
			the wringer. An adamant refusal to admit defeat will push you to 
			untangling your problem, but don't force yourself to work through
			this all in one sitting.
Change your scenery, get a cup of tea, focus your mind on another 
			task or thought completely. A fresh perspective often helps us 
			to see what was hiding in front of us all along.
Drop the stopwatch, this isn't a race
Whether you've been learning and writing code for years or minutes,
			don't take the joy out of it by putting a timestamp on it. Watching
			the clock is an unnecessary pressure, especially when you're 
			first learning. Take your time! Speed and efficiency will be a product 
			of patience and diligence; you might as well enjoy the journey.
 
© Copyright Skillcrush 2014.  

Pick a Language
After you pick a language, learn everything you can about that language. By the end of your self-taught learning you should be close to an expert in that language. Things may seem extremley confusing at first but you cant let that deter you.
Build, Build, Build
This is probably the most important tip that I can give you. Building small projects will not only help you with mastering the language, but it will also give you projects that you can showcase to futurue employers.
Enjoy the "Journey"
Learning how to code is going to be one of the most challenging and and enjoyable experiences that you will go through in your life. You can learn a lot of valuable life lessons from learning how to cdoe.



Be in the here and now!
If your here embrace the moment. You are a learner, thinker, a do'er!  The world is at your finger tips and Google is your closest friend!
The lure of distance and the difficult is deceptive. The great oppurtunity is where you are. ~ John Burroughs 
Find opportunity where you are.
Some concepts may come easy to you and others will be harder to grasp.  While learning to program try thinking "outside of the box". Embrace every challenge and you will rise above. We create our own opportunities!
The reward of learning to code is that you can change the world. You can shape the future with the skills you are learning. Share your path and your story!
Wishing you the best of luck in this journey! The best has yet to come!



Don't get discouraged!
When you start programming, you might get frustrated when your code does not work. Don't get discouraged! Look at your error messages and go from there.
Take a break!
Sometimes you will feel like you are not getting anywhere with your code. That means it's time to take a break. Come back to it with fresh eyes and you'll have more energy to solve the challenge.



Don't give up.
You might have to start over. You might have to take a break. You might have to indulge in some therapeautic brick-hurling. That's OK. Just don't give up.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Getting over your Imposter Syndrome
The first rule of Imposter Syndrome Club is that you're not good enough to be in it. Imposter Syndrome, or Fraud Syndrome, is a psychological phenomenon in which people are unable to internalize their accomplishments. Many new programmers tend to fall into the Imposter Syndrome state of mind when they first start out. They may say to themselves, “What are you doing here? What do you think you’re doing? You’re going to be found out!"
Overcoming Imposter Syndrome requires self-acceptance:  you're code is never going to be perfet when you're first starting out. You don’t have to attain perfection or mastery to be worthy of the success you’ve achieved or any milestones you've hit along the way.
It’s not about lowering the bar, it’s about resetting it to a realistic level that doesn’t leave you forever striving and feeling inadequate. You don’t have to be Linus Torvalds to be a valuable asset to your team and to those around you.  Nor do you have to attain perfection to share your code with the world.



Get real projects to practice on!
Even if you feel you don't know enough to create something real, go for it! That would be the only way you will really process all the new amount of information you are learning.
While doing this, be also preper to have lots of questions and be very very slow, and this is ok. There will always be the next project that will show how much you have improved from the previous one.



Coffee is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Coffee, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is technology and that it's time for you to dig deeper and keep going because victory awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Keep your brain young by learning new skills!
Learning new skills at any age creates new brain synapses, your brain grows and you get smarter! The older you are the harder it gets, but constantly learning new skills keeps your brain sharp...and it gets easier with practice.
Any new language is difficult at first.
I've "learned" a few other programming languages, but never really used them. Ruby is by far the easist language! It has real words that make sense: push, pull, clone.
We also have the amazing benefit of lots of code, already stressed over, that is available to anyone...for free! How sweet is that? Someone else did the hard work and I get to incorporate it into my code.
Learning anything new takes time, practice and perserverance. If you can't figure something out, don't keep circling; walk away and do something entirely different. Our brains are amazing. They keep working on a problem even when we aren't consciously thinking about it. You'll be surprised how much clearer your thinking is when you return to the problem.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Probably the most important piece of advice I can give you to start out is this: START WITH MAC! It's just so much easier and more efficient than Windows, primarily because programming is geared for Mac.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits. I promise, you will get there. Don't give up, when something doesn't work look at it again, there is a way to get it to work and keep an open mind because sometimes you may have to do something in a different way or integrate different operations to accomplish what you are trying to do.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!

According to Skillcrush, "Confusion is your friend." If this is true, confusion and I are BFFs! So here's my advice - don't let confusion stop you. Keep forging ahead, Google what you don't understand, practice and practice some more, look for programs that fit your needs and inspire you on your learning journey, share with others and don't be afraid to ask those "stupid" questions.


And slowly (or at least for me it was slow) confusion will start to morph into those "aha" moments where little bits and pieces of knowledge come together, making you feel like you have the power to rule the world!!...Okay, that escalated quickly...maybe not rule the world but the power that is knowledge can rock your world! 



Going back to Skillcrush advice...
"Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits."


Remember, my friend...

We are all human, none of us is perfect. We all learn at different speeds and in different ways. Some days of learning are awesome and you are on the top of the world, while other days...well, you feel pretty good knowing how to turn the computer on.

When you have one of those days...Remember:


You're learning a new language,and mastering that language probably won't happen in one day or even one week...so give yourself a break.
Breathe...you will figure out the padding and margins on the stupid box model!
Get up, get away and take a walk...before you throw that computer out the window




 You're not alone in this learning journey, so seek out others for advice... or an empathetic ear to whine into.
Some days are going to be like this...remember tomorrow is a new day.
Be thankful for the opportunity to learn... many people aren't given that opportunity to broaden their horizons.




 Remember..."Confusion is your friend!"



When I first started coding, I was excited about learning a new language and all the happenings behind computer programs and applications. At the same time, I felt somewhat nervous about making mistakes that totally mess up programs.
There were times I was frustrated with coding. I learned that I should not be afraid to ask if I am do not understand the methods or how to code a program with Ruby.
I should also be consistent about learning to code, even if I think I cannot make time. I resolve to learn coding regularly and not be sporadic about when to learn. I will make a point to learn every day, even if it just a little.
Remember, practice, practice, practice! If it becomes difficult, keep trying until the code works. It never hurts to go back and review the methods. In fact, I encourage it because if you don't use it, you lose it.
After all your hard work into making your code work, celebrate. You deserve a cookie (or more or any other favorite treat), hence my site Cookies and Coding!




"



Don't panic if you don't immediately 'get' something, we comprehend ideas and concepts only when we're ready to


"
                        



Have you ever tried to learn anything before? Then chances are you have beat yourself up about not being able to learn something as fast as your peers do, or as fast as you feel you should. I urge you, the next time you don't immediately 'get' something, don't waste any time or energy on self-doubt, and instead work on filling the knowledge gaps in your  foundation. Your brain is capable of learning almost anything; you just have to nurture it in the right way!




"



Take advantage of every learning opportunity


"
                        



Sometimes you just want to get the work done, sign off, and head to the pub. I get it. But on occasions where you find yourself with a bit of time up your sleave I encourage you to break and unbreak your code, research best practices or alternative ways of doing things, heck do anything! You'll never find a better opportunity to learn something than whilst working on a real project. You'll thank yourself later.




"



Code every day


"
                        



This is the most common piece of advice I hear from web developers. After 1.5 months of intensively learning/practicing code, I can confirm that there's something to be said for immersion! You don't have to spend so much time picking up where you left off, things that you've learnt tend to be more fresh in your mind, and most importantly you build up momentum in your coding endeavours so before long you feel unstoppable!




Think like a programmer!
Easier said than done, right? The thing is that programming languages are languages just like any other (i.e. Spanish, English, bad-English, bad-Spanish, grammatically-incorrect-Russian, pig-latin, etc.).  You have to practice it everyday in order to get the hang of it.
Try to learn some math, if you're not already math inclined.  I am not what you would call terrifyingly mathmatical, but a couple of classes at the community college may not hurt as bad as you might think.
Changing the way you think is hard
When you are learning a new technology, you've got to do this.  Fortunately, the solution is a simple one, and that's practice.
Read books, too.  Learning someone else's method for doing what they do can only help.  You'll start to incorporate little tid-bits of advice and eventually you'll be programming in your sleep, actually have dreams about programming in your sleep.
It's can be a long process, but I think you can do it.



Learning How to Code is Hard!
Seriously, it's damn hard.
The Imposter Syndrome is Real.
I'm not kidding.
Get over it.




Deciding How to Learn
Try not to spend too much time trying to pick which courses or classes or videos or whatever you're going to do. Just start! You'll figure out what works best for you with time.
There are a million coding tutorials, schools and courses out there. I got stuck trying to find the "best" one until I realized it was hindering my actual learning. As in, I was spending all my time trying researching and not actually making a the career change I wanted. Make an educated guess and dive in! Coding is awesome and the sooner you get started the better.


Choosing What Language to Learn
I also spent a lot of time trying to figure out what was the "best" language to learn. Or thinking I could learn all of them. Or trying to pick the one that could make me the most money. I would tell past me to "take a bite" of all of them and see which one tastes the best, then focus on that one and get really good at that one. There's so much coding to be done that you really can make it with the thing that speaks to you.
That being said, I'd also recommend starting with a strong knowledge of HTML and CSS. They are the foundation of the web. I know people who glossed over them thinking they were not advanced enough. I've been told in interviews that knowing the CSS "box model" (not a complex concept) has put me ahead of other who didn't spend the time on it.


You'll Never Know Everything and Neither Will Anyone Else!
This is actually awesome! If you love learning, then this is the field for you. Never be intimiated just because you don't know something. Everyone is learning constantly. Things are evolving so quickly that it doesn't matter if you don't know it. Google is everybody's friend, from novice to seasoned "expert".
In fact, I had to use the browser Inspect tool while making this advice column! Don't let not knowing everything get in your way! You can do this!




Stay organized
Sloppy code is harder to debug and harder for other people to read. Use line spaces and indentations in a uniform way.
You might not get it the first time.
Just like in learning a spoken language, sometimes we have to hear or see things multiple times for them to sink in. Give it time, and eventually you'll have that A-ha! momement.



Keep a notebook!
This can be an electronic document or an actual notebook. I like to have my little book close to write
				little notes to myself. Maybe its a reminder to look something up later or simply a line of code you want
				 to remember. You don't have to write everything down. just what you think you will want later.
Just keep coming back to it!
Sometimes your code just is not right. You will want to walk away and never look at it again. Often if
				you take a break and come back you can figure it out, or the computer will let go of past data and it
				will all just work.
Most important
Don't give up!



Never, Never Give Up
The folks who make it look easy? It was once hard for them, too. In other words, those who are wildy successful never gave up when things seemed ridiculously confusing or terribly challenging. Those who succeed are not necessarily the smartest (although those people exist, too!), but they are the ones who never wavered from their goals, even when they felt like quitting.
Trust the experienced ones.
I cannot tell you how many times I have heard that programming doesn't make any sense at first, to practice, practice, practice, or to find a community. Don't brush off advice from experienced programmers! They've been in our shoes before, it'd be a shame to ignore their advice. 
Be Patient
Be patient with yourself and be patient with the process. If you want to be a computer programmer, you will. (You have to want it, though!) If you don't udnerstand something right away, that's okay. Leave it alone for a bit, take a walk, then come back to it. Repeat this process until you do understand it. And be proud of yourself when you understand something new, even the small things.
Stop comparing!
Don't compare yourself to anyone else. It doesn't matter if you are not as advanced as your classmate, your friend, or your coworker. What matters is that you are constantly improving, learning, and putting in the effort. 
Find Balance, Get Excited, Create things
Okay, so that was three pieces of advice rolled into one! But, to keep it short and sweet: Don't code ALL day; balance is important for our sanity. When you're feeling defeated (etc.), do something to excite you! Remind yourself why you started this journey. Lastly, create things. Sure, read books, do assginments, and undestand concepts...But create something! Many things! This is what makes it fun. A webiste, a game, a weather app...whatever, just do it. This builds your confidence and makes programming even more fun. 



How to learn coding

				1. Practice - Coding is like math. If you do not pratice, you will forget things soon.
			

				2. Change view - Did this ever happen to you, when a person explains something to you in a certain way, you do not understand anything and later when someone else explains it to you in a diiferent way, you understand it. Coding is like that. When you do not understand something, try to understand it from someone / somewhere else.
				

					while (coding == 'do not get it') {	
						    look_for_a_different_answer();	
					}
				


				3. Try things - Try to learn different tools or technology. Knowing how to cook food with different delicious ingredients can make your food more tastier.
			

				4. Keep looping - Repeat step from 1 to 3. 
			






Confusion is the wind for your sails!
When you start learning programming here in Skillcrush, at first maybe it feels a bit confusing and overwhelming, that you don't get all the right answers for the questions you have to solve and everyday you get more new problems to play with. But at some time you start to notice, that with every day you get something new, what in the beginning is confusing but at the same time you notice that you have learned and solved something new, what was confusing at first few days ago.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
No matter what, how confusing and how much it time to time looks like this thing here is not meant for You, You keep going forward!
So lets move on, things can only get better from here on!



I am not great with words, so this will be short. My advice for new coders is the same as my advice for life or for parents or whatever. Sleep often, Google often, and there is always wine.
For everything else, there is Procatinator.



Confusion can be your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Mistakes will expand your coding skills!
 Mistakes are the gateway to problem solving efficiently and effectively.
 Mistakes bring on confusion, but that is a sign that you are heading in the right direction. It's like being in the forest and wondering why or how to not get lost. The trick is to embrace that programming is better done with curiousity and checking out unknown and walked paths. In the process you get to know what works for all and what you can do that is unique. 
When you get tired, pause and come back.
 Making mistakes will feel tiresome and frustrating but this will make you stronger and more eager to code.
 The cloudy understanding will become clearer, and you will see that you may be overlooking the simple answer.
 Don't go solo...pair, collaborate and borrow!
 When you feel blocked by mistakes or confusion, check out other codes to see what you are missing or how to simplify.
Let your mistakes inspire you and your intuition guide you. 
 You will find that as your eyes and mind train to understand and apply code, you become better and quicker.



Finish What You Start!
This may seem obvious to some, but I have made this 
			mistake so many times.  I've started a tutorial or online 
			class just to get frustrated, bored, or busy and quit.  This 
			horrible for learning.  You find yourself relearning things 
			you already know and it ends up taking you so much longer to 
			progress than it would have if you just finish what you start.
It's going to take A LOT of your time!
Learning a new set of skills as comlicated as coding is 
			going to take a long time.  If you don't want it to take you 
			years and years and years, you're going to have to put a lot 
			of your free time into learning and practicing.  I take about 
			an hour a day at work (we're allotted an hour a day for 
			professional development) first thing in the morning and my 
			lunch hour to learn and practice.  On the weekends, I have 
			been using almost my entire days to learn and practice.
Get the support you need.
My wife has been great!  She's really been picking up my 
			slack around the house with house work and the kids so I 
			can have time to work on learning.  Of course, she's hoping 
			it will pay off in the form of a high-paying job for me
			so that she can be a stay at home mom....I'm hoping for that 
			too.
So long and thanks for all the fish!

The advice I wish I was given !
You sure going to enjoy coding after reading this advice
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



© Copyright jazziebaran-advice 2016.



Confusion is your friend! I WISH!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits. Or so you hope!
Suspended disbelief becomes your middle name.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING - WHATEVER THAT IS - but you don't understand HOW exactly it's happening and you probably never will.
This is what they call the normal part of the process of learning a new technology, and in fact, it's a critical part of the process. Yah, RIGHT!
You see when you encounter a new programming language part of your learning process includes learning to train your eye. It's a hell of alot more then your eye or eyes. The way to train your whatever it is, is to read a good deal of code even when you don't totally understand what it's doing. Da, THAT MAKES SENSE - NOT!
Let me tell you straight it never makes SENSE! And those are the facts of starting in Tech! Really. Believe me!
Most important
Give up!



Know git!
I wish I had had this Skillcrush git class long ago. Knowing git (and GitHub) can make tracking changes a breeze, and sharing your code so much simpler. GitHub is quickly becoming my best friend!



Find a network of coders!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, but you are going to get stuck. You need to have people to go to when you need help.
Check out facebook pages, stack overflow questions, quora, etc.
Practice, Practice, Practice
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
In order to keep your new skills fresh and commit them to your long-term memory, you need to make sure you are using them everyday.  Set aside some time for coding every day, even if it is only a few minutes!




You are here.
At some point, everyone was a beginner... Everyone. You have to start somewhere. You are here.


Google is now your best friend. (As if it wasn't already.)
Ask it things.


Sometimes you need to take a break.
When you find yourself at an impasse and nothing is working... take a break. Walk away. Breathe. Do some yoga. Take a nap. Walk the dog. DO SOMETHING ELSE. Come back to it later, it will help. I promise.


It's ok.
It really is ok... or it will be... so you might as well act like everything is already ok. Because it is.



Google is your friend!
How did anyone ever learn anything before the days of the internet and Google? I can't tell you how many times someone has asked me how to do something and I Googled the answer for them. I look super duper smart, but really I'm just lazy! 99 out of 100 times, Google has the answer for you. Sometimes you may have to do a little more digging than other times, but you'll always find the answer -- and learn something! -- in the end.
Keep On Keeping On
Learning is harder the older we get. It doesn't come as naturally and if we don't pick something up immediately we sometimes have a tendency to give up because it seems like it's too hard and will be too much effort. But nothing worth having is ever easy! Try to focus more on the journey and less on the destination. You may find your destination changes the further along in your journey you get. Maybe you wanted to design WordPress themes but along the way discovered you were much more interested in Responsive Web Design. Life is full of surprises. Don't miss out because something didn't show up in the way you originally expected.
Always Have Fun!
I wish someone had told me this sooner. Not the part about having fun, but HOW to have fun. The answer is fillmurray.com.
Always, always fill murray.



Confusion is your friend!
When coding, make sure to have a plan. It is better to spend the time mapping out project, then trying to figure it out as you go. 
When something works, save a copy and then create new copies as you add new features. If it is a small thing just saving a new file will work. Now that I have learned about github.com, you could push up the working code, then keeping going with you new changes locally. That way you know what is on the github respository is the working code version!



Anyone can learn to code!
Coding can seem really overwhelming to those who aren't familiar with it, and many people have said to me "Oh, it's so cool that you know how to code. I could never do that!"
But they can, and so can you! It may seem scary, or complicated, or even impossible, but it isn't! I promise.
When I first expressed this sentiment, that learning to code is easier than it looks, my friend (and fellow developer) vehemently disagreed. "That's just not true!" Said he, "Coding is really hard and not everyone can do it. So there."
Please, I beg of you, don't listen to that guy! You can learn to code. Sure, some aspects of computer programming are more difficult than others, that much is true. And you can get into some very complex and highly challenging subjects like Artificial Intelligence. But you know what? You don't START there! No one does.
You start at the beginning, just like everyone else. Just like the above mentioned developer friend. You CAN do it. You just have to start! Maybe you pick up a little HTML or CSS here, some JavaScript there. And before you know it, you are coding like a champ!
TL;DR Don't listen to the haters. Anyone can learn to code. Start with the basics and go from there. Maybe you love working with HTML and CSS and you decided to stay there and become a boss web developer (Go, you!) or maybe you decide you want to explore programming more and you try your hand at back-end development or making mobile apps. Either way, you did it! You learned how to code.



Patience and Perseverence are Key!
When you start programming, everything is going to be very unfamiliar. Do you remember learning a new language in middle school? Frustrating, right? Well, this is the same exact thing!
Luckily, its even easier. Checking your work along the way is a BREEZE. You can check whenever you like, its not cheating here. Too stuck to find your own way out? Google it! Guarantee the answer is out there. And last, there are no final exams. You don't need to memorize everything up front, resources are out there for your use everywhere. You'll remember the key stuff along the way!
Practice often, and don't give up!
The best way to improve, in anything in life, is to practice often and this could not be more key in coding. There are a lot of small things that just maintaining a strong practice will engrain in your DNA, and you'll get very proficient in no time!
Most importantly, do NOT give up on learning more and pushing yourself. First of all, you're never done learning. There are always new programs out there for you to explore, and they're all forever changing! Also, it will take time to find your first job or client, and that's ok! Just keep pushing though, and you will get there in no time.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Know your learning style
Not all people learn just by reading, not all learn by watching videos, not all learn just by doing.
I did a 3 month apprenticeship where all the learning was done by reading then doing exercises. This was not helpful at all. I learn more by watching videos.
Don't copy. Type out the code even if you are only copying.
Muscle memory is often helpful both as repetition and visualization. You will learn more by doing than copy and pasting.



 Feel free to cheat! (Consider this an open-book, open-web, open-buddy exam)!
 Use Google, use Stack Overflow, use your classmates and go ahead, look at the solution Skillcrush provides.  
 You will learn more studying, understanding, and synthesizing someone else's working 
			code into your own than you will banging your head against a wall. 

 Find your flow 
 Maximize the time you have to work. If you get stuck it's okay to work ahead a little if you can. Sometimes the next lesson will illuminate your problem or question.  
 Flow is a creative state where you feel "in the zone". It is usually both pleasant and rewarding. You should feel proud of yourself for all you are accomplishing! Don't mope.  
 Take breaks for you eyes, brain, and body. Sedentary work kills, so get up and take at least a
			tiny break every fifteen minutes, or whenever you feel stuck.  Getting up and moving around stimulates your mind, body, and soul! 



"Never give up, never surrender!" - Galaxy Quest
When something seems too hard, don't take that as a sign to quit. Though it might be tempting, never ever give up! Take a break and come back to it the next day if you need to; coding can be tricky and fresh eyes are often all you need! Don't worry, sometimes success just looks like repetitious failure.. Trust me, I've given up on many ventures and it is oddly satisfying. But not as satisfying as solving puzzles and knowing that you are building new skills!
When in doubt, Google it.
Sounds easy right? It is! Not only can you find answers to coding questions, but you can learn tips along the way without even realizing it. Reading posts from other confused coders and watching video tutorials is ridiculously helpful. But, it's most helpful when you're in the thick of it and actually NEED to find certain information. It's like learning to swim while you're drowning. But less scary. And not life-threatening.
Find a buddy.
If you're better at learning things in a group or with a partner, find another newbie to chat with! Or convince one of your friends to learn to code with you. Or just tie someone up and give them a laptop. But loosely so they can type.



Don't be tempted to copy and paste!
When I first started I thought it would be smart to save time and copy and past sample code. This took away from my ability to actually write and debug the code. Once I started resisting to copy and paste things got easier. Because I was typing it in by hand I paid more attention to the syntax.



The most important piece of advice I could give to anyone who is starting out where I was at the beginning of this year is to stick with it. As with anything from working out to eating right to learning to play an instrument to learning to code, consistency is key. It's OK if you get home from work and are too exhausted to code one day, but the more days you skip, the harder you have to work to catch up and the more likely you are to give up. Plus, for me, I've found that doing small chunks on a daily basis is more effective than having a marathon coding session one day out of the week. This is why Skillcrush has been so effective for me.



Don't be afraid to fail
Because you will fail. A lot. You can't expect perfection the first
				time out of the gate. Not gonna happen. Just remember that the failure
				is only temporary. It's a learning opportunity. Every time your code fails
				to work, you get to learn how to fix it. Once you know how to fix it,
			 	you probably won't make the same mistake again.
Take a walk
This goes right along with not being afraid to fail.
Things go wrong. You might find yourself literally banging your head
				on your desk out of frustration simply because you can't figure out where
				the problem is. Then you'll start questioning your decision to learn to
				code. You'll feel like an imposter.
Go take a walk.
No. Seriously. Go take a walk.
Sometimes walking away for a few minutes and doing something else is the
				best thing you can do. It allows you to think about other things for a while.
				Inevitably, your mind will go back to the problem waiting for you on your
				computer screen. That's when you can start thinking the problem through rationally.
				Consider your past projects. Think about how you accomplished similar tasks before.
				The answers are there. You just have to allow yourself to find them.
Remember, you are not alone
Developers are a helpful bunch. And you are taking this course with a whole
				bunch of them. Make use of the google group. Scan through the other topics, and find out
				if anyone else has had a similar problem. If so, maybe the answers they received will
				help you. If not, just ask!



Google is your friend!
When you start programming, you will run into problems. It is very likely that people coding before you have also had the same problem, or something similar. Just Google your problem. You'll find hints or new ideas. Always check what version of the language they are using, too!
If you get really stuck, take a walk or sleep on it. 
There will be times that you get really stuck. If you can't phone a friend or find anything on Google, then take a break! Let your mind work on the problem behind the scenes while you take a nap, take a walk, or work on something else completely different. You'll be surprised what a change of scenery or pace can do for you. 



You are going to feel lost
When you start programming you are constantly going to feel lost. This is OK. You will learn as you go, and eventually you will understand.
Bring your patience
Which brings us to our next point, which is that you will have to be patient and accept the difficult learning process. It's not impossible. But it will challenge you - likely well outside of your comfort zone. Just hang in there and keep moving forward.
Keep moving forward
Yes, just as I already stated, the most important thing is that you keep moving forward and hang in there. No one starts out with all the answers. And guess what, they all had to go through their own process to acquire them as well.
We are not born programmers. We work really hard. Code a lot. Read even more. And just keep striving and moving forward in this learning process.



Confusion is your friend!
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



It takes longer than you think, but don't give up!
I first started on my programming journey over a decade ago.  I have always wanted to build web sites and I tried to start when CSS was new.  (Do you remember HTML Goodies?  I do.
I'm now 43 years old and finally getting to a point where I believe that I can do this for a living and pick up the skills I need to do this.  For a variety of reasons I've had fits and starts, PHP, ASPX, ColdFusion.  You name it I looked into it.  Various issues and frustrations would cause me to give up, sometimes for a week, sometimes for a year, but I kept coming back, because deep down I knew it's what I wanted. 
If you believe you can do it - you can - never forget that



Consistency is important!
We all know that. If you're an aspiring pianist, you practice every day, even if it's just for a few minutes. The same goes for learning to code.
I was pretty consistent when I started learning HTML and CSS, but then life got in the way and I wasn't able to practice every day. Now I'm having to go back and re-learn some things, which takes time away from new things I could be learning. 
Go figure it out!
There will be times when you won't get all the information you need to be successful from whatever class or curriculum you are following. You'll need to forage through the internet wilderness for help, ideas, and solutions.
Don't get too caught up looking for the perfect answer though. If you find something you think might work, try it out! Try things even if you're not sure what will happen. All the failures just help you get more comfortable with the code, and when you finally get it, you will definitely be proud of yourself knowing you were the one who made it work.



Confusion is your friend!
Be prepared to be frustrated and confused. Your mind is beign streched and expanded, you are learning. If it's easy then your not pushing yourself.

Practice
Practice everything, typing things out yourself. Do not copy and paste, the action of typing each line out yourself will engrain the syntax and commands in your brain.


People can only tell you what worked for themselves
They can't necessarily tell you what will work for you because they are not you. I'm not saying to ignore other people's advice. I'm saying that I've found the most helpful advice to be that which comes with an understanding of its underlying assumptions and reasoning.
People often have a hard time understanding when you don't take their advice literally. A recent study found that people who feel expert at something tend to be less open to new ideas than people who feel naive. So be prepared for people to challenge you when you decide to take the road less traveled.
Robots might take all of our jobs
Then again, they might not. But if the robots run on Ruby, then you are in good shape.
According to Ted Koppel, a cyberattack on the United States' electrical grid is very probable within the next several years. This is not just some brownouts, we're talking huges areas without power for months. He advises storing several months of food and water.
In this scenario, robots may not be helpful.



Utilize Free Resources
If you are just beginning, there are a number of free online resources to get your feet wet. Code Academy, W3Schools, Kahn Academy Ruby Monk, the list goes on and one. Try a lesson out on any of these resources to see which format works best for you
Project Based Learning
Make something. Give yourself a simple project to complete, such as a single web page. Doing one thing from start to finish will help you to see how the pieces come together. 
Don't Learn It All, Learn Where To Find It All
Don't expect yourself to remember everything. Have faith in knowing that the answer to everything is at your fingertips. Utilize sites like stack overflow to help yourself find the answers you're looking for.



Patience is everything!
I don't consider myself a patient person. I cook on super high heat, blurt things out in conversations etc. If you're anything like me then, programming is an opportunity to learn patience, simply because you're forced to! You can't know what you don't know, you can't control everything, and you're often collaborating.
When the task you've set out to do is already taking three times as long as what you have alotted for, you need to analyze. Assess where your current project fits in with your overall programming goal, where that goal fits in with your life, and if you have time to finish the task at present or if you need to postpone it.
Joy and communication are skills too.
After all that analyzing, if you decide that finishing this current project is the way you need to spend your time, why not do it with joy instead of axiety? Settle in, set a pomodoro timer, and try to relax and emjoy yourself!
If taking your time with a programming project is not an option because of other cherished priorities, it's an opportunity to hone your communication skills. First with yourself. Feel secure about the decision you made by explaining to yourself why you decided to stop for the day. If you need to explain it to others, do so.
Remember today's decisions are just a reflection of your current skill level. A year from now as your skill has grown, you'll have more options and a better sense of time management. But use patience, joy, and communication to pave the road to next year!



Google is your friend!
When you start programming, you easily get confused and caught up in little things. Google to the rescue! Or, most of the time, Stack Overflow to the rescue (it often pops up as the first and most helpful search result). Not only can you find most of your answers via Google, it also can be reassuring that many other people are struggling with the same things. Or that something that looked like a minor issue actually is quite major and you would never have been able to solve it from scratch, without the help of good old Google.



Everything is confusing
Everything is REALLY confusing. And, that's okay. I can read the same piece of text 10 times and still not understand it. I own a shelf full of programming books I don't understand. And, that's okay. I will get there someday. And so will you.
Because everything is so confusing, please do the following: Make a Backup. Backup all your projects. Even if something seems totally useless now, if you put more than 3 hours into it, save it. I had to reinstall WordPress many times, on many different sites, because I didn't make a proper backup of my databases or config files.
Cool Tools

normalize.css
Learn Code The Hard Way
CodePen




Do not be intimidated by what you do not know yet.
Remember this is a journey, and a life changing one at that. We have goals set and we are on the path to execution of these goals. The light at the end of the tunnel brightens everyday as we get one step closer to the end of this tunnel. But remember, this is a learning process and the learning will never be done. The only way to get through these times of uncertainty is to jump right in and CODE! All of the classes and all of the research is great but do not get so caught up in the information pool that you drown. YOU MUST CODE TO LEARN!
Patience, Patience, Patience......wait for it...........have Patience
You must settle down and take a breath. Everything does not come overnight, as much as you would like it to. You are not the only person in the world with a job they hate and a mission to leave. I know you have found this beautiful passion but all good things come with time. You must remember to know the path you are on and understand it is not a race to the finish but rather a long, glorious journey down a never-ending path. There will be times of storms and winds that try to blow you off track. And in these moments you will feel the need to run faster; DON"T! It is in these moments you will learn the most and this will teach you to truly treasure the moments of sunny days strolling along the beach with the salty, sea breeze against your face. Remember to take you time and learn all you can from every instance that you face.
Finally, Do not be afraid to go against the grain.
Remember that this technology is an art form. There are basic standards to follow but there is also the beauty that comes from within yourself you must let out. Do not be afraid to challenge the establishment and do things your own way. Build what you love and love what you build, if only for yourself. What we are doing is changing the world around us and we are of the handful of people making that happen. Being apart of a growing industry that is having major impacts in the world gives you the leverage to make change. Do not be afraid to make change and do not be afraid to fail. Take the chances with yourself, your art, and your passions. This is unique platform that offers everything to you that you need to make change. So go out, jump in the calm stream, and make a splash in the water of the world. You need nothing more than your ideas and your new-found skill to do it your way and your way alone!



Take things piece by piece
The idea of making an entire webpage/app can be pretty intimidating. Instead of trying to attack the whole
				thing at once, it's a great idea to break it up into smaller pieces. This way you're only having to 
				attack one bit by one bit. With each piece you conquer, you get closer to finishing the big picture, and 
				after a while, the whole thing is done.



No, you will never know everything but it will all make sense eventually!
When you start learning to program, the amount you don't know can feel overwhelming. The truth is, there are basics that you'll get the hang of with time, but developers are constantly learning. The real trick is learning how to solve problems that you have never solved before, and learning how to learn as you go. 
Don't give up when it gets hard. Take a break, get a snack, watch some tv, work on something else, reboot your brain, and come back and try again. There is nothing wrong with putting something down. What matters is whether you pick it back up again.



Try your best to stay on schedule!
When you start, you may fly through the challenges. This will lead you to think "If I miss a day, no big deal! I will just do double work tomorrow" This sounds all nice and dandy but trust me, the lessons get more difficult! Keep up as to not overwhelm yourself. Also, the more difficult lessons are the more fun so don't fret too much!  


Write along with the videos 
While watching the videos I have found it extremely helpful to have a text editor or my terminal open. I position my screen to be 75% video and 25% workspace then I write EVERYTHING as Adda or Emily writes it on the screen and it really helps it stick. See the example below. 




Its Hard!
Learning to code is hard, not in the sense that you cant figure it out, but it changes the way you think or atleast it should. Life starts to look like one big coding game. Always practice to strenghten your knowledge.
Imposter Syndrome is Real
A part of me thinks that even the most senior developers feel like imposters. Its definitely real when your starting out and then wanting someone to pay you for it.



Anything is Possible
When I started this journey last year I doubted myself a lot. I think in a way it held me back. Once I decided that its all possible, my attitude and perspective changed. My best advice is to just keep going even when you feel a bit defeated.
Dont worry! This is all apart of the process. Doubt and fear are normal and feeling like you dont know enough is to be expected.
So when you feel like you suck and arent sure you can code. I advise you to push through and take a partner or Google to help you find resources.
Because next year when you are coding like a beast and snapping those if statements into place you are going to be one badass coder!



Google is your friend!
Whenever you are stuck or need an idea gogle is your friend.  Don't be afraid to search for the solution to your problem or search for ideas.
Google is there to assist you whenver needed.  It is full of resources and ideas just waiting for you to look at.
Give it your all!
It is important to always give yourself 100% to a project or to learning a new skill.  That is when you learn the most because you are fully vested.
You'll never remember what you learned or get anything accomplisedh you only give half or youserlf.
When you fully give yourself to a task that is when you have the most ideas and motivation to get the task done.



Have something to hold you accountable
I've been trying to learn to code for over a year on my own, but I haven't lasted longer than a week or two consistently until I signed up for Skillcrush.  I hated paying for info I knew I could find for free, but if that's what it took to stay committed than I don't regret it.
Social Media is a huge motivator 
Sign up for e-mail newsletters. Follow DHH and Skillcrush and Flatiron School, etc on Twitter for interesting and useful updates.  And fun updates.
An old school one: Visualization
Have an image in your head of what you want to be/do.  Daydream up project outlines and company pitches.  Imagine your kids waking up every morning to find you already digging deep into some code so they'll think you're as cool as Mr. Robot (check that out on USA if you haven't. So cool)
Dude, just dream big and work hard. 
 Pro-tip: Don't do a factory reboot of your laptop mid-class. Merge nightmare  



Confusion is your friend!
It often feels like you're banging your head against a wall when you're learning to program. It's not fun. (It makes me want to eat a lot of snacks, personally. I go for walks, too, but snacks.)
But it does mean that you're learning. You are figuring things out. A little (or a lot) of persistence will really pay off.



You are not an idiot!
Despite the fact that you will feel completely flummoxed and overwhelmed on a regular basis while you're first learning to code, please do not despair. You are not dim because you don't immediately understand something the first time (or even the 100th time). The important thing is to keep your head up and continue slogging ahead. Ignore anyone who says otherwise.
Absorb as many different opinions as possible.
Everyone (and I do mean EVERYONE) who codes has (occasionally bizarrely) strong opinions on which languages are the best, how to do certain things, and what best practices should be in every aspect of programming. Always listen politely to potential teachers -- every new bit of information helps -- but pay the closest attention to the majorities and authorities.
Practice, practice, practice.
Just like learning a new human language, learning to code is a continual process that requires constant use and attention. If you don't keep coding, you'll lose vocabulary, syntax, and "flow." The more you manage to think in code -- from imagining cool ways to build things to help in your real life to just copying code you see until you figure out what it does -- the faster you'll be "fluent." 



There is no shame in googling!
You are going to be confused. You are going to be so confused you don't even know which questions to ask! The good news is that lots of other people have been there before. StackOverflow and Google have been so helpful for me!
Read your error messages!
I've been so used to not understanding much surrounding computers. It was actually a surprise when I read error messages in the command prompt and understood, if not why I had a problem, at least what the general issue was. I had to get used to thinking of error messages of helpful hints, rather than automatically assuming it was incomprehensible gibberish.



Don't psych yourself out!
Something called "imposter syndrome" is very real, and will happen to you. Don't let it get the best of you. You can totally do this, it doesn't take a special super human kind of person to master this. You are already well on your way.
Use that moment, that moment of doubt, to fuel yourself. Fight against it, prove to yourself that you can totally do this.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Embrace Your Own Style of Learning
Don't be afraid to stray from the path a little as you learn. You will pick up some concepts more quickly that others, and struggle in areas that they don't. Accept that. Don't be afraid to jump ahead or review old lessons.
Change the subject if you're stuck. Work on something else for a while. The only reason I'm writing this today is because I got frustrated with a lesson and decided to skip ahead to the next class for a bit. So far I've done almost a week's worth of lessons in 24 hours. I'm pretty sure that was the right choice.
But don't discount the way you are being taught just because it is not your way of learning. Sometimes you have to struggle through. The trick is figuring out what blend of their teaching style and your learning style will be the most effective. Experiment.
There Will Always Be Someone Better Than You at Something
It's easy to get discouraged when you see amazing work done by others and think, "I could never do that!" That is the wrong mindset. You can't do that now, but nothing is stopping you from learning how to do it later.
Coding is collaborative and ever changing. Everyone has their own strengths and weaknesses. And every project has its own balance of needs. So get competent at what you need and excellent at what you love.
Yes, there will pretty much always be someone better than you in every specific subset of coding expertise. But no one will have the unique mix of tech skills, soft skills, passion, and personality that you will bring to your clients or your company. So learn from others and be the best you that you can be!



If you can work out what your question is, you are already winning.



Don't be afraid!
What if I break something? What if I can't do something? What if I look stupid?? Coding is so scary!
      j/k it isn't scary. What's scary is never trying!
Overcome the blank page
So what if you don't know where to begin? No one ever does. Just put something down and go for it! Maybe it won't be genius, but the more you hack away at it, the better it'll get -- and you, too.

      Practice, Practice, Practice
How do you think Batman became the broody, justice-loving vigilante we all know and love?
    


Don't Be Afraid To Jump Around
Everyone learns at different rates and prefers different types of learning styles. If you are using a tutorial or course and you don't seem to be grapsing it. Look for another tutorial that will either help you figure it out or just move on to another. You can always go back and complete the first tutorial later.
I know it sounds like a recipe for disaster but this has worked well for me. There are lots of resources out there free and paid. Start with free ones and free trials to get a feel for what the tutorial is like. If you like it go for it. if you don't find another one..

			It's a journey. Keep it moving and make sure to have fun!
My List of Resources

Codecademy
Code School
Lynda
The Viking Code School
The Odin Project
Refactor U
Rails Girls
Thinkful
Saylor




Ask questions
 Ask a million questions! You will read about being confused later on, but ask all of the questions. All questions are stupid, so ask them any way! Think like a child. They ask a billion questions a day. They want to know everything even if there parent's don't know the answers. The moment you stop asking qustions, that is the moment you fail.
Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
This is where asking questions will come in handy!
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



It's going to be hard
Seriously, there will be times were you're going to want to hit your head against the wall. Just know that not only have we all been there, we occasionally are there as well.  
Seek out help
Attend meetups, get involved with people on reddit, seek out any mentors you can. Practice and ask questions like your life depended on it. The only stupid questions are the ones you don't ask.
Some thins you'll love, others you won't
Look, you're not going to like everyone 100% of the time. Take me for example. I'm not really interested in CSS/styling pages. I don't have the artistic eye for it. Instead I just make it fun. Take this page for example, yes, it looks like it was made in the "early 90s!" That made me smile so I created it.
Just Keep being yourself. Stay focused. It will all work itself out.



Don't pet the sweaty things'
Because, ewww.
You are not a beautiful, original snowflake
Nobody cares, love yourself.
Hmmm, I really should think of some better advice...



Don't be afraid to ask questions!
I have always been a question asker & when I'm learning something so completely new, like coding, the questions just keep coming.  You can't be afraid to raise your hand, post a message, or email your teacher.  Question asking is not a sign of ignorance, it's quite the opposite.  It shows you are not only engaged in the learning process, but you want to understand what you're doing, not just get the "right" answer.
I have also found, that often times when I'm confused about something, I'm not the only one...I just might be the only one willing to "look stupid."  But remember, none of us are experts, that's why we're taking a class...so ask away!
Don't let the frustration take you down!
When you are learning a new skill, you are often taking on something that is unfamilar and confusing at first.  The longer you work at it, the more you'll understand.  But there will be bumps along the way as you go through the learning process.  If you're like me, you don't like not being good at something or not understanding.  This can lead to great frustration when tackling new material.
It's normal to feel frustrated & confused, but you have to be able to work through those feelings.  Sometimes this requires stepping away from a lesson for a few hours (or days!) just to clear your mind & giver yourself a break.  As you learn to code, you'll quickly become aware that often times the smallest errors (typos, missing semi-colons, etc...) are your biggest enemies.
While no one likes to feel frustrated, it's a normal part of the learning process.  Even experts on a subject matter, at one time were new to that subject.  The difference is, they fought through the frustration & mastered their skill.



Find a coding group!
My advice would be to find a supportive community to get you past the feeling that you don't understand and therefore coding isn't for you. This is just a passing feeling, and it's not real! Coding is for you! One of the best things about it is that coders like to help each other.
If you have a coding group that meets regularly, this is the best. If you run into problems you can bring the issue to them and they can take a look.
In addition to solving the problems in your code, the best part of this is that you will sweep a way any doubts you had in your mind about your abilities, because you'll see that it's all about working together.



Persevere
Programming is amazing but it takes a lot of learning before it all comes together. Find some good tutorials and work through them. When you find you can't do something, google it and read what a few different people suggest. Remember the skillcrush motto of  good, better, best . You can achieve the same results in many different ways in coding. Just get it done first, then think about how to do it better next time. Eventually you will know enough to design your code well from the outset. but don't stress about that for now.    

			Work on real problems
At first you have to start on the toy problems, but as soon as you can, get to work on real problems. Make a website for a real customer, even if they aren't paying you. Write a program to automate a real annoying repetitive process. Have users who can test your solution and give input to guide your improvements. Don't keep it all in your own head.

    

Do your homework
Make sure to keep up with your assignments, because if you get behind on your homework all the lessons start to feel really overwhelming.
Make time for it
Schedule 1-2 hours for homework every weekday, and stick to it!
Give yourself a break
But also remember to take frequent breaks so you don't experience information overload.



Practice is your Friend!
When you first make the decision to learn to code, make up your mind that you WILL be able to do it!  I've always beliveved that we can do anything that we put our minds to.
From the very first day, commit yourself to daily practice.  Look at the classes and the challenge of learning as a practice. The same as an Olympic athlete, or a professional athlete, or a world famous musician. 
When injury interfers with Practice.
Sometimes your frustration will feel like an injury. Sometimes you will not be able to take the next step because the one you are currently on is still too painful. 
So, do what any athlete would do, take a few days off from your practice to heal. Clear your mind. Let your frustration marinate until it becomes edible. Until it transforms into determination.
After you heal, start over. Study every letter; study every symbol. Do not let a bunch of letters, and numbers and symbols steal your dream. 



Hi my name is Kim and I have some advice for you!
If at first you don't succeed, try try again. (And then try some more...)
My advice is to realize that when you start to code it will be both frustrating and gratifying.  One minute you will be pulling your hair out trying to understand a concept, and the next you will be doing a happy dance that your code worked (it actually worked!!!).
Embrace this see-saw of emotion.  Know that everytime you don't understand something, you eventually will.  It's like a jigsaw puzzle.  There are a ton of pieces haphazardly spread about.  The picture is unclear but if you take your time, one piece at a time, you can put it all together.   
Ask for help (often)
Utilize all the help that is available.  I hate to ask for help, but I have quickly gotten over that character flaw since I've begun coding.  So send the instructor an email or get to an online forum.  And remember: Google is your friend!
I have an index card with a mantra that sits on my desk.  It reads "If coding is difficult, code more".  It will get easier and you will get more awesome.



Keep Learning
When you start, it may all seem pretty easy. If you've learned some of this before, or are picking it up quickly, don't get complacent.
			There is a lot to learn. So remember, it won't all go smoothly. 
Investigate any Suggested Resources ... and ... Find Your Own
Additional resources can be interesting and helpful. Some have even helped get me out of self-created jams.
Approach Coding as an Adventure!
Look forward to each new piece you learn.
				Let learning to code take on a whole new meaning.
				Have fun!



When you get confused just work ahead!
All of this can seem like a foreign language. Just work ahead and something will eventually click. It's like traveling and finally you unbderstand when you have the proper context'
Be kind to yourself
Everyone has different strengths and weaknesses. Don't worry you will get something immediately that others will not and vice versa. That's why we are here to help each other!
Take frequent breaks
Don't worry you will not fall behind. It's amazing how productive you can be the next day when you give yourself time to rest. Things just all of a sudden make sense.



No one was born an expert.
It's easy to feel embarrassed when you're first starting out. Every question seems dumb, whether you're asking in an online forum or to a friend who is more seasoned. Wanting to be knowledgable, wanting to be the best is natural, but it takes hard work, practice, and a little bit of fumbling around.
Everyone started out like you once, asking questions, feeling confused. They didn't just master 8,000 programming languages overnight. Everyone starts out as a beginner, and that's not a bad thing.
Read the directions thoroughly.
I can't tell you how many Skillcrush challenges I thought weren't working right because I missed one little step (or misspelled a tiny word in a line of code)



Confusion is your friend!
You are learning a new skill.  Good for you!  .  Learning in smaller sessions is less overwhelming.  Take a break whenever you feel frustration taking over your brain.  The lesson will still be there while you go outside and get some fresh air.
If you get stuck on a particular concept, researching it online is a great option.  Another option is to ask for help, whether that be a fellow classmate or at a .  Someone else may have the same question.
Practice makes perfect!  Make the time to practice your coding skills everyday.  And soon that habit will kick off a !



Practice Make Perfect
Its an age old saying, but it is holds very true when learnign to code. The more you do something, the faster it becomes second nature and gets committed to muscle memory.
When I am learnign somethign new, oftern times I will go through the excersise once, make sure It is completed correctly, then delete everythgin and start again. I sometimes do it three or four times. Then when I really need to do whatever the excersise was about, I am very familiar with the steps needed to make it happen.
Wrap Your Head Around as Much as Possible
One of the things that is most important for me when learning something new is to not only understand how to do it, but also why you are doing it, how it works, etc. This helps me, especially when learnign a programing langiuage, to "think" in that language, which in turn helps me be able to use it as it was intended.
Don't Give Up!
Learnign a programing language is not easy. But if you keep at it, and strive for that "Ahh Ha" moment, it iwll come. Just stay focused, practice and keep your head up!



Build projects. Don't collect badges.
Look for courses – like Skillcrush – where you will be building real-world projects as you learn new skills. Some sites are great because they're free and can introduce you to new skills. Use these to help you evaluate whether or not you want to pursue that coding language. But, don't spend too much time collecting badges. 
Concepts and theory are important, but application proves understanding.
Look for courses where you will be building a project as your end-result so that you'll have professional pieces for your portfolio. Yes – even before you get clients. I didn't do this enough when I first got started. Now, whenever I take a course to learn a new skill or build upon an existing skillset, my goal is to end up with a project that can be added to my portfolio.
Teach others.
It's true what they say. Teaching a skill to others will help you to solidify your understanding and knowledge of a new skill. 
There will always be someone one step behind you, so teach it to that person. You can create YouTube videos or get involved in groups. Help out by answering questions whenever you can.



Don't Give Up!
This is so cliche, but you can't be quick to give up on your coding journey! There are going to be days when you pull your hair out trying to figure out some code. You'll want to run away screaming and believe that you can't do it. But you can! Walk away for a while if you must, but don't run away forever.
Walking away from your computer once in a while is actually quite helpful and healthy. Don't throw your MacBook across the room when you can't understand how to position that div. Just take a deep breath, walk away for a while and do some other activities, then come back with a fresh mind. You'll find new clarity and energy to fix and understand your problems!
Don't Get Stuck!
There are SO many things to learn when it comes to the world of programming. With so many languages, frameworks, and ideas to understand, you may feel overwhelmed (but also excited) about all the things you feel you need to learn.
Don't let this plethora of information paralyze you. Sometimes you will feel that there's so much to learn that you'll never learn it all. Well, you're right. And that's okay!!!
Repeat after me: NO ONE KNOWS EVERYTHING. Even the most seasoned developers will tell you that they are still constantly learning every single day. It's okay to want to know various languages and processes, and I encourage you to study anything and everything! But DON'T let the information overload paralyze you. STUDY and CREATE! Python or Ruby, SASS or LESS, whatever it is, just learn it and DO IT!



Do a little bit each day
 Don't fall behind!
			 Don't get discouraged.
			 Good luck!
		



Errors
The element of surprise is right when programming or just installing Ruby onto your computer.When you are in a jam with error codes, google is the best place to go for answers. I usually try to navigate to stackoverflow in the search results.




Take "Learning How to Learn" by Coursera
This class was recommended to me by a someone in the LA Coders Facebook group. It teaches valuable learning skills based on how the brain works in a very entertaining and light-hearted manner.
 Excercise 
Excercise is one of the most effective means of improving your physical, mental and emotional health. You need to do it every day just like eating and sleeping. Exercise relieves stress, improves mood, boosts memory among myriad other benefits. As you'll see from "Learning How to Learn," excercise lets your brain operate in the diffuse mode, which is essential to learning.
Meditate
Meditate for least 10 minutes every morning when you wake up. Meditation is also productive during the day. I recommend not meditating before bedtime because meditation puts your brain in a relaxed state and may make it hard for you to fall asleep because your brain thinks it already had sleep. Meditation increases Alpha brainwaves, essential for learning and memory.
Read
Read for at least one hour before bed but only in paper -- not digital versions. The light from digital devices will hinder good sleep because it makes your brain think its daytime. Reading before bed improves creativity, concentration, sleep and empathy and lowers stress.
Sleep Naked
Good sleep is paramount to mental health. "Lowering your skin temperature increases the depth of your sleep and reduces the number of times you wake up in the night. Stripping down to your birthday suit is a great way to lower your skin temperature without changing the temperature of the room."
It's OK to hate Git!
Git is about as fun as watching dogs eat their own shit -- especially the white kind from the 1970s. After Git mentally tortures you, you'll find an abundance of user-friendly alternatives to the command line such as GitKraken and Sourcetree.



Don't Be Afraid
Learning a new skill can be pretty scary. Most of us were terrified the first time we learned to code and that's okay. It will take time, but with lots of practice you'll be fine.
Get Support
Seek out communities of support such as other programmers, community groups, forums, and meet-ups. Attend developer conferences to stay informed of the latest trends. There's a ton of support out there.
Teach Others
You may be thinking,"How can I teach someone how to program and I am not an expert?" Teaching someone else the skills you've learned helps build your confidence and maintains your skills. You don't need to be a chef to cook for your family, do you? The same thing goes for programming.
Write Everything Down
Most of us Google just about everything which is great, except when it comes to solving issues that are super specific. Some solutions are a mashup of several sources. Two steps from this site, a few more from another site. 
Create your own documentation (in your own words) that outlines the exact steps you took to resolve an issue or something like how to align images on page using CSS.  Whatever you discover, write it down. I personally use Evernote, which serves as my personal knowledge base.
			





The internet is your friend!
If you have no idea what all those funny names mean, do not panic. The internet is here to help! You will find out that everything that you ever wanted to know (and more!) is available in the web.
 There are tons of free resources and nice people to help you. Just make sure you know how to search correctly based on the questions you have.
Most developers will tell you that they are constantly searching Google for issues that they run into. Ignorance is the norm, so do not feel stupid. Just go ahead and search, search, search.


Sometimes you just need a rest.
If you are stuck and it seems like you are not making progress at all at learning or solving something, just take a rest. We often get overwhelmed with all the new information we are acquiring, and we might feel lost and incapable. 
If you ever feel this way, do not think of yourself as a failure. Just take a rest. You will find that coming back to your process a couple of hours later, or even days later, will make you feel better and you are probably going to tackle that problem right away. 


Anything is possible.
Do you have wild ideas? Crazy solutions for everyday problems? Do not keep your thoughts to yourself. Try to build something out of them! That is what programming is for. 
Start an open-source project. If you ask nice, you will find lots of people willing to help you.
					I promise you are going to make great things now that you know how to code.
Think big! Good luck in your journey.





There are many ways to do the same thing!
This lovely discovery came to me while doing an assignment and realizing I didn't understand how the F I was supposed to do what I was supposed to do, the way I was being told to do it! Luckily, I eventually saw the light, but in the meantime, I noticed (thanks to lots and lots of Google searches) that, much like what all my math teachers always told me, it doesn't matter HOW you get the answer; rather, just that you arrive at the answer correctly! ... Some methods are easier than others, and being that I am lazy (I like to call it 'efficient,' though), I prefer those.
Let's get physical!
As it turns out, staring at a computer screen and typing for hours on end is actually quite bad for your eyes and wrists. And neck. And back. And shoulders. And posture. And... Okay, you get the point. But seriously, sometimes I have been sitting in the same position for hours and then at some point I will actually blink, and consequently notice that my vision is all blurry. I also have to wear a wrist brace at times while typing (hopefully that is not an early indication of arthritis, but my gut tells me it is).
Being that I think good health is very important (and that I value my eyesight), I would recommend getting up to take breaks often, and stretching as well, while working on code for long periods of time. Not only will your body thank you for it later, but it may help clear your head if you are stuck on something as well, and when you get back to it, maybe you will see exactly what you were missing all along. And that brings me to my final word of advice...
Quit.
... Just kidding! Quit, but only temporarily, and only if you are really super stuck on something and it's driving you insane and you are getting angry. I have called it quits at times, only to come back the next day with a fresh start and finding my issue immediately!



 Technology is Not What You Think	
 People who are crazy enough to think they can change the world are the the ones who do it. ~Steve Jobs
 Solving BIG problems is easier than solving LITTLE problems. ~Sergery Brin
Technology Can Drive you Crazy at Times.
 My Wifi went down for 5 minutes so I had to talk to my family. They seem like nice people. ~unknown
 There is a reason they call it hardware, it's hard ~Tony Fadell


Some things to remember:

Learning new things is hard for everyone!
Get help from the internet! Google is your friend. 
Also, forums are great. Join the free code camp slack group, stack overflow, or even head over to reddit.

Work on projects that you want to finish. Motivation is key!




Be Kind to yourself
It is going to take a while to master all the skills you need to become one of those coders you see in movie typing gibberish without having to keep checking how to write the code with your eyes closed.
Until you get to that stage. Google is your friend and will remind you how the code is written, with lots and lots of experience using the code it will come automatically to you. For now, just. be. kind. to yourself.
Step away from the computer
I know you're crazy excited with all these super things you are doing and learning. But remember to take a shower, go for a walk, pet an animal, talk to a human being or two, live a bit of your life and come back to do some more coding.
You will be a more balanced coder this way. Oh yes I forgot, do some yoga or some sort of excercise too!



Confusion is your friend!
Mindset is the key to everything If you decide to work through difficulty you can do anything.
Build a new skill one chunk at a time. No one discovered new territory all in one sitting.
Suspended disbelief plays an important role.
Coding is a process. So is learning. Treat it as such.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



We were all newbies
Learning something new makes you a newbie, a beginner but remember every expert had to learn this at one point. We were all noobs at one point in our careers
So just always remember that no question is silly and you are probably asking something that someone else wants to ask
Always keep learning
Never stop learning. You need to always be reading, following the leaders in the industry and challenging yourself



Keep going!
My advice is to keep going through the hard parts, the confusing parts, the frustrating parts, the very very lost parts.
It may like a good idea to stick with one problem until it's solved, but then nothing else will get done. 
If you can move forward and leave a problem to return to, then do that, and keep going! 
Sometimes a solution will become more apparent as you move through other challenges.



When in doubt, Google it!
The web developer community is generous.  Developers like to share their knowledge & help each other solve problems.  If you can't figure something out, Google it!  You're bound to find someone else who had a similar issue & another someone else who was generous enough to help them resolve it.
Be that helpful person.
It's easy to feel self-doubting when you're learning something new.  One of the best ways to reinforce what you know is by teaching someone else.  Get on forums and help fellow coders when you can.  Even though you can't answer everything it will be a good reminder that you do know  some things.



It's okay to ask for help!
When I first started learning how to code, I was self-taught.  I freelanced for a year doing web design and started teaching myself 
            how to do front end coding in HTML and CSS.  It was hard, and it took me forever to complete one website, let alone two at once.
            I realized that it's okay to ask for help, as everyone else out there has been in that same boat!
            I used various forums and wasn't afraid to email or Tweet someone with a question.
            The key thing to remember is to be specific with your questions, as people are very busy.  It helps to include a snippet of your code 
            with what you're trying to accomplish.



Don't Be Afraid!
You have already taken the first step toward learning. There is nowhere to go but up!.
Everyone Gets Stuck.
You are not the only one who is totally confused and stuck on a specific piece of code. Feel free to reach out and ask questions. Use Google and check out Stack Overflow.
Like Skillcrush says: this is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.



Pregnancy Brain is a Bitch
It's really not the right time to start any lesson when you're pregnant. Especially during your last semester. You forget everything you just learned and wrote down the day before. You get sick most days and end up using up your weekends and precious evenings after our todller has gone to bed to make up for the classes you've missed. And then you're so tired and exahusted, you just go through the motions of finishing up everything and end up forgetting more.
My only advice, if you want to still sign up in your present occupied condition, is to write profuse notes on everything and anything to help with the "ring a bell" thing in your mind as you go on. And also, don't expect much. You're alreay doing enough as it is. Learning code plus growing a baby definitely earns you a guaranteed spot in heaven despite your nasty foul mood all the time.



Believe in yourself!
Programming is hard. Even if all you have is a few skills. Try to make something. making a website is somthing you can do that you can look to as something YOU made. 
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Make something!
Make something that you can call yours!Improving your project will help reveal what skills you will need to make it EVEN BETTER. A resume page is a goo place to start  
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Hang In There
It only gets better!
I see coding and design as a way out of a not so happy life.
It's Hard Sometimes
With hard work and determination nothing in life is impossible.
When you finish the course, don't be afraid to take risks(moving to another state,city, or country for work).
Volunteering at a tech company counts as experience.
Self doubt is man's/woman's greatest weakness, believe in yourself, even if no one else does.



Be Kind to Yourself!
You're a beginner and there is nothing wrong with that! Even Steve Jobs was a beginner once and look what he did. So, be kind to your self. If you don't get a concept just keep exploring it until you do!
Google. Google, Google!
I can't stress this enough. When in doubt, google it! Don't go out and buy and expensive book that is just going to collect dust on your desk. Crack those knuckles and get your google on.
Never Stop Learning!
In the world of code, there will always be something new to learn. So don't limit yourself. Keep seeking new and inovative ways to solve problems. 
Enjoy the Journey!
You'll never be a beginner again so enjoy the adventure!/p>
			- Mal



Take your time and practice
Learning how to code is hard but you can do it. Take your time and read your lessons, watch the videos, and print the transcripts. Reread/rewatch everything as many times as you need to. 
Try to practice everyday but, don't go overboard. Make sure you take breaks to clear your mind. It helps to get up and walk away for a while and then come back with a fresh outlook on what you are doing. Even if you have to leave it overnight, walk away. Maybe something will come to you while you sleep. Or in my case while I'm trying to get to sleep, keep pen and paper next to your bed or use your memo app on your phone to write it down. Otherwise you will forget!
Ask for help
Ask your classmates for help when you get stuck. Go to StackExchange and ask for help. Use Google. Look at what other people have done. The more you read code the more you start to understand.
Use those errors too! Even if you have to copy the code solution you will make errors. Those errors can help you understand what the code is doing. 



Confusion is your friend! 
 This is often said throughout the lesson, but I want to enforce it here. I always have trouble admitting I don't know things or that I'm out of my depth, but it's really the only way you'll learn and improve.
 Admitting things are confusing and fixing it is much better than never learning new things! 
Take things one step at a time. 
 When working on big projects or tasks, it's best to break everything up into small tasks. Otherwise, such large tasks (and especially with things you're not necessarily familiar with) can become overwhelming.
Being behind is okay!
 Life is busy and hectic and sometimes you don't make all the goals you plan. Don't beat yourself up about this! Just keep going. You're doing your best and that's the most important thing.
Never give up!
Especially when you most want to!


Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Self Doubt
Learning to code is not an easy journey. You will be tested, your will will be tested, and you will for the most part convince yourself that you aren't smart enough to be a programmer, persevere anyhow- those moments are what will make or break you as a programmer!
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



 You might leave for a while  
 I enrolled in Skillcrush in the fall of 2014. I got stuck and procrastinated. In 2015, I moved to Vietnam to teach, and while I kept telling myself to keep working on this, it was way more exciting to ride my motorbike in the chaos.
So, a year went by. I travelled. I had fun. And then I tought, I should really learn to code.
You can always come back 
 So, instead of 28, I'm 30. Sometimes I get discouraged when I see people who started Skillcrush after me already have tech jobs. But I don't want to be 32 and think about how I should have learned to code when I was 30. 
 So, my advice to you is, don't stress out if you lose track. You can always come back. And don't worry too much about perfection. Just ride your motorcycle in the chaos. 
 That's my two cents. For the rest, of course, check out other people's advice. They've said it all. 



Find a Supportive Community

					When I first started coding, I could not find a supportive place where I could seek advice and find encouragement.  That experience deterred me from wanting to code, so I stopped. Within the past couple years, I have seen a rise in groups where women can come together for the advice, encouragement, and support that I was seeking years ago.  These groups are one of the reasons why I continue my coding journey.  Seeing people in the place where I would like to be gives me hope that I can soon be there.
				
Don't Give Up

					This is important.  Sometimes, you will be frustrated when your code breaks, and you can't find that missing closing tag or semicolon. I've almost given up, or took a break from coding, and I regret it.  I always come back to it.
				
Google is Your Friend

					Google is pretty much all-knowing, so when you get stuck, please use it. 99.9% of the questions you need to ask have probably already been asked and answered.
				



Confusion is your friend!
No matter how frustrated you get, stick with it; it will be worth it, if it is something that you truly enjoy and want to do

Resources are never ending
Google is the best, by far, for any question you may have. You aren't alone and you aren't the first to ask, so go out there and find it!



Never pick a windy day to start running for the first time.
Running can be hard enough without running into the wind
Always eat dessert if you really want it.
You only live once and what's the point of denying yourself a treat.
Never wear black with brown.
This rule has gotten looser, but I still hate the look.
Play hooky every once in a while.
Work will still be there when you get back.



Domain Purchase and Web Hosting
I wish I knew that I could set up a website on GitHub for free instead of paying for a domain name and web hosting :'D
This became clear two months into the Skillcrush course - about 15 days too late to get my money back from Host Gator.
I am a sad panda.



Prioritize
I bet you’ve wanted to learn programming forever but you’ve always put it off. 
				You keep thinking, “Tomorrow or this weekend I’ll definitely start learning,” but life keeps happening to you.
If you’re really serious about learning to program, treat it like a job. Even if it’s just 10 minutes a day, 
				carve out a set amount of time daily to sit down and learn one new thing about programming.
Allow Yourself to Fail (That’s How You Get Good!)
Do you think all those web apps came out perfectly the first time? No way! 
				The developers probably went through hundreds of versions before they got to the version you see today 
				and they're still looking for ways to improve.
There is no “final” perfect version. Failure is part of the learning process. Don’t beat yourself up over it and don’t let it discourage you. 
				Learn from your mistakes and create something even better.
Help Others
 I bet you already know to ask a lot of good questions, but once you have all of those awesome coding skills, 
				give back and help others get started on their coding journey.
All of us who have signed up for Skillcrush want more freedom and control over how we work. Skillcrush is just the tip of the iceberg.
 If we really want to change the way people think about careers, we need to help other like-minded people get hired 
				in the industries we want to work in. We can reject the idea that you have to be X, Y, Z in order to get hired. 
				Instead, we can look at other people and say, “I see the potential in you to be someone great.” and help them figure out 
				what they need to do to become those people. 



Mom gave me the best piece of advice
when I was pretty young. She said:

Keep
				on 
				keeping
				on.
			
And it applies here as well.
You get stuck on an issue? Keep pushing through it.
Absolutely stumped?
Fine, take a break, let it marinate in your subconcious. And then
Keep On.



Breathe, Learn ruby, and Love Google
Luckily for all of us ruby has a community that is as loyal as Apple customers and as a productive as Starbucks customers. The amount of information on the web about ruby is multiplying daily! So when you reach the inevitable impasse just google it and search 4 or 5 different ways to make it sure you've exhausted your research.
Don't be afraid to push yourself either, test out crazy things. Get Funky! Bust a move and code up a storm. Make rrors and fix them. Like that dude Journey once said 'Don't stop believing.'
Above All
Keep your head down and keep moving...a rolling stone gathers no moss.



Try not to get too competitive
I always hate it when I feel like I'm behind, and everyone already knows twenty different programming and development languages, while I'm still struggling to get understand two or three. There will always people that know more, and always peole that know less. Be a student and a teacher. 
Try not to get overwhelmed
There are so many frameworks, languages, trends, etc., always coming and going. You can't know them all. Try to pick a stack of a few and focus on those rather than trying to learn them all at once.



Practice, practice, practice
Practice writing code at every chance you get.
			Embrace the struggles to figure out solutions to the problems you encounter.
Don't be afraid to use the resources available to you.
			The harder a time you have coming up with a solution, the better you'll understand why it works.

Commit often and clearly
Many small commits are better than few, large commits.This will save you time in the long-run if something doesn't work or needs to be changed.
Additionally, accomplishing one task per commit helps avoid losing track of what you did or why you did it.



Don't feel like you have to know everything at once!
When I learn something new, I often struggle during the early stages because I do not feel like I know enough, which is silly because I am learning! When I learn new things, there is a phase where I start to really understand how much I don't know. This can be very overwhelming at first. Pushing through this is difficult but important.
Don't get overwhelmed!
Easier said than done, but I fight this feeling in a few ways:

Take small steps. I focus on what I am working on right now.
Track and celebrate progress. I try to track the progress I have made by marking milestones, and I also take time to appreciate how far I have come!
Admire others' work, but don't compare. They have probably been doing it longer than I have, and if not, so what? Everyone comes with different experiences and skillsets that he/she can offer.





Embrace learning like a child with excitement and joy
Explore and discover without fear
Understand the basic concepts well
Embrace the difficult problems
Celebrate the wins
Stay focused and don't give up
Read and understand all error messages
Find great resources - some of my favorites:

Learning Web Design by Jennifer Niederst Robbins
HTML & CSS by Jon Duckett
JavaScript & JQuery by Jon Duckett
The Well Grounded Rubyist by David A. Black
A List Apart
Google

Practice and continue to learn something new every day
Maintain a sense of humor, have fun, and enjoy the journey!




Don't try to learn everything!
When you first start programming you will not know where to start.  There are so many languages to choose from and so many resources for each of them.  And to top it all off new technologies are coming out everyday and everybody seems to have an opinion about where you should start.  It can be completely overwhelming.
You will have the urge to try and learn all of the things, but stop!  Take a breath and pick just one language, it really doesn't matter which one.  Just pick one and dive in!  Otherwise you will find yourself constantly on the verge of starting to learn.  But once you just start you will build momentum quickly.  Just go for it!
Embrace ambiguation.
To go along with not learning everything, know that you will not understand everything you encounter.  Don't let that stop you!
There are many ways to power through a road block. Find which way works for you and keep it in your back pocket, you will use it often.  Sometimes it is best just to move on and come back to the thing that you are stuck on later, often you will find that that thing that had stopped you in your tracks before makes perfect sense now.
Oh, and don't worry that you won't run into the same problem again and never learn that thing; you most definitely will!



Google is your friend!
When you start programming anything you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before. But in the beginning a lot of things have been done before and in many ways.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits. There is no point in reninventing the wheel but it is sometimes crucial to know how the wheel was designed and how it works.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing. I've learned that sometimes you just have to roll with it, be a little uncomfortable with not understanding exactly why or how something is working and know that eventually it will click and make sense.



Failure is AWESOME
Most people view failure as a negative experience. When you are learning something new, failure is your new best friend. When you are in the zone, and you suddenly break your whole code, you may have an instinct to panic or get angery. However, keep in mind that this is the fastest way you will really grasp the technical aspects of your new skills!! 
Each time you fail, you will learn invaluable skills which may have otherwise taken you years to learn the "traditional" way. In face, failure is the reason most of us are taking these Skillcrush Blueprints to begin with, right!? If we were all able to learn new skills immediately on the first try we would have no reason for classes like these or community or society!!
Learning any computer language teaches you how to think ... again.
I wish I would have known that there is a set of rules for coding, but there are also almost infinate ways to accomplish your goal using code. I was so ingrained to believe that there is a "right" way and a "wrong" way, that I often failed to really learn the "why" behind each of my actions. I was just following instructions. Just copying code. 
It wasn't until I realized that I had to re-learn how to think in a totally new languge that everything starting to fall into place for me.
When I would encounter a problem in my code, I looked for typos, but I wasn't always understanding "why" my code was breaking. My biggest piece of advice would be this ... Don't copy and paste any code you are learning until you totally understand what it's doing!! Once you have a solid understanding, then you can copy and paste your code around, but my advice is to type it all out first. It will help it get into your brain!



Draw it. On paper. With a real pen or pencil.
Jumping right in can be a super fun way to just get going and get messy! Sometimes, you want to avoid messes, however. Stepping back with a pen and paper to visualize relationships and interactions, write down your order of operations, and making sense of it in a way you already know how can be extremely helpful.
Not only does it force your brain thinking of how to organize whatever you're working on, but you can end up with a cool visual when your're done! It may not make sense to anyone else, but most importantly, it makes sense to you!


It's okay to mess up and start all over!
Sometimes, you realize you're doing something wrong.. And you need to start ALL OVER because you're so far down a chain reaction path that trying to go backwards and fix things will take even longer. While it's good to know that you CAN fix it. STOP. Leave the issue as is, and start clean and fresh. Keep your old work though. It's good to go back and figure out where you went wrong in the first place :)



Confusion is normal!
When you start programming, you will be exploring new territory. It's thrilling creating something out of nothing, but there will be plenty of hiccups and stumbling blocks along the way. It really is a lot like learning a new language...and trying to write a book in that language at the same time!
Confusion is obviously going to be part of the learning process. Don't beat yourself up if you don't get it the first time. Keep asking questions and searching for answers. Take breaks. Come back to the problem again the next day. Often, possible solutions occured to me first thing when I woke up! And remember, google is your friend!



Have a clear goal when selecting a blueprint
For a long time, I've wanted to be a web developer but I didn't know exactly what it entailed. I enrolled in the web developer blueprint because it sounded like the right class to take. But now I realize that I should've taken the front end developer class because it's more in line with what I want to do.

			Read and watch lessons multiple times
You may have to re-read or re-watch lessons for the information to fully sink in and the concepts to make sense.

			Google is your best friend
Google is an invaluable tool to research any question and troubleshoot any issue.



You need to relearn how to learn!
Learning how to learn to code is the most challenging part of learning how to code.
You will feel like you are doing something wrong constantly, until you figure out how to learn how to learn to code.
Get comfortable with being uncertain, and using trial and error as a learning tool.
You will feel that youa are doing something "wrong" or not "understanding" until you become comfortable with using trial and error as a learning tool. It is in fact your most powerful learning tool.
You must also learn to let go of the feeling that you are doing something "wrong". The important thing is to understand the concepts you are trying to make function, and then trying things until you find what works.
You also need to give yourself permission take breaks, if you continue pushing past a certain point you will only confuse yourself more. Learning the power of the strategic break will save you many headaches and ruined codes.



Get in there!
My best advice is stop thinking and start doing.  Get your hands dirty.  Reading concepts from a book is useful up to a certain point, if you don't apply what you've read in some way it won't stick.
Google it!
If you have a question, chances are someone's already asked it on the Internet and have gotten an answer if not many answers back from the programming community.  You'd be surprised at how many people have encountered the same roadblocks as you.



Imposter Syndrome
Yes, imposter syndrome is real and it's not confined to programmers.  You feel like you a fake, a fraud, a total newbie with your new found programming skills.  Who would ever believe that you are a "developer"?  YOU have to believe in yourself and your skills.  Be willing to share your code, take constructive criticism and learn from others.


			Dog Training and Learning to Code
I'm a new dog owner!  What does owning a dog and learning new programming languages have in common?  Commands, of course.  I took my dog to obedience 101 training.  She learned a whole bunch of commands: sit, stay, down, heel, off, no, etc.  I'm learning a whole bunch of "commands" in my journey to become a front end developer.  Now that we both have seen and heard these commands we have to practice them.  My dog forgets to heel sometimes and we practice the "heel" command.  I have to practice my coding skills every day.  Use it or lose it!



Don't give Up!
This is your new motto when learning to code.  Everything looks like a foreign language until you start recognizing the symbols.  When your sentences (code) speak some foul language, your computer will yell back.  Yet don't take it to heart.  You two will communicate eventually.
Just like dating, you'll slowly figure out what he or she likes and 'Does Not' like.  So aim to please but expect a little feedback.  It all gets easier as time goes by. You'll eventually read the signals and figure it out before it all goes the wrong way.
Exploration is your new activity!
Google will become your new best friend, as well as stackoverflow and stack exchange.  Try your own code first but listen to their advice, since improving yourself is the goal.
Your code will seem lame compared to these pros but eventually you improve step by step and will not rely on them so much. Read, read, read, I can't say this enough.  The more you read the more you know and then practice, practice, practice.
As a former Fortran programmer, symbols and attributes are familiar but all this Ruby is Greek to me!!



Coding - where curiosity never ends
I started coding when the frames, tables and webpages looks like the default sublime text window. I thought, "How do you do that?". Then I became a view page source fiend. I copied, pasted and was breaking code as much as I was fixing them, but that's how I learned!
It takes a lot of patience when you first start out and you will make your first big mistake at some point - EVERYONE has. Just ask why, learn from it, move on and keep going!
I'm a mechanic!
At least, that's what my test results in high school told me I would be suited to. But instead of fixing cars, I fixed code. Flash forward to today, curiousity may kill the cat, but in development, curiosity helps you learn code.



“You may encounter many defeats, but you must not be defeated.  In fact, it may be necessary to encounter the defeats, so you can know who you are, what you can rise from, how you can still come out of it.” 
― Maya Angelou
“The greatest glory in living lies not in never falling, but in rising every time we fall.”
― Nelson Mandela
"Sucking at something is the first step to becoming sorta good at something."
― Ryan North
“You have power over your mind, not outside events. Realize this, and you will find strength.” 
				― Marcus Aurelius
P.S. Read this every time, when you're struggling! Good Luck !!! 



Happiness doesn't come from material things.
History is proof that money and material things can't buy happiness. Happiness comes from submitting yourself to your Creator, and living your life in HIS obedience.
If success was in kingdom, then Pharoah would have been successful. But he was life ended in disgrace and eternal favour because he was rebellious to his Lord.
If success were in wealth, then Korah would have been successful. But he was punished by Lord Almighty for being rebellious against the Prophet of the time
If success were in office, then Haman would have been successful. But he died in disgrace too and will be burning in hell forever for his misuse of office
 A smart person is the one who prepares for the never-ending, eternal life hereafter, search for the ONE true Lord and then spend his/her lifetime to please his/her Lord. 
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Figure out what you want to build first
If learning how to code is hard enough, figuring out how to start is harder! There are so many different programming language out there that it gets extremely confusing. It may even dissuade you from even starting. I know I almost quit in this stage. I learned, however, there is a different approach. You need to start with a project in mind--something that you can call yours.
Start with figuring out what you want to build. By doing this from the start, you begin your coding journey with a purpose. Everytime you get confused on what your next step in the learning process should be, go back to thinking about what else you need to learn to make your project happen. Curiosity will naturally take form and will motivate you to keep going.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
 Try as much as possible to make mistakes and break code. The code doesn't mind. The more mistakes you make the easier it will be to acknowledge them and seek out the answer rather than wallow in defeat. 
 Above all else, just try to have fun. That's the only way you will make it through that 5-hour debugging session that is just around the corner.



Confusion is your friend!
I wish someone had told me this when I first started coding. I had hours of frustration looking at my errors or misplaced styling
			only to learn that 6-8 hours later I have to stop, walk away and do something else.
 When it comes down to it, confusion and frustration are actually good things. It means that your brain is adjusting to the concept
			and working hard to comprehend and output the right answers. 
 In fact, the concepts that I felt most frustrated by I have remembered the best. So hang in there! It will get better I promise.



Things may come to those who wait, but only the things left by those who hustle. - Abraham Lincoln
Hustle Hard!
Stop thinking about that great idea! Just do it. Action is what separates the Accomplished from the "Ahhh, Dreamt Its!"
Pursue your Passion!
What do you want to do? Sometimes you only get one chance! Life's a big gap . . .fill it with gnarly stuff!
Get Yours!
Programming will help you materialize that dream endeavor! Get the knowledge, build the apps, create a name for yourself, develop a following, then look back at your naysayers (probably only yourself) and tell them "I DID IT! I DID THAT!"



Confusion is not your friend!
Look for a program that works with your learning style so you can understand what you're learning.
Confusion, therefore, is a sign that you need some help.
Expensive programs are not better.
There are lots of programs out there to learn to code. Make sure to find what works for you and combine resources.
Blah blah blah...



HTML & CSS are your friend!
Don't be afraid to seek information all over the web! Skillcrush is a good starting point but there are so many good places to find information on the web 
Your code will break, and you'll hit bumps all the time. Keep pushing through it, ask for help!
You're going to be confused All. The. Time!
It's totally normal that you'll be writing code and seeing it on your screen, but not knowing how or why it's there.
			Duh, you're learning a whole new language! It take's time and patience to figure things out.
Finally, learning to code is not a 10 week process, it's a lifetime process. Keep up with the new technology, read read read everything you can, and have fun!



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
You are not going to instantly become a pro
And you never will be. Languages and software are forever changing and you will always have to be a student. ALWAYS!!
Patience is key
 Rome wasn't built in a day and you won't learn to code that fast either. It takes time, patience and a lot of practice.





Maintain Perspective
“There is nothing noble in being superior to your fellow man; true nobility is being superior to your former self.” Ernest Hemingway






Persistence
“Be persistent. When knowledge and ability aren’t enough, be persistent."







The advice I wish I was given !
You sure going to enjoy coding after reading this advice
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
 Put more hours than you are asked to practice what you learn.
 When you follow a guided learning process, just like in all Skillcrush courses, you tend to rely on the information provided in each class. After your first month into coding you may feel like you know all the basics and are progressing towards becoming a developer. 
 The more you learn, the higher your chances of forgeting what you learn. Practicing is the key to perfect your new learned skills and to be able to do that you need to put more hours into your craft. Give yourself extra two hours every week to go through what you have learned in the classes and to practice through creating challenges for yourself. After each month build something for your friends or your portfolio using your new coding skills. 
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.






What I learned in learning to code...
Really it's all just a learning experience and you're bond to meet a few bumps along the way; the important thing is not to give up and practice makes perfect (well not quite but you get the point).
 And if you feel flustered, clustered and confused, it's always a good idea to take a break at the beach....



Do It Anyway ...
In high school, HTML was my favorite class.  In fact, my freshman year of college, I was a CompSci major.  I enjoyed coding, but -- at the time -- it did seem applicable in the real-world and I moved into the social sciences.  I found my way back to tech several years after graduating college, as a project and later a product manager.  But I hadn't attempted to really learn more coding.
I have spent YEARS not learning to code ... with all the excuses in the book:

"It's hard."
"I don't have time."
"I don't know how to get started."
"I need a degree in CompSci to code."
"I work with developers, so I don't need to learn."
"Coding is boring." 

Now that I've started up learning, I'm realizing, what was I waiting for???  I love this!  It's already helping my career.  The community around me is so helpful and collaborative.  Why did I hold out for so long?
So, my advice to you is to let go of the excuses.  Let go of the limiting thoughts holding you back.  Let go and just put one foot in front of the other.  No excuses.  Just tell yourself, do it anyway.  You think you won't be any good?  Do it anyway.  You think it's too hard?  Show up and do it anyway.  You aren't sure you have the time?  I'm a mother of a toddler.  I work full-time.  And I'm helping my friend cod her app.  All while doing Skillcrush.  Do it anyway.  If learning code is something that you want to do, I promise you that you will get better and you'll thank yourself for showing up and doing it!



Invest in a good reference manual, it will be worth it, 100%
Sometimes the lessons will kind of trick you, but don't sweat it.
Don't stop with the lessons, going above and beyond the basic requirements is totally worth it.
Many programmers will be pendantic, and argumentative. Everyone else is rolling their eyes at them though.
Figuring out why something isn't working, and fixing it is the best feeling.



Google is Great!
The great thing about programming and the problems that you run into along the way? Many other people have run into the same issues as well! A quick google search and you're find forum posts and discussions with people talking about problems and solutions that they've come across.
Documentation is amazing!
We've seen how helpful documenting your own code can be, but reading through the official ruby documentation can also be very beneficial. There's a ton of great code examples and a lot of great info on important methods. 
Run checks and tests constantly!
It's really easy to use puts to see what the value of your variables are at all times. Adding a check to your code is really easy to do and can give you very valuable info on how your code is working if you're running into any issues.



Work Methodically
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Working methodically will help keep you from getting confused and will allow you to build upon your newly learned skills, line upon line and precept upon precept.   If you try to jump ahead into something that you don't understand too soon, you might find yourself frustrated and stuck.  Unless you have a good mentor who can step in and offer advice on where you went wrong, you may have to scrap your entire project and start over. 
Test Code Often
Checking your work often is an important part of methodical programming.  This means building your application one piece at a time.

First you might write a line of code to print. (test it)
Then you might add some i/o. (test it)
Then you might try adding some variables, (test it again).
Add a method (test)
				... you get the idea...
			
As you add each new piece of complexity to your program you need to continue to test to make sure that the entire program still works.  
By programming methodically, when your code ceases to work (and it WILL cease to work at some point), you can simply comment out the most recent change and test the code again.   If it works, then you know that the most recent line of code is the culprit.
			
On the other hand, if you make too many changes at once you can find yourself in the predicament on not knowing exactly which piece of code broke your program.  
Don't Re-Invent the Wheel
While writing your own original code can be fun and exciting, sometimes the method you need has already been written.  It's often quicker and easier to look online and find some good, working sample code, play with it and customize it, but when it's obvious your borrowing code, don't forget to acknowledge your source.  
Thanks Peter Wolf for your lovely style-sheet!  It was a great jumping off point!



Take a break, but never stop!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and it can be scary to face the unknown.
Pushing that fear aside and diving in is the best way to learn. That doesn't mean every concept will come easy, in fact, most of them you won't succeed at the first time. But don't let the fear of failure keep you from pushing forward until you make a break through.
Sometimes you need to step back.
Have you been staring at the same code for more than an hour? There's something wrong but you have no idea what it is? Step away from your computer. Grab a glass of water. Check instagram for a hot second. Maybe take a quick bike ride around the block. 
Clear your mind of the issue for just a brief period and then revisit it shortly after.
A fresh perspective might be exactly what you need to solve the problem. If you still don't get it right away, that's ok. Hard work and persistency are key to being a coder. But don't be afraid to take a break when you need to. 



Don't Doubt Your Abilities and Your Intelligence
For years I've wanted to learn how to program and I put it 
                    off, following a different career path. This was becasue I
                    was comvined I either wasn't smart enough or that I was 
                    'too far behind'. I though I didn't have the 
                    math/logic/science background I would need to keep up.
I have recently found out that all of the above is bull****.                    
                     You don't have to be a genius to code, but you do have to be 
                    willing to think about things differently than our used to. 
                    You need to trust yourself, and forgive yourself. Both things
                    that are hard for many. Ho, and about the math thing? Please 
                    read 
                    Programming is Not Math by the great Sara Mei
Go Out, Take Chances and Meet People
I'll admit that I am a perfectionist. I didn't want to tell anyone that I was interested in coding until I
                      knew enough to 'talk the talk'. I have a feeling many developers/devs in training feel this way.
                      While it can be a positive trait- we teach ourselves so much it is beyond enough- it can also be stifling. 
                      
Go meet people before you are ready. Tell them you want to learn more about coding. Apply for scholarships, go to meet-ups
            , go to hackathons, join Twitter. I went to RailsConf this year as a total n00b and was shocked at how supportive people
            were of people starting out. It made me regret a little not going to meet-ups sooner. Stick your neck out-someone will see it.



Don't Be Afraid!
Embarking on a new journey, trying something new, will always be a scary step. Don't let fear and doubt stop you. Instead, use your fear to fuel your motivation. Everyone who is learning to code out is freaking out, confused, and frustrated, but that all comes with the territory (regardless of skill level, lol). Have fun. If you don't, you'll get so wrapped up in negativity you won't get better.
Take A Step Back, and then Breathe!
You're going to get confused. You're going to break something and not know how to fix it. You're going to want to cry and throw your computer. When you get to any of these points, stop whatever you're doing, walk away from the computer, and breathe. It's going to be okay.
There have been so many times when I get so frustrated I just want to curl up into a ball in bed. When I go back to the issue a couple hours later, turns out I was missing a backslash or didn't properly close something. Once you learn more, breathe more, and are more used to programming, confusion will be a normal part of the process. These obstacles will no longer bother you.
Code, Code, Code, and then Code Some More!
Never stop coding. Even if you know only basic HTML/CSS; that is enough to create a static site. If you get stuck or want to implement something you've never done before, GOOGLE IT! The internet is your best friend forever and has most of the answers you need.
So no more excuses! Just get in there and code!



It will be hard- Power through!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
You will want to quit.Shut off your computer and walk away. That's ok- talk a walk, go to the gym, take a break.
Then come back and keep going!
You will feel like a rockstar when it works!
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



When you hit a dead end, take a break!
This is a piece of advice that I have been given time and time again, and yet it is so useful that I felt I needed to repeat it here.
On many occasions, I have struggled over a problem, reaching the proverbial “dead end”, but refusing to quit because I have felt as if “I almost had the answer.”  However, the longer I persisted in “hitting my head against the wall” the more my frustration grew, significantly reducing my ability to think clearly. 
Eventually, either because of exhaustion, or because my husband dragged me away from the computer, I would take a break. And after an hour or two (or maybe a short nap), I would come back to the problem, and nine times out of ten find the solution within a few minutes. So, I think this is one of the best pieces of advice - when you hit a dead end, take a break.



You are technical! And I love sherbet.
"Technical" is a mindset, not a character trait. All you need to do is flex your techy muscles. Before you know it, you'll be thinking like all the nerds.
That doesn't mean it's going to be easy! We all learn in different ways and at different rates. If you want it, you can do it. But we all take different roads.
GET TECH FRIENDS
Remember all the annoying theater geeks in high school? How they all wore eyeliner together and walked around in a jaded group? That's what you need. Techies. You'll recognize them by the hunch in their shoulders, the bags under their eyes, the empty coffee cups, and their periodic fist pumps.
You need these crazy pals to help you when you're stuck, encourage you when you're floopy, and to spread the word about your new skillset. Your goal is to get all the gold coins right?
Do a little each day instead of a lot one day. Brains aren't that great at cramming. We learned that AGES ago.



Embrace the Errors!
You'll make a lot of them... and that's ok. The trick is to recognize that this is a part of the learning process, and therefore a good thing. It's not failure.
			In fact, each mistake teaches you something new and valuable... rote memorization of facts does no such thing. If you aren't making mistakes, you aren't challenging yourself. If you aren't challenging yourself, you aren't learning.
Learn From More Than One Source.
Every now and then you'll hit a point where nothing seems to be sinking in. Things that should make perfect sense... don't. This happens, and it's a normal part of the learning process. What it means is that your brain needs time to sort through all of that information.
This doesn't mean you need take a long, unhappy, unproductive break. Quite the opposite! Your brain simply needs to move over to a temporarily different teching method. There are many ways to learn code out there, whether it be a practical, hands-on training site like Free Code Camp, a learning game site like CodeCombat, a full course, or even a book.
Use one of these tools to allow yourself to see the same subject from a different standpoint. Then go back to your primary learning method and watch how much more your brain is able to take in. You've given your mind a rest without sacrificing learning time!
Just. Have. Fun.
Learning to code means learning to solve new and unique puzzles. Everyone likes puzzles. They can be frustrating, sure, but the end result always brings a sense of fulfillment, one of confidence. The same holds true with coding. Reminding yourself of that will keep you going when things get tough.
...and admit it: sometimes the mistakes we make are pretty darned funny. Go ahead and laugh at your mistakes. You know that you'll eventually fix them, after all, and the act of laughing reduces stress levels, which in turn, reduces the amount of time you spend fretting over something that turns out to be nothing more than a mis-typed character or a missing div tag.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
 I wish somebody told me how aggravating it would be to code at first. It's literally like learning a new language. I can't believe how much i have learned in 3 months and i will never stop learning this because its still all very new to me.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Quite frankly, you have got to be ready to give up.
You know it's been years that you've been thinking about it. Setting your alarm every night, dreading that hour, as it so quickly approaches, when you have to get up and start the grind all over again. Same routine, same path to the office, maybe you stop for that gourmet coffee, maybe you don't, but it's the same every day. Day in. Day out. Makeing certain that you are available to the boss, the team, the job. Stressing about the kids, the husband... Your "other" job.
You've spent years dreading it, and now you're ready to give up. You can't stand the idea of answering to another under-appreciative executive who has really no idea what you contribute but freely takes credit for the success meanwhile seems to derail your efforts at advancement.
Count to 10 and start over again.
It's gonna suck. You will find yourself sitting there at 2 am, in the dark room lit only by the glare of your screen. You can't sleep. Your obsessed. When you do sleep, you dream in code. Something is is wrong with the code and you can't figure out why. You've inspected every line and have ran your debugger more taimes that you can remember.
All you can do is walk away. Go do something different. Read something that has nothing to do with code. Take a shower, play some solitair. Just stop thinking about it. Go pour yourself a fresh Dr Pepper, thumb through that magazine your daughter "accidently" stole from the check-out line, take a deep breath and count to 10.
Then, when you least expect it, while you're taking a shower, drinking that Dr Pepper, the solution will come to you. Out of nowhere, you will have clarity. An epiphany will descend on you like a bolt of lightening. You will be full of energy, motivated to conquer that line with the error. You will rewrite it and it will work perfectly.
Until the next line...



Stay humble!
You will never know everything, especially in the art of programming.  Once you have mastered one thing, there is another facet of the programming world that will interest you.  Expand your mind!  Never stop learning.  Never hesitate to ask questions.
Stay amazed!
Technology is yours to control.  Before you think you've hit the limit, there's a million other things possible with your knowledge, and knowledge to gain by attempting all of the possibilities of technology.
Stay crazy!
Don't limit your thoughts.  The barriers that you put up are the only ones that exist.  Don't ever let anyone tell you something can't be done.  If they say it will be really hard and complicated, well there's a worthy challenge for yourself.
Remember that Google is your friend.  The trick to finding anything you want on Google is just how to word your query.  When it comes to popular languages or technologies, there is a chance someone has run into the solution!  You can basically apply the Simpsons Already Did It mentality.



Hullo, I'm Rose Jermusyk, and I learned this the hard way.
When I first started in Skillcrush's Wordpress Developer Blueprint, I came to the game late, about a week before the first month of guided coursework ended. So I plowed through everything in that one week and - feeling pretty smug with myself - pulled out the Brady's Irish Cream to celebrate.
That was my first mistake. Not the drinking part. The not-making-sure-I-was-actually-done-with-all-the-coursework-before-I-started-drinking part.
Celebratory drinking is all well and good so long as it is actually time to celebrate because All The Things are done.
Such was not the case for me. I had numerous Irish Cocoas, got bored with waiting for the cocoa to be ready to get to the Irish part, and then it was just me and  the Brady's and the technology which I was continuously eyeing with pride. That was my second mistake.
When drinking, walk away from All The Technology. Don't keep clicking around all your hard work, don't e-mail your exes, and it probably wouldn't hurt to avoid Twitter (the obvious exception being during the Twilight Zone New Year's Marathon when everyone should have their phone set to tweet in one hand and a bottle of Prosecco set to open in the other). To recap, Mistake One was not making sure I was done with all the schoolwork before I started drinking; and, Mistake Two was continuing to be all up in the technology whilst the drinking was occurring.
You see, in my drunken state (let's call it Irish Rosie) I happened to notice that I had left one last lesson undone: Security and Back-Ups. Now, I'm a fairly confident person to begin with, but Irish Rosie is unstoppable. As soon as I the lesson video was completed I dived into the work of the lesson and - within a matter of minutes - had locked my root user self out of All The Things, made MAMP my mortal enemy, and totally killed my buzz crying "Oh, woe is me!"
So here's the trifecta of drinking lessons: (1) make use it's actually time to celebrate before pouring yourself a drink; (2) when the container is open, the laptop is shut; and, (3) if you notice something that needs doing and you happen to already be drinking/buzzed, write yourself a note for the sober light of day
After one week on catching up on a month's worth of work, it took one night to ruin it all and one very sober week to figure out a workaround (and that was before the from scratch rebuild). Learn from Irish Rosie's mistake and Don't Drink and Code.



Pick a language and keep at it
When I started to learn to code, I wanted to know everything right then and there. I keep jumping from HTML to CSS to JavaScript to Ruby to Ruby on Rails to Meteor and finally back to Ruby on Rails.  I wasted alot of time learning and forgeting and relearning.  Obviously HTML and CSS are very important as a foundation for Web Development but whichever route you chose to go after that stick with that all languages function the same way, just a diffrent syntax.
Find someone to do code reviews with.
At first I felt this was an impossible task as a newbie.  There are plenty of routes you can take.  Skillcrush is a great one.  As well as Code Newbies and joining one of their groups.  There are also sites like codewars and excersism.io that have you code and then talk about you code with others.
Write code
You have to constantly write code.  Just like learning anything else in life (a mucial instrument, or a new skill set at work) you have to practice what you are learning or your brain will not retain the new information.  Code ever chance you get.




Back to Skillcrush Home



Most important step
Thou art sad, get thee a mentor, get thee a mentor!!!~William Codespeare, Much Ado about Errors
My favorite book
Pragmatic Thinking by Andy Hunt
Race your racehorses, not your sheep!


Always consider the context.
Use rules for novices, intuition for experts.
Know what you don’t know.
Learn by watching and imitating.
Keep practicing in order to remain an expert.

				With apoligies to Allen Iverson
			

Avoid formal methods if you need creativity, intuition or inventiveness
Learn the skill of learning.


My top five favorites resources 


SkillCrush

Railsapp

Apprenticeship Patterns
Mastery, the keys to success

Set aside time for extra research!
The great thing about this program is it makes Ruby and Git fun.  There is a lot of information and some important things are just quickly mentioned. Set aside some time each night to do a little research on what you are studying.
A simple google search is very helpful and you will probably find yourself often at a place called Stack Overflow.  This is also a good place to ask questions.
This advice is from Skillcrush but I like it so much it needs to be said again:
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Sometimes it's the simple things
You can spend minutes or even hours staring at code, wracking your brain about what's wrong with your logic when all along it could be a simple syntax error!
Take a break!
Speaking of staring at code for hours, I'm sure we've had our moments. Stuck on a issue you can't seem to solve it no matter how many times you run through the logic. Sometimes it's best just to take a break! This could be applied to any project in life but it's best to take a step back, relax, go out get some coffee, and face problems feeling renewed.



Programming Is Fun!
When you start programming it's exciting! It's challenging and fun! And it's an opportunity to learn something new that a lot of people just don't understand.
It can also be a bit aggravating and frustrating at times. But if you persist and manage to figure out whatever the problem is, it is such a satisfying feeeling of accomplishment!
Practice! Practice! Practice!
When you are learning a new technology, like writing code, you need to just keep practicing! I am continually, (possibly, addictively) tweaking various new code-y things I have learned to see 'what happens if I do this?' or 'what happens if I do that?' 
Trial and error is a great way to learn how things work.
		


Be patient with yourself!
When learning to code as well as programming, I had no idea of what I got myself into.  You see...all this was brand NEW to me.  Sometimes, I would become so frustrated with myself because I felt like it wasn't clicking and just wanted to give up. But I managed to keep pushing through.
In order to survive, you have to learn patience with yourself.  Learning how to relax, laugh at yourself, and not get overly excited can be detrimental in any obstacle you pursue in life.  As Confusion stated "it is a sign that you are heading in the right direction."  So, take your time, learn the concepts, and ask plenty of questions.
 Before you realize it everything will not be a blur and things will finally come together.

			Most important part: Practice, Practice, Practice.
When you are learning a new technology or programming language there is never enough practice.  Practice when you are learning, practice for understanding, and practice to see if things could be done more efficiently.  The more you practice, it aids in your knowledge of understanding exactly what is happening and why its happening.
The most critical part is training your mind and eyes to think and see things differently (as a programmer, designer, etc.).  Additionally, make sure your math skills are up to par because math is involved when dealing with technology.
Most of all, please remember to  enjoy your learning experience and have FUN!  It lasts for only a short time frame and then you are on to something.



Not to sound like a cliche, but ...
If at first you don't succeed, try, try again! Odds are you won't understand everything right away. I know I definitely don't. It's extremely easy to get frustrated when you run into something you don't understand or can't get something to work properly. Keep trying. Ask questions. Google it. If you stick with it, when you figure it out or get it to work, you'll feel amazing.
It's never too late to learn new technology.
When I was younger, I loved building my own personal websites. I'd spend hours teaching myself HTML and Photoshop. I'd constantly change the layouts of my personal sites just because it was fun. It was fun to see what people did with their own personal sites. But somewhere along the line, I stopped playing with HTML. I'd thought of it as a hobby. Figured I probably should have majored in something related to computers to pursue it as a career. Years later, I realized I missed it. It's been fun to dive back into HTML and CSS, seeing what I remembered, and updating my skills. It's never too late to start learning.
Don't be afraid to take a break.
If you hit a roadblock and really can't figure something out, try stepping away from it for a little bit. Take a walk. Clear your head. Take a deep breath. It's easy to get really frustrated. Sometimes a little break is all you need to help conquer those roadblocks.



Embrace the error
Basically, read the whole error message and try to understand it. Straight up. Don't just sit there and feel like a failure when it doesn't work the first time, when you see the word "error" followed by a million sentences. Really try to understand what went wrong and use that message to solve your problem. You got this.

Take your own advice
I'm sure we're all writing beautiful pieces of advice for each other that we don't always follow. For example, in the above scenario, I dread error messages and I let them discourage me. I'm advising me, and you, to follow our own suggestions because we are often those that can pinpoint our weaknesses and can recognize how best to work on them.





Notice the details, but don't get lost in them
The fine details are super important when it comes to coding and avoiding future nightmares.

			However, precious learning time can be lost if you allow yourself to get hung up on details of relative unimportance.
			Focus on seeing the big picture and the details will come back to you or you can tap into resources you've saved along the way.


Repetition equals talent
You won't develop a talent or skill if you don't repeat it. You won't repeat something unless you are motivated to. You won't be motivated unless you have a natural desire or see an urgent necessity.
Find your motivation and discover your true skills and talent.





Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Keep Current
Read everything out there and stay current.  Skillcrush and Free Codecamp are your friends!



I've noticed a pattern every time I encounter a problem while programming:

			
Hit a wall/something breaks
Ugh, frustration!
(Whining) I don't see an obvious solution!
Wait...now a slight panic.
Do I know how to fix this? Oh no, I don't know how to fix this.
Snack/TV/reading/bathroom break
Google problem, find a couple answers on stackoverflow
Hack hack hack
Panic subsides
Problem eventually fixed or at least minimized
I feel awesome.
I realize I knew the answer all along.


Coding is problem solving. Every problem is an opportunity. Break the problem into pieces. Try to find the kernel of the issue, and Google the hell out of it until you find something that clicks.
And eventually you will. Every time.
I'd spend hours styling this, but I want to move on to Gems!



Just keep swimming!
 No matter how lost, confused, or stressed you get just keep going. JavaScript was probably the hardest thing for me to understand and it is still a concept out there. It will be fine and get better.
			Get the word out there!
The more people you know the more help and advice you get. Even if this is a scary thing for you.
Fake it until you make it!
If you fake it you will eventually understand what you are doing and eventually will become more knowledge than you could guess.



"Great people do things before they are ready."
Jump in with both feet, trust yourself, and try your best. You never know where an opportunity will lead you.
Don't ever stop learning
Say it with me: "Google is your very best friend." The answer is out there and everything is figure-outable.
Have a goal
Mine? Fund our entire Disneyland vacation (including a stay at the Disneyland Hotel!) next year solely from freelance jobs... I'm ¼ of the way there!



Confusion is your friend!
When you start programming, you are doing something you have never done before. This is a new challenge, new opportunity, and something that's most likely never been done before.
If you are confused while you are coding, don't get discouraged! It actually is a sign that you are heading in the right direction. When you are confused, it has started a problem solving pursuit that combines math and technology. This just means that you need to keep looking and keep working to make things clear.
When I got confused, I always read my code over to focus on what I was able to understand. Once I review my code, I use that information to fill in the pieces and figure out what I don't know. If I am still unable to understand what I'm learning, I will try searching for information about areas I don't understand.
Suspended disbelief plays an important role.
When you are learning anything new, you often go through an uncomfortable phase where you simply look at your code and don't understand what is happening with all the commands you are putting in. We have all been there. This is a normal part of the learning process and actually is one of the most important parts to the entire process.
As you work with a new programming language, you are training your eye to read and understand code. The way you train your eye to read code doesn't happen right away. You'll often feel silly for trying to read code when you don't understand what it's doing. However you will get better as you keep working with code and reading it.
The key to learning how to code is practice. Learning to code is exactly like learning to play an instrument or a sport. The more you practice, the better you will get at reading and understanding code. You can practice by building sites and apps for scratch. I like to open new files and rebuild projects I done from scratch to see what I can do as well as areas I need to review.
Get involved in your tech community now!
Learning how to code is a collaborative process. Developers want to help each other and make our lives easier. Let them do it! 
There is constantly new information and ideas happening throughout the tech community. Sign up for newsletter and follow tech blogs. Join a forum and chat with other developers. The best way to learn tech is from others already holding tech jobs!



Confusion is Your Friend!
The first time you write some new code, you're probably going to make a mistake, or two, or five. That's OK. In fact, don't even worry about getting it right the first time because the other side of making a mistake is learning to fix it.
In fact, you're more likely to remember what you've learned if you do have to go through and fix it, than if you got it 100% right the first time. And yes, it's annoying, and it's frustrating, and you'll probably get pissed off at not being able to fix it. That's still OK. Take a break, have a snack, listen to some music (my preference is The Division Bell) and, once you're calmer, go right back to it.
That's Impostor Syndrome You're Feeling
You're going to feel like you don't know what you're doing, that you'll never be as good as all the other coders out there, that you'll never know all of it.
You know what? This is still OK. You're just learning, so it's OK not to feel 100% comfortable with what you're doing. And all those other coders? They probably felt exactly the same way you do right now. And no, you may never know all of it, and that's fine because you don't need to, you can find out.
Finally, you're probably going to feel like this every time you start something new. Don't worry about it, it's normal. You'll get there.
You'll be OK.



It's not all numbers.
Most coding doesn't require high-level math skills. You probably already know all the math you need to know! Coding is much more about learning to think like a computer, not doing tons of calculations. In fact, your computer should do the math for you!



Patience and Perseverance!
When your head feels heaviest, you are making progress!  This moment, you can go and take a break, the important thing is that the next day you come back, and the next and the next.
I used to think that you had to keep at it, endlessly, but that is not how the brain absorbs new information.  You need to let it percolate for a bit, then push it a bit more.  Pretty much like exercise and weight lifting. 
Patience is the key, sometimes you feel like giving up, but let me tell you, its always TOO soon to do that.  Keep at it! :)
Cat Ipsum.
Cat ipsum dolor sit amet, run in circles for stretch. Run outside as soon as door open lick arm hair and scream at teh bath and nap all day pooping rainbow while flying in a toasted bread costume in space and kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff. 
Sleep on keyboard meowwww or find empty spot in cupboard and sleep all day scratch at the door then walk away. Pelt around the house and up and down stairs chasing phantoms curl into a furry donut. Sweet beast burrow under covers stare at wall turn and meow stare at wall some more meow again continue staring for toy mouse squeak roll over, jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box until treats are fed. Sun bathe sit on the laptop where is my slave? I'm getting hungry kitty loves pigs. 
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.




Celery pea sprouts sweet potato or kumara!
Spring Onion sweet potato or kumara endive tomato canna brinjal chicory good king henry ti, samphire swede salsify. Garlic swiss chard mooli prussian asparagus tigernut cucumber, american groundnut. 
Sea beet asparagus squash courgette ginger - orache pignut dandelion skirret dolichos bean. Kuka, parsnip garlic; beet greens. Soybean corn salad chickweed. Asparagus, mooli radish, good king henry, good king henry, golden samphire kurrat turnip rutabaga. 


Sweet pepper cabbage eggplant gobo lizard's tail potato gumbo.
Celery polk, jerusalem artichoke garlic radish welsh onion orache chickweed. Polk leaves, zucchini celery tomato pea. Yardlong bean celery, brinjal daikon wild leek zucchini tinda chinese cabbage? Wild leek florence fennel - squash. 
Soybean elephant garlic yardlong bean - zucchini pak choy tigernut. Lizard's tail moth bean, taro pak choy radish, tatsoi, sea beet sea beet. Pumpkin; cabbage paracress radicchio florence fennel onion pea sprouts. Florence fennel - napa cabbage brussels sprout sweet pepper soybean; fat hen yam kohlrabi? Prussian asparagus, lentil moth bean chrysanthemum leaves celery kale endive ulluco. Ricebean, chinese artichoke horseradish. 
Horse gram pea sprouts pignut fiddlehead brinjal tomatillo skirret, polk polk chickpea. Urad bean - cauliflower tomato bok choy napa cabbage, polk. Catsear; chickweed good king henry ricebean cardoon jerusalem artichoke, elephant foot yam. Peanut samphire turnip; plectranthus courgette swiss chard. Garden Rocket radicchio epazote onion tomato jerusalem artichoke prussian asparagus sweet corn aka corn; aka maize land cress pumpkin collard greens. 




Practice Isn't Perfect
Though I know that practice makes perfect, sometimes the idea of perfect keeps me from the point of practice: learning new skills.  Don't let the details keep you from moving forward.
Write code often and with abandon.
Bookmark Your Roadblocks
If you really hit a roadblock, bookmark it temporarily and move on to something else.  If it's a real doozy, drop some questions in a forum, and then step back.
Working on another part of your project can give you a sense of accomplishment and remind you that you have skills!
With some fresh eyes and boosted morale, return to see what more you can tackle.  Bit by bit, you'll get there.



Girls can code too!
♥ I know this may seem silly to say, but I'm going to say it anyways; girls can code too! Never in a million years did I ever think I'd be interested in programming. I never even thought I was smart enough or that I would enjoy it AT ALL. But boy was I wrong! I used to think that programmers were smelly dudes coding in their basements all hours of the night, with absolutely no social skills at all. Kind of harsh but I'm just being honest! Women may be outnumbered in the industry, but don't let that deter you from learning (assuming you are a female) because we can be programmers too! You ARE smart enough! ♥
Google is the shit.
♥ Seriously, part of being a good problem solver is being efficient at finding the answers, even if that means using Google as support! There are TONS of free resources available to you; USE IT! You don't have to know everything! And no, it is NOT considered cheating! ♥



Confusion is your friend!
Learning a new language can be exciting, scary, and challenging. Coding is no different. It's fun when you start to learn about the different tags and see everything come together. On the other hand, it can be very frustrating when you are trying to do one thing, and another happens. The main thing to remember is to keep at it! Don't give up!
Confusion is natural. We all have moments when we wonder what is happening and why we decided to embark on this journey. Try something new and hit refresh! Eventually, you'll get there and one of the best feelings in the world is to hit refresh and see on the page what you envisioned in your mind!
Impostor Syndrome is Natural
Think you stick out like a sore thumb? It's possible! The truth is, we all experience impostor syndrome at one point or another. The fix? Keep at it anyway! Maybe you don't "belong" in the tech world...yet! Practice may not make perfect but it will certainly help you become better! Find time to make coding a part of your daily schedule!
The most important thing you should know? You CAN do it! Don't give up, even when you think you should. It is possible for you to learn something new and you will be happy you did!



Practice Practice Practice
When you first start learning to code don't stick to the first tutorial or lesson guide you find. Try all the different ways to learn programming there are. Not only does it keep the learning process interesting, you might find one method of learning is better for you than another, it also serves as extra practice.
No matter how many times you come across a lesson that you've done before in another place, do it again, if you've got it down pat then it shouldn't take you long. And if you still need practice then it's another opportunity to get more practice.
My biggest piece of advice is to keep seeking out practice until you can do whatever it is you're interested in, in your sleep. There's no such thing as too much practice. 



It's all about Practice
Practice, practice, practice!  I need more practice than the daily activities provided. So I used Codecademy and Code School for extra instruction and practice exercises.
Read! Practice is great, but reference books will explain some concepts in more depth
Stick to a schedule. It's easy to get behind and rush through it. But doing everything once a week means you won't retain much. Set a schedule and stick to it!

Good Luck!!



#1 Read everything very carefully.
For newbies like me, learning to code takes a good deal of time and patience. But most importantly, it takes A LOT of focus! You can't just skim over your lesson resources. You HAVE to read them all very carefully, as you're going to encounter many new words and phrases.
#2 Google is your friend.
Having trouble understanding something in the lesson resources? Google it! There are so many great resources on the Internet that can help answer your questions and supplement your Skillcrush learning.
#3 Don't give up!
I can't stress this enough. Learning to code is EXACTLY like learning a new language. Practice as much as you can. Even if you're ready to pull you're hair out trying to figure out one of the lesson challenges, keep chugging along. You know what they say: practice makes perfect!



Think About It- No, Seriously
When you don't understand the concept being explained to you, think about it for a while. Step away, address it again. if you still do not get the concept, yes, you may ask but you can also Google. There are visual aids and less technical all about the internet and some people need that boost of understanding.
Talk to Developers
If you know a dev, get some chat time in. Discuss code, practices, etc. Don't necessarily turn it into a Q&A; as that's not the most fun for them (and that's what you have your wonderful Skillcrush instructors for!) but a real discussion. Gather that experienced logic and understanding. It will cue a spark that will re-enforce everything you're learning.
If you like it, great! But if not, that's fine too!
There's a lot of pressure being placed on jobs in tech and coding but if you don't feel it is right for you, that's okay. If you love it, keep at it. Stay with it. CODE FOREVER!! :)



Distractions
There is always a learning curve when you are trying something new.  Here is some advice to minimize this learning curve.


Work on your coding when you are mentally at your best
Dedicate at least an hour each day
Take a 5 minute break every 20 minutes
Ask for help sooner than later




Keep Going
It is inevitable that you will get stuck.  You’ll exhaust yourself researching a solution.  You’ll reach out to others for help and still be unclear. I found that if I just keep going in the lesson my understanding becomes clearer and eventually a light bulb turns on to the issue that I was facing.


Never Give Up
And finally, if you are like me transitioning from another career field, you may say to yourself after many days of frustration, “I might be better off just staying where I am”.  Don’t give in to this negative commentary.  Just remember if it is your passion it is worth it to never give up.



Don't Give Up!!
There are going to be times when you suddenly feel like you don't understand anything.
(This will most likely occur when you start trying to figure out JavaScript.)
DON'T GIVE UP!!!  You're not too stupid to do this, it's not beyond you, it's just a completely different way of thinking that you're not used to yet.  Keep at it, keep trying to figure out how to solve the challenges, and when you can't, look at the solutions and make sure you understand why they work and yours didn't.
If all else fails, know when and how to ask for help.  Mightybell is great, but GOOGLE IS YOUR LIFELONG BEST FRIEND.  If you can figure out how to ask the question, it %100 DEFINITELY has the answer.
Eventually things will start to click, and you'll feel like a total rockstar again.



Practice Presistence
 The act of trying, even a little bit of coding everday or on an unnegotiable schedule is really important. Like any muscle training such mental exercises strengthen your learning, interest and confidence in coding.Recognize that learning something new will make you feel uncomfortable, displaced and even discouraged at times. But facing coding regularly, hopefully everday will create a mind shift if you are truly interested in web programming.
Start looking for a job  and don't be discouraged by those long job skill requirements on the job ads.Search for freelance positions on LinkedIn, Dice, Craigslist, Power to Fly and network. Yes, you are a serious introvert but networking is doable and finding a position in the web developer can be your reality sooner than later.
			
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



When times are hard, don't give up, Just hang in there
Learning how to code is not an easy journey, but when you have good guiding platforms like skillcrush, you tend to enjoy it as time goes by and not forgetting the support you get from your fellow classmates
Giving up is not optional when you want to achieve your goal. Keep trying, keep practicing and you will eventually get it right, and enjoy repeating it and getting creative about it each day
Hiccups are always going to be present 
Learning how to code can be very scary and intimidating when you're a women cause you overlook little mistakes we make and think because of our gender and that the opposite wouldn't make the same mistake, that is just a myth though. If you learned and skilled enough, you are capable of becoming a good developer or designer,regardless of your gender
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
Remember, don't be discouraged, put your confidence face on and be ready to face the world and show them that you're a Kick ass coder!



When I opened myself up to programming, I was so hard on myself because I was confused! And being confused about something usually means incompetence (to me anyway). There's also those deep rabbit holes I had to deal with, and being afraid of choosing the wrong one. Experts advised me that I need to be good at Googling. But how can you know what to ask? What choices are available when not knowing whats possible?
What I learned about myself is that I stuck with the struggles like a masochistic fool. But that taught me so much. From gained patience, I handled better ways to problem solve and knowing how to ask for help and when. Heck, I even began meditating as it helped me problem solve towards a base case (pun intended) The point is to stick to it. Even if it feels like you're going no where. Stick to it until you feel like you've exhausted all your options. Believe me, you will get an answer before this happens. 
Before you throw your laptop out the window, remember that frustration is normal when programming. You'll run into bugs and not know what you did wrong. It's kind of like accupuncture, where needles are placed on the leg when the problem is just a headache. The point is, you'll grow to know what nerves are connected to what. Just treat your program like a sick patient. He/she knows not whats wrong, and thats why you're there to fix it. This thinking also prevents you from throwing your patient out your window.



Less is more
Your first instinct when you learn to code is to try and write as much code as you can. Before you know it you take a look and everything just looks jumbled. The secret is actually to try and not write code.
It's counterintuitive at first but once you've written about 1000 lines of code you will start to see how much easier that code would be to manage if it was only 500 or 250 lines.
You don't need all the answers right away
Your goal is to know how you're going to go about solving problems you've never encountered before. You'll want to know where to get answers to your questions and start collecting those resources in one place
Expect to be confused and not know the answer. Once you're comfortable with that you'll just get used to doing your ritual solve-a-problem research. 



Hit the Boards
I can't emphasise enough how important your mentors are you your learning.  Hit those message boards!  Mightybell, Mightybell!  You may feel rudderless at times, but I want to tell you, you're not!  Your friendly, loving Skillcrush TA is actually right there with you, holding you up from underneath when you think you're drowning.  Don't let this resource go untapped!
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Coding is an Open-Book Test...
...and the WORLD is the book!  It's all around you!  Pull info from everywhere, everything, and everyone!  There is no such thing as cheating.  It's a different philosophy than most are used to, but that's why coding/coders/technology is so frigggggin cool!!  We are the future.  We are the vanguard.  Open source!



Hit the Boards
I can't emphasise enough how important your mentors are you your learning.  Hit those message boards! You may feel rudderless at times, but I want to tell you, you're not!  
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Coding is an Open-Book Test...
...and the WORLD is the book!  It's all around you!  Pull info from everywhere, everything, and everyone!  There is no such thing as cheating.  It's a different philosophy than most are used to.  We are the future. Open source!


Su's Advice

Don't be Afraid to Fail
Life will move on without you, so get on with the work of living.

Say Yes to your Potential
We all have a purpose and a reason.  What is yours?

Learn from Everywhere
Everyone and everything can contribute to your development.  Take it and use it.

Give Ideas a Chance to Develop
It may not look like a good idea now, just wait.


Google is your best friend!
Google is like a magic box, whatever you ask for google will find answers for you or close to what you are asking for.
Repetition is The Mother Of All Skill
There will times that you run into a problem or learning curve, so if you want to be a great developer you need to practise your programming skill, over and over.



Fake it til you make it!
When I started this class, I knew nothing about wordpress, or coding, or technology in general.
Now that I've made it this far, I still don't know what's going on most of the time, BUT I keep up with the lessons and always seem to stay on track!
Don't be afraid to ask for help when you need it!
People can't offer to help you if they don't know that you need it! Don't be embarrassed. We've all been there! Just ask.
Stay positive and keep persevering!
You can do it!



Review Review Review!
Once you start to feel things click make sure you continue to review the material and give yourself time to practice so you may solidify the learning that you have done. This will help to make you feel confident in what you have stuided and urge you to keep powering through new topics.
 Put yourself out there!
Step out of your comfort zone and join a meet up group. Volunteering is a great way to put yourself out there. You work individually the majority of the time, step out and meet people face to face to help humanize the work you are doing.


Poverty is NOT your friend!
No matter your faith, know that your God wants you weathy. He just doesn't want the wealth having you. So learn from Skillcrush while you have the opportunity, and make money to invest in the forex market.
Be in good health, you cannot be creative if you are feeling poorly, money can buy medicine however good health comes form exercise and eating properly. Remember there are many people that are depending on your creativity.
VISION IS THE KEY TO YOUR PROSPERITY
Trust your ideas, there will come a time when your idea it is the needful thing.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



Been There, Done That
The command prompt, and its baffling, unintuitive behavior, reminds me of the confusing times, hundred years ago, when I worked on my first computer — an IBM XP, using DOS commands. 
How I must have longed for a GUI interface and the 'explorer .'' command to make it all visual back then! I just didn't know yet what I was missing...
Cursing At Your Terminal?
Don't get discouraged. After you tried and tried again, there's a shortcut. Don't tell anyone. Recently, I wasn't able to push anything to GitHub via Git Bash. Error messages galore and nothing worked. I fiddled and cursed, remembering the old days using DOS, pulling my hair out. And then I caved in and used the Git GUI instead.
...And that worked. It felt a bit like cheating — but hey, that's progress.
Now back to your command prompts for another try......



Practice, Practice, Practice!
It's a common belief that practice makes perfect, and I totally agree! Though I'm a devout believer, it's often hard to muster up the motivation to keep at a new skill. It can also be discouraging to see others so much better (and so much younger!) than you pumping out amazing stuff.
The one thing to remember is that everyone has put their time in to achieve their level of greatness—natural talent or not! So find a project that interests you and use that as your motivation to practice your new skill. Get excited about the end result—and the journey getting there!
Sometimes A Break is Just What You Need
I often get frustrated or bored with what I'm working on if I spend too much time on it. Taking a break changes up my scene, gives my brain a reboot and allows me to think clearly again.
Sometimes it's the change of pace that reignites your love for your project. Don't feel guilty for taking breaks! They're a necessary part of the process.



And so are you!
We are all weirdos! YAAAAAY!
Things will break.
It will not always be your fault. (Thank you Women Who Code meetup for this)
Find what works for you.
Not all methods are equal or the same - do what you want.
Find a friend who codes and hassle them for advice.
Hey Matey!



Things I Wish I'd Known
At first, I wanted to learn to code to see if it would be something that I could do. I was an English major, not a techie.
				I immediately found out what I had hoped: I loved to code.
Learning to code meant big changes for me. I'd been trying to make a living as an adjunct writing instructor, but discovered that
					adjuncts aren't paid a living wage. I'd gone to grad school and all I got were some fancy letters after my name. I knew that I needed to find another way
					to make a living, but I had no idea how I could do that. Enter, Skillcrush.
I started with the 10-Day Bootcamp, quickly followed by the Web Developer Blueprint. But midway through my Blueprint happened to be towards the end of my fall semester.
						I let class planning, grading papers, and driving to different campuses get in the way. I was exhausted. I'd get to coding later. 
Here we are, nine months later and I'm just finishing up my first Blueprint. When I started this crazy coding journey nine months ago, I should've made it a priority.
				I needed to schedule in the time to work on a lesson a day, not cram on the weekends. It's easy to let your current job take over. If I can give you one piece of advice, it's to prioritze your Blueprint. Set boundaries.
		Although it's taken me a long time to get here, I'm starting my journey as a developer. I wish I'd known it was going to be this fun.





Persistence is key!
Keep practicing and it will become easier over time.






You will run into problems but don't give up!
Before taking this course I was already familiar with CSS and HTML but I had never learned a programming language before.
Naturally I ran into a number of problems and even though I got frustrated I just kept saying "don't give up, don't give up."
Evenutally, I solved the problems by either asking for help or researching for solutions on my own.
So whatever you do, don't give up!



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Remember to breath
When you are working out, getting sweating, and feeling the pain, remmber to breath. That's what they tell you to do at the gym. Do it when you code. Take a deep breath when you feel the burn. No pain, no gain. 



Just keep going!!
You have to keep on reading and typing and it will eventaully make sense!!
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.



OY-VAY, Coffee, Grey hair, and a Boss mentality
Look.  I'm not going to beat around the bush.  Technology is difficult to understand.  HOWEVER, you WILL succeed.
It is super easy to just put off learning something new. It will be easy to let your mind wander. Don't let that come in front of you and a great future.
You will learn something exciting, something new, something you can walk away from and come back and knock technology out of the park. You will climb mountains. You will come to a dragon and that beast will draw a line in front of you with a great fiery blaze...but you will cross that line more than once.
Deep breath.  And now the plunge.  You Boss.
Yes it is simple.  You either will or will not do it.  The choice is yours.  Take the blue pill or red pill (Matrix reference).  You are Neo.  You will see how far the rabbit hole goes.  You are a boss and will prevail.
Self-doubt.  Can't.  Won't.  Impossible.  These words are meaningless.  Focus on the words Can, Do, Yes, Win, and Winning
Coffee and being a boss did it for me.  What will do it for you?






R Travis Brace
May 9th, 2015


Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.


Take a breath
There will be a point (more than one!) where what you're doing has you fuming and ready to tear out your hair.  That's a good point to walk away and take a few breaths.  It's natural, it's normal, and it happens to everyone.


Don't give up!
There may be times when it seems like you're in way over your head. Those are the moments you need to give yourself a break. Take time to focus on something else. Do something for you. Then, come back to your problem with a clear head.
Sometimes, all it takes is a new perspective.



Learning
Doing something new can be frightening, but taking small steps helps in conquering it.
Some people talk about Confusion as part of the learning process.  Is real! Sometimes the feeling can be overwhelming, and for some the natural response is to stop. Don't, it takes time to assimilate new learning.
When you keep going through the lessons and doing the challenges, little by little everything becomes a bit clear. You should keep in mind that in addition to asking questions, sometimes it helps to search the internet.
Perseverance and Passion are important in learning
Learning requires patience, which for some us is difficult to keep because we want quick results.  This is when perseverance comes in. When you believe you are not achieving things at the pace that you want, don't be dissapointed, this is natural.
Perseverance allows you to keep going even if you see no progress or find many difficulties.
We should keep in mind to take breaks and let the knowledge sink in. I know for some it may not be a choice because we are sometimes hardwired to keep going until we get it, but a break allows the brain to process information.
Lastly, when you are passionate about something spending time on it won't matter. It will allow you to enjoy the process of discovering that each day you know a little bit more.



Don't be afraid to make mistakes
Mistakes, obviously, show us what needs improving.Without mistakes, how would we know what we had to work on? -- Peter McWilliams
New designers and developers make a lot of mistakes.  People who have been programming for 20+ years, like me, make a lot of mistakes.  Don't worry about how many mistakes you make. The trick is to get up, fix them, and keep going.
Ask for help
Your Skillcrush instructors are there to help you.  Ask questions in the MightyBell circles. Your fellow students may be struggling with the same problem.  Maybe someone else has already solved it, and can give you a hand. You'll never know unless you ask.
Use on-line resources
There is a wonderful set of tutorials at w3schools.com.  They cover just about every aspect of HTML and CSS, and they provide a practice area where you can try things yourself and see immediate results.  You can search for a term and find the reference page for it quickly and easily.
Another good on-line resource is stackoverflow.com. Search to see if your question has already been asked, and if not, ask it.  The articles there are super-helpful. The explanation of why something works can get a bit technical, but the articles do explain what to do to make something work.
Invest in a couple of good reference books if you can
My favorites are the "Missing Manual" series (Creating a Website: The Missing Manual, HTML5: The Missing Manual, etc.).  They're not books that make you want to sit down and read them straight through.  But they're really well-indexed and therefore make it easy to look up the topic you need.
While I love my Kindle and e-books in general, I still think it's best to invest in a paper copy.  That makes it easier to mark all the pages you will want to be able to come back to later.
Don't give up!
In the words of the immortal Winston Churchill, "Never, never, never give up."  Learning a new language is hard.  Learning new programming languages, like HTML, CSS, JavaScript, etc. is also hard.  Stick to it, and you'll find it gets easier with time.
And a final word...
When you're writing code, there will be a lot of times when you don't feel like you are getting the results you wanted.  I'll leave you with a final quote from Albert Einstein:
			Results!
				Why, man, I have gotten a lot of results.

Everything is Figure-Outable.
In a feminist group I work with, one of the women last week told a story about her discovery that her "tech-savvy" boyfriend was really just using google.   That realization spurred her to take ownership of her trajectory in tech, and spawned the mantra "Everything is figure-outable."   Whenever I'm feeling overwhelmed by the sheer amount that I don't know, I take a deep breath and repeat to myself that everything is figure-outable.  If it's not coming to you yet, don't stress out.  The slow, steady learner ends up having the most thorough understanding in the end. 
So, whenever you're feeling overwhelmed--give yourself a break!  Everything is figure-outable, you've just got to put in the time.   The more work you do, the clearer things become.  And, of course, there's always google!  :)
Code Every Day. 
I have a tendency to work in manic cycles--in two days I can spend twenty hours coding, but then I won't look at my code for a week.  This has been my biggest struggling point, as my brain calcifies pretty quickly.  Every time I spend a week away from html, or css, or java, I have to spend precious time reminding myself of basics--syntax, positioning, the layout idea I was working on--when I should be using that time to spruce up the project.
While, obviously, you can't code EVERY every day (my mom would totally kill me if I tried to pull out my laptop during Thanksgiving to do a bit of work!), it's good to get in the habit of putting in a bit of work each day, so that you keep your brain fresh.  It's all about minimizing your time on the boring stuff--like syntax--and maximizing the fun stuff--like UI optimization and problem-solving!
So get out those schedules, find a nice block, and pencil in some coding time!



1. The Inevitable Wall
When you get stuck and can't move forward because somethng is broken, not working the way it is supposed to and you can't move on- think of these moments as opportunities to get better. Everytime you troubleshoot something and get it fixed- whether solving yourself or finding help through stack overflow, or google search, it makes you that much stronger. See these moments not as obstacles but as opportunities.
2. Put the mouse down and step away from the computer...
Do not forget to take breaks, and give your mind and eyes a break. Often times when you come back to the comuter after a break you see things you weren't seeing before due to fatiugue or diminishing returns of mental exertion.



Get a job in Tech!
Trust me when I say: you can only love your job so much.
Be smart, get a job that pays well so that you can pursue whatever passions you want.
Don't forget to speak up.
Speak your truth. For women in tech, this can sometimes be hard. It's a male-dominated field. But you'll never get what you want if you stay silent.



Keep On Hacking
You will hear this a hundred times on your journey to learn and master development. Whether it is HTML, CSS, Javascript or backend languages like ruby hack something everyday. Build, try new things, or dissect someone else's code. Things will get easier this way. You will begin to start committing processes to memory and exponentially grow you skill as a developer.
This title "keep on hacking" was something I grabbed from DevTips fantastic resource that I have used in my journey to learn development alongside Skillcrush. Travis shares in one of his videos why he says "keep on hacking" at the end of every video and it is a powerful video. It shows where he was when he first began developing websites and his journey to where he is now. P.S. - Where he is now just happens to be a designer for Google. You can view the video here: My First Websites Were Horrible! [ SHOWCASE ]
Do Not Be Afraid To Jump Into Preprecessors
Two of the traits I have picked up that all desireable developers have are DRY(Don't Repeat Yourself) code and quick code. That is exactly what preprocessors were made for. As front-end developers you should not be afraid to constantly learn and keep up with new methods for efficient programming. Preprocessors take a little to initially get setup but are worth it.
Do not be afraid of the new syntax options and new tools for speeding up your workflow. Preprocessors are built so that you can still type in regular CSS and it will work. This way you can slowing add in new tools without having to completely learn a new language. My personal favorite is SASS. Check it out.



Confusion is your friend!
When you start programming your first web app you are doing something that you have never done before. It's a new challenge, a new opportunity, and in the case of software development, something so specific that it's probably never been done before.
Confusion, therefore, is a sign that you are heading in the right direction. It's a signal that you have engaged in the problem solving pursuit that is math and technology and that it's time for you to dig deeper and keep going because clarity awaits.
Suspended disbelief plays an important role.
When you are learning a new technology, whether you are learning to write your first programming language, or just the latest framework, you go through this uncomfortable phase where you know that the code you are looking at is doing this THING but you don't understand HOW exactly it's happening.
This is a normal part of the process of learning a new technology, and in fact, it's a critical part of the process.
You see when you encounter a new programming language part of your learning process includes learning to train your eye. The way to train your eye is to read a good deal of code even when you don't totally understand what it's doing.
Be confident, even if you're new to this!



Jump In, Head First
Contrary to the warnings that you saw at the public swimming pool when you were a little kid, coding requires to jump in and not think about it too much. If you spend all your time reading books and not getting practical experience in a bash shell, then you need to join an online course like Skillcrush.
Start Now, and Not Later
When the tech sector regained its lustre after 2000 it was SaaS, the Cloud, mobile apps, and now truly web enabled technologies like Ruby on Rails, the MEAN stack, and the Full Stack. Cast your eyes over what you fancy and start now, not later. I initially was blinded by mobile apps but they're just an extension of the web experience. Start with the basics: choose the front-end, back-end or both.

